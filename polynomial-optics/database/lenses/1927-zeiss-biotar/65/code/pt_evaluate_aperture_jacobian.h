case zeiss__biotar__1927__65mm:
{
const double dx00 =  + 0.436185  + 0.160606 *lambda + -0.111298 *lens_ipow(lambda, 2) + -0.211338 *lens_ipow(dy, 2) + -0.398444 *lens_ipow(dx, 2) + -0.0050129 *y*dy + -0.000136241 *lens_ipow(y, 2) + -0.00595235 *x*dx + -0.000294308 *lens_ipow(x, 2) + 0.0300327 *y*lens_ipow(dx, 2)*dy + -2.56789e-05 *x*lens_ipow(y, 2)*dx + -0.00133278 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -4.34497e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -5.97444e-05 *lens_ipow(x, 3)*dx + -8.49815e-07 *lens_ipow(x, 4) + 4.8303 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -2.15835e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.88038e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + -0.00772907 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx01 =  + -0.212154 *dx*dy + -0.00123413 *y*dx + -0.0050129 *x*dy + -0.000272483 *x*y + -0.412554 *dx*lens_ipow(dy, 3) + 0.0300327 *x*lens_ipow(dx, 2)*dy + -2.56789e-05 *lens_ipow(x, 2)*y*dx + -2.89664e-07 *lens_ipow(x, 3)*y + -7.66159e-05 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -2.8778e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -1.88038e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + -0.0154581 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx02 =  + 39.4502  + 8.11669 *lambda + -5.58295 *lens_ipow(lambda, 2) + -25.246 *lens_ipow(dy, 2) + -74.8015 *lens_ipow(dx, 2) + -0.212154 *y*dy + -0.000617063 *lens_ipow(y, 2) + -0.796887 *x*dx + -0.00297618 *lens_ipow(x, 2) + -0.412554 *y*lens_ipow(dy, 3) + 0.0600655 *x*y*dx*dy + -1.28394e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00088852 *lens_ipow(x, 3)*dx + -1.49361e-05 *lens_ipow(x, 4) + -5.7462e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 9.6606 *x*dx*lens_ipow(dy, 4) + -0.0154581 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + -50.4921 *dx*dy + -0.212154 *y*dx + -0.422675 *x*dy + -0.0050129 *x*y + -1.23766 *y*dx*lens_ipow(dy, 2) + 0.0300327 *x*y*lens_ipow(dx, 2) + 19.3212 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -6.26792e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + -0.0154581 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx04 =  + 8.11669 *dx + 0.160606 *x + -11.1659 *dx*lambda + -0.222596 *x*lambda + -6.26792e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -0.0154581 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx10 =  + -0.232228 *dx*dy + -0.00501307 *y*dx + -0.00131368 *x*dy + -0.000273447 *x*y + 0.0338453 *y*dx*lens_ipow(dy, 2) + -0.00903238 *x*lens_ipow(dy, 3) + 0.0385124 *x*lens_ipow(dx, 2)*dy + -2.41528e-05 *x*lens_ipow(y, 2)*dy + -2.81475e-07 *x*lens_ipow(y, 3) + 0.000747219 *lens_ipow(x, 2)*dx*dy + -9.27542e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -2.7268e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const double dx11 =  + 0.435502  + 0.162013 *lambda + -0.111377 *lens_ipow(lambda, 2) + -0.394523 *lens_ipow(dy, 2) + -0.208154 *lens_ipow(dx, 2) + -0.00612599 *y*dy + -0.000299662 *lens_ipow(y, 2) + -0.00501307 *x*dx + -0.000136724 *lens_ipow(x, 2) + -0.00133285 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -5.81577e-05 *lens_ipow(y, 3)*dy + -8.33355e-07 *lens_ipow(y, 4) + 0.0338453 *x*dx*lens_ipow(dy, 2) + -2.41528e-05 *lens_ipow(x, 2)*y*dy + -4.22212e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -9.27542e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -2.0451e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.0451709 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 2)+0.0f;
const double dx12 =  + -51.4296 *dx*dy + -0.416308 *y*dx + -0.232228 *x*dy + -0.00501307 *x*y + 0.0338453 *x*y*lens_ipow(dy, 2) + 0.0385124 *lens_ipow(x, 2)*dx*dy + 0.000249073 *lens_ipow(x, 3)*dy + -3.09181e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.0602278 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx13 =  + 39.44  + 8.11557 *lambda + -5.54718 *lens_ipow(lambda, 2) + -74.2373 *lens_ipow(dy, 2) + -25.7148 *lens_ipow(dx, 2) + -0.789046 *y*dy + -0.00306299 *lens_ipow(y, 2) + -0.232228 *x*dx + -0.000656839 *lens_ipow(x, 2) + -0.000888568 *lens_ipow(y, 3)*dy + -1.45394e-05 *lens_ipow(y, 4) + 0.0676905 *x*y*dx*dy + -0.0135486 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.0192562 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -1.20764e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.000249073 *lens_ipow(x, 3)*dx + 0.0301139 *lens_ipow(y, 3)*lens_ipow(dx, 4)*dy+0.0f;
const double dx14 =  + 8.11557 *dy + 0.162013 *y + -11.0944 *dy*lambda + -0.222755 *y*lambda+0.0f;
const double dx20 =  + -0.0199974  + 0.00539553 *lambda + -0.00394961 *lens_ipow(lambda, 2) + -0.00804161 *lens_ipow(dy, 2) + -0.0222548 *lens_ipow(dx, 2) + -0.000129883 *y*dy + -6.72612e-06 *lens_ipow(y, 2) + -2.23729e-05 *lens_ipow(x, 2) + -0.00159259 *x*dx*lambda + -1.28133e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -4.64778e-09 *lens_ipow(y, 4) + 0.0012385 *x*dx*lens_ipow(lambda, 2) + -6.46427e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00116926 *x*lens_ipow(dx, 3)*lambda + 7.46228e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 1.77314e-07 *lens_ipow(x, 3)*y*dx*dy + -9.84085e-08 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -6.73962e-11 *lens_ipow(x, 6) + -5.37655e-13 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda+0.0f;
const double dx21 =  + -0.0155243 *dx*dy + -0.000220371 *y*dx + -0.000129883 *x*dy + -1.34522e-05 *x*y + -2.56266e-05 *x*y*lens_ipow(dx, 2) + -1.85911e-08 *x*lens_ipow(y, 3) + -4.30951e-08 *lens_ipow(x, 3)*y + 4.97485e-08 *lens_ipow(x, 3)*y*lambda + 4.43286e-08 *lens_ipow(x, 4)*dx*dy + -4.30124e-13 *lens_ipow(x, 5)*lens_ipow(y, 3)*lambda+0.0f;
const double dx22 =  + 0.48548  + -0.0309548 *lambda + -0.424269 *lens_ipow(dy, 2) + -1.20698 *lens_ipow(dx, 2) + -0.0155243 *y*dy + -0.000110186 *lens_ipow(y, 2) + -0.0445096 *x*dx + -0.000796295 *lens_ipow(x, 2)*lambda + 1.25412 *lens_ipow(dy, 4) + 7.4376 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 5.24162 *lens_ipow(dx, 4) + -2.56266e-05 *x*lens_ipow(y, 2)*dx + 0.000619248 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.00175389 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 4.43286e-08 *lens_ipow(x, 4)*y*dy+0.0f;
const double dx23 =  + -0.848538 *dx*dy + -0.0155243 *y*dx + -0.0160832 *x*dy + -0.000129883 *x*y + 5.01649 *dx*lens_ipow(dy, 3) + 4.9584 *lens_ipow(dx, 3)*dy + 4.43286e-08 *lens_ipow(x, 4)*y*dx + -3.93634e-08 *lens_ipow(x, 5)*dy+0.0f;
const double dx24 =  + -0.0309548 *dx + 0.00539553 *x + -0.00789921 *x*lambda + -0.000796295 *lens_ipow(x, 2)*dx + 0.0012385 *lens_ipow(x, 2)*dx*lambda + 0.00058463 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 2.48743e-08 *lens_ipow(x, 3)*lens_ipow(y, 2) + -1.07531e-13 *lens_ipow(x, 5)*lens_ipow(y, 4)+0.0f;
const double dx30 =  + -0.014449 *dx*dy + -0.000128769 *y*dx + -1.52982e-05 *x*y + -0.000360152 *x*dy*lambda + -4.70918e-11 *x*lens_ipow(y, 5) + -1.66819e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -5.55227e-07 *lens_ipow(x, 3)*y*lens_ipow(dy, 2)*lambda + -1.04663e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + -0.00100837 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 3) + -3.33653e-11 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx31 =  + -0.020169  + 0.00586381 *lambda + -0.0042176 *lens_ipow(lambda, 2) + -0.0222349 *lens_ipow(dy, 2) + -0.00811379 *lens_ipow(dx, 2) + -2.12504e-05 *lens_ipow(y, 2) + -0.000128769 *x*dx + -7.64912e-06 *lens_ipow(x, 2) + -0.00146192 *y*dy*lambda + 0.00105283 *y*dy*lens_ipow(lambda, 2) + -1.77123e-08 *lens_ipow(y, 4) + 0.00121747 *y*lens_ipow(dy, 3)*lambda + -1.07482e-07 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -1.17729e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.25115e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + -1.38807e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2)*lambda + -5.23317e-09 *lens_ipow(x, 4)*y*dy*lambda + -5.56088e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx32 =  + -0.49343 *dx*dy + -0.0162276 *y*dx + -0.014449 *x*dy + -0.000128769 *x*y + 20.5712 *dx*lens_ipow(dy, 5) + -4.29928e-08 *lens_ipow(y, 5)*dx + 512.105 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + -0.00100837 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + -1.11218e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(lambda, 2)+0.0f;
const double dx33 =  + 0.474235  + -0.0182927 *lambda + -0.856711 *lens_ipow(dy, 2) + -0.246715 *lens_ipow(dx, 2) + -0.0444697 *y*dy + -0.014449 *x*dx + -0.000730958 *lens_ipow(y, 2)*lambda + -0.000180076 *lens_ipow(x, 2)*lambda + 0.000526413 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.0018262 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 21.0239 *lens_ipow(dy, 6) + 51.428 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -2.77613e-07 *lens_ipow(x, 4)*y*dy*lambda + -2.61658e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + 256.052 *lens_ipow(dx, 6)*lens_ipow(dy, 2) + -0.000336123 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx34 =  + -0.0182927 *dy + 0.00586381 *y + -0.00843519 *y*lambda + -0.000730958 *lens_ipow(y, 2)*dy + -0.000180076 *lens_ipow(x, 2)*dy + 0.00105283 *lens_ipow(y, 2)*dy*lambda + 0.000608733 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -1.38807e-07 *lens_ipow(x, 4)*y*lens_ipow(dy, 2) + -2.61658e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy + -0.00100837 *lens_ipow(x, 3)*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + -2.22435e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*lambda+0.0f;
const double dx40 =  + -0.000329381 *dx + -0.00656534 *dx*lens_ipow(dy, 2) + -0.00451099 *lens_ipow(dx, 3) + -9.21829e-08 *x*lens_ipow(y, 2) + -9.89034e-08 *lens_ipow(x, 3) + -0.0247828 *lens_ipow(dx, 5) + 0.00072873 *y*dx*lens_ipow(dy, 3) + 0.00422898 *y*lens_ipow(dx, 5)*dy + -3.4449e-06 *x*lens_ipow(y, 2)*lens_ipow(dy, 4) + -1.44712e-08 *x*lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + 0.000282991 *lens_ipow(y, 2)*lens_ipow(dx, 7)+0.0f;
const double dx41 =  + -0.000308232 *dy + -0.0044812 *lens_ipow(dy, 3) + -0.00667311 *lens_ipow(dx, 2)*dy + -9.87168e-08 *lens_ipow(y, 3) + -9.21829e-08 *lens_ipow(x, 2)*y + -0.0266415 *lens_ipow(dy, 5) + 0.00072873 *x*dx*lens_ipow(dy, 3) + 0.00422898 *x*lens_ipow(dx, 5)*dy + -3.4449e-06 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + -2.17068e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 0.000565982 *x*y*lens_ipow(dx, 7)+0.0f;
const double dx42 =  + -0.000329381 *x + -2.29605 *dx*lens_ipow(dy, 2) + -2.27684 *lens_ipow(dx, 3) + -0.0133462 *y*dx*dy + -0.00656534 *x*lens_ipow(dy, 2) + -0.013533 *x*lens_ipow(dx, 2) + -0.123914 *x*lens_ipow(dx, 4) + 0.00072873 *x*y*lens_ipow(dy, 3) + -26.6142 *dx*lens_ipow(dy, 6) + -61.5147 *lens_ipow(dx, 3)*lens_ipow(dy, 4) + -82.8125 *lens_ipow(dx, 5)*lens_ipow(dy, 2) + -35.7498 *lens_ipow(dx, 7) + 0.0211449 *x*y*lens_ipow(dx, 4)*dy + 0.00198094 *x*lens_ipow(y, 2)*lens_ipow(dx, 6)+0.0f;
const double dx43 =  + -0.000308232 *y + -2.25845 *lens_ipow(dy, 3) + -2.29605 *lens_ipow(dx, 2)*dy + -0.0134436 *y*lens_ipow(dy, 2) + -0.00667311 *y*lens_ipow(dx, 2) + -0.0131307 *x*dx*dy + -0.133207 *y*lens_ipow(dy, 4) + 0.00218619 *x*y*dx*lens_ipow(dy, 2) + -38.9088 *lens_ipow(dy, 7) + -79.8426 *lens_ipow(dx, 2)*lens_ipow(dy, 5) + -61.5147 *lens_ipow(dx, 4)*lens_ipow(dy, 3) + -27.6042 *lens_ipow(dx, 6)*dy + 0.00422898 *x*y*lens_ipow(dx, 5) + -6.88979e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 3) + -7.2356e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx44 =  + 0.500878  + -1.38593 *lambda + 1.01137 *lens_ipow(lambda, 2) + -1.44712e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda+0.0f;
} break;
