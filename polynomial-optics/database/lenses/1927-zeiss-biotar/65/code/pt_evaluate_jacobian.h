case zeiss__biotar__1927__65mm:
{
const double dx00 =  + 0.191737  + 0.0661601 *lambda + 0.883576 *lens_ipow(dx, 2) + -0.000190697 *lens_ipow(y, 2) + 0.0392663 *x*dx + -0.000363344 *lens_ipow(x, 2) + 2.51073 *lens_ipow(dy, 2)*lambda + 0.0327412 *y*dy*lambda + -2.13248 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.700146 *lens_ipow(dy, 4) + 2.26636 *lens_ipow(dx, 4) + 0.148678 *y*lens_ipow(dx, 2)*dy + 0.00125879 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.40794 *x*lens_ipow(dx, 3) + 0.0112533 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -1.81009e-06 *lens_ipow(x, 4) + 0.274326 *x*dx*lens_ipow(dy, 2)*lambda + 0.0105934 *x*y*dx*dy*lambda + 0.00449304 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -8.16747e-05 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + -6.123e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)+0.0f;
const double dx01 =  + 0.396334 *dx*dy + 0.0131513 *y*dx + -0.000381394 *x*y + 0.0327412 *x*dy*lambda + -1.30423 *dx*lens_ipow(dy, 3) + 0.148678 *x*lens_ipow(dx, 2)*dy + 0.00251759 *x*y*lens_ipow(dx, 2) + 0.00529671 *lens_ipow(x, 2)*dx*dy*lambda + -0.000245024 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -8.164e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const double dx02 =  + 64.3767  + 1.16729 *lambda + -27.6186 *lens_ipow(dy, 2) + -77.5395 *lens_ipow(dx, 2) + 0.396334 *y*dy + 0.00657566 *lens_ipow(y, 2) + 1.76715 *x*dx + 0.0196332 *lens_ipow(x, 2) + -1.30423 *y*lens_ipow(dy, 3) + 9.06545 *x*lens_ipow(dx, 3) + 0.297356 *x*y*dx*dy + 0.00251759 *x*lens_ipow(y, 2)*dx + 0.61191 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.0075022 *lens_ipow(x, 3)*dx + 0.137163 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 0.00529671 *lens_ipow(x, 2)*y*dy*lambda+0.0f;
const double dx03 =  + -55.2372 *dx*dy + 0.396334 *y*dx + 5.02146 *x*dy*lambda + 0.0327412 *x*y*lambda + -3.91269 *y*dx*lens_ipow(dy, 2) + -4.26496 *x*dy*lens_ipow(lambda, 2) + -2.80058 *x*lens_ipow(dy, 3) + 0.148678 *x*y*lens_ipow(dx, 2) + 0.274326 *lens_ipow(x, 2)*dx*dy*lambda + 0.00529671 *lens_ipow(x, 2)*y*dx*lambda + 0.00299536 *lens_ipow(x, 3)*dy*lambda + -8.16747e-05 *x*lens_ipow(y, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx04 =  + 1.16729 *dx + 0.0661601 *x + 2.51073 *x*lens_ipow(dy, 2) + 0.0327412 *x*y*dy + -4.26496 *x*lens_ipow(dy, 2)*lambda + 0.137163 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 0.00529671 *lens_ipow(x, 2)*y*dx*dy + 0.00149768 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -0.000163349 *x*lens_ipow(y, 3)*dy*lambda+0.0f;
const double dx10 =  + 0.474421 *dx*dy + 0.0222542 *y*dx + 0.0174517 *x*dy + 0.0945208 *y*dx*lens_ipow(dy, 2) + -4.18019e-05 *lens_ipow(y, 3)*dx + -0.000106541 *x*lens_ipow(y, 2)*dy + -2.40989e-06 *x*lens_ipow(y, 3) + -2.35291e-05 *lens_ipow(x, 3)*dy + -2.08309e-06 *lens_ipow(x, 3)*y + 0.114229 *x*lens_ipow(dx, 2)*dy*lambda + -0.000198195 *lens_ipow(x, 2)*y*dx*lambda + 0.0751999 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx11 =  + 0.181475  + 0.0650781 *lambda + 1.18351 *lens_ipow(dy, 2) + 0.747602 *lens_ipow(dx, 2) + 0.0524857 *y*dy + 0.0222542 *x*dx + -0.609336 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.349404 *y*lens_ipow(dy, 3) + 0.064386 *y*lens_ipow(dx, 2)*dy + 0.00694025 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000104539 *lens_ipow(y, 3)*dy + -2.92732e-06 *lens_ipow(y, 4) + 0.0945208 *x*dx*lens_ipow(dy, 2) + -0.000125406 *x*lens_ipow(y, 2)*dx + -0.000106541 *lens_ipow(x, 2)*y*dy + -3.61483e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -5.20772e-07 *lens_ipow(x, 4) + 4.64527 *lens_ipow(dy, 4)*lambda + -6.6065e-05 *lens_ipow(x, 3)*dx*lambda + 0.0751999 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx12 =  + -49.7185 *dx*dy + 1.4952 *y*dx + 0.474421 *x*dy + 0.0222542 *x*y + 0.064386 *lens_ipow(y, 2)*dx*dy + 0.0945208 *x*y*lens_ipow(dy, 2) + -4.18019e-05 *x*lens_ipow(y, 3) + 0.114229 *lens_ipow(x, 2)*dx*dy*lambda + -6.6065e-05 *lens_ipow(x, 3)*y*lambda + 0.2256 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 64.8882  + -82.2858 *lens_ipow(dy, 2) + -24.8592 *lens_ipow(dx, 2) + 2.36701 *y*dy + 0.0262429 *lens_ipow(y, 2) + 0.474421 *x*dx + 0.00872586 *lens_ipow(x, 2) + -1.21867 *y*dy*lens_ipow(lambda, 2) + 0.524106 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.032193 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00462683 *lens_ipow(y, 3)*dy + -2.61347e-05 *lens_ipow(y, 4) + 0.189042 *x*y*dx*dy + -5.32706e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -5.88229e-06 *lens_ipow(x, 4) + 18.5811 *y*lens_ipow(dy, 3)*lambda + 0.0571145 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 283.158 *lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx14 =  + 0.0650781 *y + -1.21867 *y*lens_ipow(dy, 2)*lambda + 4.64527 *y*lens_ipow(dy, 4) + 0.0571145 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy + -6.6065e-05 *lens_ipow(x, 3)*y*dx + 113.263 *lens_ipow(dy, 5)*lambda + 0.1504 *x*y*lens_ipow(dx, 3)*lambda+0.0f;
const double dx20 =  + -0.0184927  + -0.00328474 *lambda + 0.00223705 *lens_ipow(lambda, 2) + -0.0148891 *lens_ipow(dy, 2) + -0.00483571 *lens_ipow(dx, 2) + -0.000271304 *y*dy + 5.42725e-06 *lens_ipow(y, 2) + 1.66895e-05 *lens_ipow(x, 2) + 3.64016e-07 *lens_ipow(y, 3)*dy + -0.000773958 *x*dx*lens_ipow(dy, 2) + -0.00279214 *x*lens_ipow(dx, 3) + 4.08101e-05 *x*y*dx*dy + 5.73422e-07 *x*lens_ipow(y, 2)*dx + -0.000916617 *y*lens_ipow(dy, 3)*lambda + -0.00199526 *y*lens_ipow(dx, 2)*dy*lambda + 2.50522e-06 *lens_ipow(x, 2)*y*dy*lambda + -0.000297984 *lens_ipow(x, 2)*lens_ipow(dx, 4) + 1.81999e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + 6.88425e-13 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx21 =  + -0.0109083 *dx*dy + 0.000105427 *y*dx + -0.000271304 *x*dy + 1.08545e-05 *x*y + -0.00233131 *y*dx*lens_ipow(dy, 2) + 1.09205e-06 *x*lens_ipow(y, 2)*dy + 2.0405e-05 *lens_ipow(x, 2)*dx*dy + 5.73422e-07 *lens_ipow(x, 2)*y*dx + -0.0621033 *dx*lens_ipow(dy, 3)*lambda + -0.000916617 *x*lens_ipow(dy, 3)*lambda + -0.00199526 *x*lens_ipow(dx, 2)*dy*lambda + 8.35075e-07 *lens_ipow(x, 3)*dy*lambda + 1.81999e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 5.5074e-13 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx22 =  + -1.19982  + 1.81942 *lens_ipow(dx, 2) + -0.0109083 *y*dy + 5.27137e-05 *lens_ipow(y, 2) + -0.00967143 *x*dx + -0.441241 *lens_ipow(dy, 2)*lambda + -0.00116566 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000386979 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.0041882 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 2.0405e-05 *lens_ipow(x, 2)*y*dy + 2.86711e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0621033 *y*lens_ipow(dy, 3)*lambda + -0.00399053 *x*y*dx*dy*lambda + -0.000397312 *lens_ipow(x, 3)*lens_ipow(dx, 3) + 112.651 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + 4.54998e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + 2699.19 *lens_ipow(dx, 8)*lens_ipow(dy, 2)+0.0f;
const double dx23 =  + -0.0109083 *y*dx + -0.0297782 *x*dy + -0.000271304 *x*y + -0.882481 *dx*dy*lambda + -0.00233131 *lens_ipow(y, 2)*dx*dy + 3.64016e-07 *x*lens_ipow(y, 3) + -0.000773958 *lens_ipow(x, 2)*dx*dy + 2.0405e-05 *lens_ipow(x, 2)*y*dx + -0.18631 *y*dx*lens_ipow(dy, 2)*lambda + -0.00274985 *x*y*lens_ipow(dy, 2)*lambda + -0.00199526 *x*y*lens_ipow(dx, 2)*lambda + 8.35075e-07 *lens_ipow(x, 3)*y*lambda + 150.201 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 599.819 *lens_ipow(dx, 9)*dy+0.0f;
const double dx24 =  + -0.00328474 *x + 0.0044741 *x*lambda + -0.441241 *dx*lens_ipow(dy, 2) + -0.0621033 *y*dx*lens_ipow(dy, 3) + -0.000916617 *x*y*lens_ipow(dy, 3) + -0.00199526 *x*y*lens_ipow(dx, 2)*dy + 8.35075e-07 *lens_ipow(x, 3)*y*dy + 75.1004 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx30 =  + 0.0237108 *dx*dy + -8.01681e-05 *y*dx + 0.000299204 *x*dy + 1.07711e-05 *x*y + -0.00103026 *y*dx*lens_ipow(dy, 2) + -1.3743e-05 *x*y*lens_ipow(dy, 2) + 8.13595e-07 *lens_ipow(x, 2)*y*dx*lambda + 4.44785e-11 *lens_ipow(x, 5)*y + 1.72192e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 5.27283e-13 *lens_ipow(x, 3)*lens_ipow(y, 5) + 6.82303e-14 *lens_ipow(x, 4)*lens_ipow(y, 5)*dx+0.0f;
const double dx31 =  + -0.0186865  + -0.00286609 *lambda + 0.0021301 *lens_ipow(lambda, 2) + -0.00760933 *lens_ipow(dx, 2) + 1.79343e-05 *lens_ipow(y, 2) + -8.01681e-05 *x*dx + 5.38553e-06 *lens_ipow(x, 2) + -4.28966e-06 *lens_ipow(y, 2)*lambda + -0.0489788 *lens_ipow(dy, 4) + 0.0109239 *lens_ipow(dx, 4) + -0.00454383 *y*lens_ipow(dy, 3) + -8.28565e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -2.93568e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 8.9788e-09 *lens_ipow(y, 4) + -0.00103026 *x*dx*lens_ipow(dy, 2) + -6.87151e-06 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 2.71198e-07 *lens_ipow(x, 3)*dx*lambda + -0.001928 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 7.41308e-12 *lens_ipow(x, 6) + 1.72192e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 6.59104e-13 *lens_ipow(x, 4)*lens_ipow(y, 4) + 6.82303e-14 *lens_ipow(x, 5)*lens_ipow(y, 4)*dx+0.0f;
const double dx32 =  + 2.62777 *dx*dy + -0.0152187 *y*dx + 0.0237108 *x*dy + -8.01681e-05 *x*y + 1.41077 *dx*lens_ipow(dy, 3) + 0.0436954 *y*lens_ipow(dx, 3) + -1.95712e-05 *lens_ipow(y, 3)*dx + -0.00103026 *x*y*lens_ipow(dy, 2) + 2.71198e-07 *lens_ipow(x, 3)*y*lambda + -0.001928 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + 1.36461e-14 *lens_ipow(x, 5)*lens_ipow(y, 5)+0.0f;
const double dx33 =  + -1.19504  + 1.69296 *lens_ipow(dy, 2) + 1.31388 *lens_ipow(dx, 2) + 0.0237108 *x*dx + 0.000149602 *lens_ipow(x, 2) + 2.11616 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.195915 *y*lens_ipow(dy, 3) + -0.00681574 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -5.52377e-05 *lens_ipow(y, 3)*dy + -0.00206051 *x*y*dx*dy + -1.3743e-05 *lens_ipow(x, 2)*y*dy + -0.000963999 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 4.30481e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx34 =  + -0.00286609 *y + 0.0042602 *y*lambda + -1.42989e-06 *lens_ipow(y, 3) + 2.71198e-07 *lens_ipow(x, 3)*y*dx + -0.001928 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx40 =  + -3.03426e-05 *x + -0.0502733 *dx*lens_ipow(dy, 2) + -0.0489009 *lens_ipow(dx, 3) + -0.00177587 *y*dx*dy + -1.39641e-05 *lens_ipow(y, 2)*dx + -0.000812493 *x*lens_ipow(dy, 2) + -0.00243111 *x*lens_ipow(dx, 2) + -2.55566e-05 *x*y*dy + -3.71469e-05 *lens_ipow(x, 2)*dx + -1.96266e-09 *lens_ipow(x, 3)*lens_ipow(y, 2) + 3.68909e-06 *lens_ipow(x, 2)*y*dx*dy*lambda+0.0f;
const double dx41 =  + 0.000402576 *dy + -0.0530368 *lens_ipow(dy, 3) + -0.0505484 *lens_ipow(dx, 2)*dy + -0.002757 *y*lens_ipow(dy, 2) + -0.000856437 *y*lens_ipow(dx, 2) + -4.84769e-05 *lens_ipow(y, 2)*dy + -3.12505e-07 *lens_ipow(y, 3) + -0.00177587 *x*dx*dy + -2.79282e-05 *x*y*dx + -1.27783e-05 *lens_ipow(x, 2)*dy + -9.81328e-10 *lens_ipow(x, 4)*y + 1.2297e-06 *lens_ipow(x, 3)*dx*dy*lambda+0.0f;
const double dx42 =  + -3.82544 *dx*lens_ipow(dy, 2) + -3.17565 *lens_ipow(dx, 3) + -0.101097 *y*dx*dy + -0.000856437 *lens_ipow(y, 2)*dx + -0.0502733 *x*lens_ipow(dy, 2) + -0.146703 *x*lens_ipow(dx, 2) + -0.00177587 *x*y*dy + -1.39641e-05 *x*lens_ipow(y, 2) + -0.00243111 *lens_ipow(x, 2)*dx + -1.23823e-05 *lens_ipow(x, 3) + -6.89132 *lens_ipow(dx, 5) + 1.2297e-06 *lens_ipow(x, 3)*y*dy*lambda + -149.282 *lens_ipow(dx, 3)*lens_ipow(dy, 4)+0.0f;
const double dx43 =  + 0.000402576 *y + -3.00317 *lens_ipow(dy, 3) + -3.82544 *lens_ipow(dx, 2)*dy + -0.15911 *y*lens_ipow(dy, 2) + -0.0505484 *y*lens_ipow(dx, 2) + -0.002757 *lens_ipow(y, 2)*dy + -1.6159e-05 *lens_ipow(y, 3) + -0.100547 *x*dx*dy + -0.00177587 *x*y*dx + -0.000812493 *lens_ipow(x, 2)*dy + -1.27783e-05 *lens_ipow(x, 2)*y + -8.83431 *lens_ipow(dy, 5) + 1.2297e-06 *lens_ipow(x, 3)*y*dx*lambda + -149.282 *lens_ipow(dx, 4)*lens_ipow(dy, 3)+0.0f;
const double dx44 =  + 0.699498  + -1.93009 *lambda + 1.40617 *lens_ipow(lambda, 2) + 1.2297e-06 *lens_ipow(x, 3)*y*dx*dy+0.0f;
} break;
