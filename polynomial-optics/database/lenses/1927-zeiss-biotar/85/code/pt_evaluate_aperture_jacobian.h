case zeiss__biotar__1927__85mm:
{
const double dx00 =  + 0.441284  + 0.148614 *lambda + -0.101817 *lens_ipow(lambda, 2) + -0.20401 *lens_ipow(dy, 2) + -0.416408 *lens_ipow(dx, 2) + -8.56721e-05 *lens_ipow(y, 2) + -0.00578067 *x*dx + -0.000235732 *lens_ipow(x, 2) + -0.0128199 *y*dy*lambda + 0.0300798 *y*lens_ipow(dx, 2)*dy + 0.000178463 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00065535 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -2.11906e-05 *lens_ipow(x, 3)*dx + 0.025116 *y*dy*lens_ipow(lambda, 3) + 3.51607 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 1.81614e-06 *x*lens_ipow(y, 3)*dx*dy + -0.0290931 *y*dy*lens_ipow(lambda, 6) + -1.32041e-14 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const double dx01 =  + -0.00168062 *y*dx + -0.000171344 *x*y + -0.0128199 *x*dy*lambda + -4.44835 *dx*dy*lens_ipow(lambda, 2) + 0.0228579 *y*dx*lens_ipow(dy, 2) + 0.0300798 *x*lens_ipow(dx, 2)*dy + 0.000356926 *x*y*lens_ipow(dx, 2) + 10.8821 *dx*dy*lens_ipow(lambda, 3) + 0.025116 *x*dy*lens_ipow(lambda, 3) + -7.37927 *dx*dy*lens_ipow(lambda, 4) + 2.72421e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -0.0290931 *x*dy*lens_ipow(lambda, 6) + -2.93424e-15 *lens_ipow(x, 9)*y+0.0f;
const double dx02 =  + 51.713  + 10.2785 *lambda + -7.01106 *lens_ipow(lambda, 2) + -32.9667 *lens_ipow(dy, 2) + -98.2887 *lens_ipow(dx, 2) + -0.000840311 *lens_ipow(y, 2) + -0.832817 *x*dx + -0.00289033 *lens_ipow(x, 2) + -4.44835 *y*dy*lens_ipow(lambda, 2) + 0.0114289 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0601595 *x*y*dx*dy + 0.000356926 *x*lens_ipow(y, 2)*dx + -0.0004369 *lens_ipow(x, 3)*dx + -5.29765e-06 *lens_ipow(x, 4) + 10.8821 *y*dy*lens_ipow(lambda, 3) + -7.37927 *y*dy*lens_ipow(lambda, 4) + 7.03213 *x*dx*lens_ipow(dy, 4) + 9.08072e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy+0.0f;
const double dx03 =  + -65.9335 *dx*dy + -0.40802 *x*dy + -0.0128199 *x*y*lambda + -4.44835 *y*dx*lens_ipow(lambda, 2) + 0.0228579 *lens_ipow(y, 2)*dx*dy + 0.0300798 *x*y*lens_ipow(dx, 2) + 10.8821 *y*dx*lens_ipow(lambda, 3) + 0.025116 *x*y*lens_ipow(lambda, 3) + -7.37927 *y*dx*lens_ipow(lambda, 4) + 14.0643 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 9.08072e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -0.0290931 *x*y*lens_ipow(lambda, 6)+0.0f;
const double dx04 =  + 10.2785 *dx + 0.148614 *x + -14.0221 *dx*lambda + -0.203635 *x*lambda + -0.0128199 *x*y*dy + -8.89671 *y*dx*dy*lambda + 32.6464 *y*dx*dy*lens_ipow(lambda, 2) + 0.075348 *x*y*dy*lens_ipow(lambda, 2) + -29.5171 *y*dx*dy*lens_ipow(lambda, 3) + -0.174558 *x*y*dy*lens_ipow(lambda, 5)+0.0f;
const double dx10 =  + -0.227084 *dx*dy + -0.0032596 *y*dx + -0.00141219 *x*dy + -0.000161912 *x*y + 0.0292298 *y*dx*lens_ipow(dy, 2) + -3.11841e-06 *lens_ipow(y, 3)*dx + 0.0291382 *x*lens_ipow(dx, 2)*dy + 0.000306681 *x*y*lens_ipow(dy, 2) + 0.000580711 *lens_ipow(x, 2)*dx*dy + -2.30623e-08 *x*lens_ipow(y, 4)*dy + -5.36284e-10 *x*lens_ipow(y, 5)+0.0f;
const double dx11 =  + 0.44183  + 0.148753 *lambda + -0.102029 *lens_ipow(lambda, 2) + -0.460732 *lens_ipow(dy, 2) + -0.232539 *lens_ipow(dx, 2) + -0.00744502 *y*dy + -0.000237735 *lens_ipow(y, 2) + -0.0032596 *x*dx + -8.09562e-05 *lens_ipow(x, 2) + 0.360857 *lens_ipow(dy, 4) + 0.557035 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.181487 *lens_ipow(dx, 4) + 0.0275861 *y*lens_ipow(dy, 3) + -1.10505e-05 *lens_ipow(y, 3)*dy + 0.0292298 *x*dx*lens_ipow(dy, 2) + -9.35522e-06 *x*lens_ipow(y, 2)*dx + 0.000153341 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -4.61246e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.34071e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)+0.0f;
const double dx12 =  + -66.025 *dx*dy + -0.465078 *y*dx + -0.227084 *x*dy + -0.0032596 *x*y + 1.11407 *y*dx*lens_ipow(dy, 2) + 0.725949 *y*lens_ipow(dx, 3) + 0.0292298 *x*y*lens_ipow(dy, 2) + -3.11841e-06 *x*lens_ipow(y, 3) + 0.0291382 *lens_ipow(x, 2)*dx*dy + 0.00019357 *lens_ipow(x, 3)*dy+0.0f;
const double dx13 =  + 51.7129  + 10.2789 *lambda + -7.01485 *lens_ipow(lambda, 2) + -98.4682 *lens_ipow(dy, 2) + -33.0125 *lens_ipow(dx, 2) + -0.921463 *y*dy + -0.00372251 *lens_ipow(y, 2) + -0.227084 *x*dx + -0.000706094 *lens_ipow(x, 2) + 1.44343 *y*lens_ipow(dy, 3) + 1.11407 *y*lens_ipow(dx, 2)*dy + 0.0413791 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -2.76262e-06 *lens_ipow(y, 4) + 0.0584596 *x*y*dx*dy + 0.0145691 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000306681 *lens_ipow(x, 2)*y*dy + 0.00019357 *lens_ipow(x, 3)*dx + -1.15312e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)+0.0f;
const double dx14 =  + 10.2789 *dy + 0.148753 *y + -14.0297 *dy*lambda + -0.204059 *y*lambda+0.0f;
const double dx20 =  + -0.0152564  + 0.00382526 *lambda + -0.00253311 *lens_ipow(lambda, 2) + -0.00564783 *lens_ipow(dy, 2) + -0.00991514 *lens_ipow(dx, 2) + -5.56178e-05 *y*dy + -3.48935e-06 *lens_ipow(y, 2) + -1.0438e-05 *lens_ipow(x, 2) + -0.0131278 *lens_ipow(dx, 2)*lambda + -0.00173423 *x*dx*lens_ipow(lambda, 2) + 0.00165674 *x*dx*lens_ipow(lambda, 3) + -5.24149e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -2.36629e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -4.69266e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + -2.20581e-06 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 4) + -7.55061e-16 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const double dx21 =  + -0.00846621 *dx*dy + -5.56178e-05 *x*dy + -6.9787e-06 *x*y + -0.000215259 *y*dx*lambda + -0.0084067 *dx*dy*lens_ipow(lambda, 2) + 0.000514944 *y*dx*lens_ipow(dy, 2)*lambda + -1.57753e-07 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lambda + -2.34633e-09 *lens_ipow(x, 4)*y*dx*lambda + -7.35271e-07 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 4) + -4.31463e-16 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const double dx22 =  + 0.466723  + -0.212245 *lens_ipow(dy, 2) + -0.608027 *lens_ipow(dx, 2) + -0.00846621 *y*dy + -0.0198303 *x*dx + -0.32708 *lens_ipow(dy, 2)*lambda + -1.00914 *lens_ipow(dx, 2)*lambda + -0.000107629 *lens_ipow(y, 2)*lambda + -0.0262556 *x*dx*lambda + 1.0247 *lens_ipow(dy, 4) + 6.49438 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 5.35359 *lens_ipow(dx, 4) + -0.0084067 *y*dy*lens_ipow(lambda, 2) + -0.000867114 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.000257472 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.00082837 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + -1.57753e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + -1.17317e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda+0.0f;
const double dx23 =  + -0.424491 *dx*dy + -0.00846621 *y*dx + -0.0112957 *x*dy + -5.56178e-05 *x*y + -0.654161 *dx*dy*lambda + 4.09882 *dx*lens_ipow(dy, 3) + 4.32959 *lens_ipow(dx, 3)*dy + -0.0084067 *y*dx*lens_ipow(lambda, 2) + 0.000514944 *lens_ipow(y, 2)*dx*dy*lambda + -3.49433e-05 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 3) + -7.35271e-07 *lens_ipow(x, 3)*y*lens_ipow(lambda, 4)+0.0f;
const double dx24 =  + 0.00382526 *x + -0.00506622 *x*lambda + -0.32708 *dx*lens_ipow(dy, 2) + -0.33638 *lens_ipow(dx, 3) + -0.000107629 *lens_ipow(y, 2)*dx + -0.0131278 *x*lens_ipow(dx, 2) + -0.0168134 *y*dx*dy*lambda + -0.00173423 *lens_ipow(x, 2)*dx*lambda + 0.000257472 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.00248511 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 2) + -5.24149e-05 *lens_ipow(x, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -7.88764e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.17317e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx + -2.94109e-06 *lens_ipow(x, 3)*y*dy*lens_ipow(lambda, 3)+0.0f;
const double dx30 =  + -0.00531222 *dx*dy + -6.83164e-06 *x*y + -0.0109484 *dx*dy*lambda + -0.00012923 *y*dx*lambda + -0.00022079 *x*dy*lambda + -2.24202e-05 *x*y*lens_ipow(dy, 2)*lambda + -9.94195e-10 *x*lens_ipow(y, 4)*dy*lambda + -1.32346e-13 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const double dx31 =  + -0.0153095  + 0.00397262 *lambda + -0.00258722 *lens_ipow(lambda, 2) + -0.0137699 *lens_ipow(dy, 2) + -0.00370832 *lens_ipow(dx, 2) + -1.06173e-05 *lens_ipow(y, 2) + -3.41582e-06 *lens_ipow(x, 2) + -0.00460011 *lens_ipow(dx, 2)*lambda + -0.000511905 *y*dy*lambda + -0.00012923 *x*dx*lambda + 0.00142117 *y*lens_ipow(dy, 3)*lambda + -1.12101e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -0.0691368 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 0.0502876 *lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -1.98839e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + 0.084089 *lens_ipow(dy, 2)*lens_ipow(lambda, 6) + -1.65432e-13 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx32 =  + -0.339435 *dx*dy + -0.00741665 *y*dx + -0.00531222 *x*dy + -0.81345 *dx*dy*lambda + -0.00920022 *y*dx*lambda + -0.0109484 *x*dy*lambda + -0.00012923 *x*y*lambda + 4.40973 *dx*lens_ipow(dy, 3) + 4.38929 *lens_ipow(dx, 3)*dy+0.0f;
const double dx33 =  + 0.466055  + -0.169718 *lens_ipow(dx, 2) + -0.0275398 *y*dy + -0.00531222 *x*dx + -2.33838 *lens_ipow(dy, 2)*lambda + -0.406725 *lens_ipow(dx, 2)*lambda + -0.000255953 *lens_ipow(y, 2)*lambda + -0.0109484 *x*dx*lambda + -0.000110395 *lens_ipow(x, 2)*lambda + 6.61459 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.09732 *lens_ipow(dx, 4) + 12.2126 *lens_ipow(dy, 4)*lambda + 0.00213176 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -2.24202e-05 *lens_ipow(x, 2)*y*dy*lambda + 0.0560153 *lens_ipow(lambda, 6) + -0.138274 *y*dy*lens_ipow(lambda, 4) + 0.20115 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -4.97097e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + 0.168178 *y*dy*lens_ipow(lambda, 6)+0.0f;
const double dx34 =  + 0.00397262 *y + -0.00517443 *y*lambda + -0.779461 *lens_ipow(dy, 3) + -0.406725 *lens_ipow(dx, 2)*dy + -0.00460011 *y*lens_ipow(dx, 2) + -0.000255953 *lens_ipow(y, 2)*dy + -0.0109484 *x*dx*dy + -0.00012923 *x*y*dx + -0.000110395 *lens_ipow(x, 2)*dy + 2.44252 *lens_ipow(dy, 5) + 0.000710586 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -1.12101e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + 0.336092 *dy*lens_ipow(lambda, 5) + -0.276547 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.100575 *y*lens_ipow(dy, 4)*lambda + -4.97097e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + 0.504534 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx40 =  + -0.000192246 *dx + -0.00628104 *dx*lens_ipow(dy, 2) + -0.00360662 *lens_ipow(dx, 3) + -2.42273e-08 *x*lens_ipow(y, 2) + -3.84871e-08 *lens_ipow(x, 3) + -0.0211013 *lens_ipow(dx, 5) + -3.55705e-07 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -4.15094e-09 *x*lens_ipow(y, 3)*dy + 0.174744 *y*lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx41 =  + -0.000132078 *dy + -0.00587508 *lens_ipow(dy, 3) + -0.00576358 *lens_ipow(dx, 2)*dy + -3.88087e-08 *lens_ipow(y, 3) + -2.42273e-08 *lens_ipow(x, 2)*y + -3.55705e-07 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -6.22641e-09 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -0.0664344 *lens_ipow(dy, 7) + -0.00941895 *y*lens_ipow(dx, 8) + -1.00972 *lens_ipow(dx, 8)*dy*lambda + 0.174744 *x*lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx42 =  + -0.000192246 *x + -2.36386 *dx*lens_ipow(dy, 2) + -2.24027 *lens_ipow(dx, 3) + -0.0115272 *y*dx*dy + -0.00628104 *x*lens_ipow(dy, 2) + -0.0108199 *x*lens_ipow(dx, 2) + -0.105506 *x*lens_ipow(dx, 4) + -138.079 *lens_ipow(dx, 3)*lens_ipow(dy, 4) + -39.2164 *lens_ipow(dx, 7) + -0.0376758 *lens_ipow(y, 2)*lens_ipow(dx, 7) + -275.244 *dx*lens_ipow(dy, 8)*lambda + -1068.58 *lens_ipow(dx, 7)*lens_ipow(dy, 2)*lambda + -8.07772 *y*lens_ipow(dx, 7)*dy*lambda + 0.524232 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx43 =  + -0.000132078 *y + -2.22365 *lens_ipow(dy, 3) + -2.36386 *lens_ipow(dx, 2)*dy + -0.0176252 *y*lens_ipow(dy, 2) + -0.00576358 *y*lens_ipow(dx, 2) + -0.0125621 *x*dx*dy + -3.55705e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -2.07547e-09 *lens_ipow(x, 2)*lens_ipow(y, 3) + -42.7824 *lens_ipow(dy, 7) + -138.079 *lens_ipow(dx, 4)*lens_ipow(dy, 3) + -0.465041 *y*lens_ipow(dy, 6) + -1100.98 *lens_ipow(dx, 2)*lens_ipow(dy, 7)*lambda + -267.146 *lens_ipow(dx, 8)*dy*lambda + -1.00972 *y*lens_ipow(dx, 8)*lambda + 0.873721 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx44 =  + 0.498661  + -1.37963 *lambda + 1.00729 *lens_ipow(lambda, 2) + -137.622 *lens_ipow(dx, 2)*lens_ipow(dy, 8) + -133.573 *lens_ipow(dx, 8)*lens_ipow(dy, 2) + -1.00972 *y*lens_ipow(dx, 8)*dy + 0.174744 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 5)+0.0f;
} break;
