case zeiss__biotar__1927__85mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 51.713 *begin_dx + 0.441284 *begin_x + 10.2785 *begin_dx*begin_lambda + 0.148614 *begin_x*begin_lambda + -7.01106 *begin_dx*lens_ipow(begin_lambda, 2) + -32.9667 *begin_dx*lens_ipow(begin_dy, 2) + -32.7629 *lens_ipow(begin_dx, 3) + -0.000840311 *lens_ipow(begin_y, 2)*begin_dx + -0.101817 *begin_x*lens_ipow(begin_lambda, 2) + -0.20401 *begin_x*lens_ipow(begin_dy, 2) + -0.416408 *begin_x*lens_ipow(begin_dx, 2) + -8.56721e-05 *begin_x*lens_ipow(begin_y, 2) + -0.00289033 *lens_ipow(begin_x, 2)*begin_dx + -7.85774e-05 *lens_ipow(begin_x, 3) + -0.0128199 *begin_x*begin_y*begin_dy*begin_lambda + -4.44835 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + 0.0114289 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.0300798 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 0.000178463 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.00021845 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + -5.29765e-06 *lens_ipow(begin_x, 4)*begin_dx + 10.8821 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + 0.025116 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 3) + -7.37927 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + 3.51607 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 9.08072e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -0.0290931 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 6) + -1.46712e-15 *lens_ipow(begin_x, 9)*lens_ipow(begin_y, 2);
  pred_y =  + 51.7129 *begin_dy + 0.44183 *begin_y + 10.2789 *begin_dy*begin_lambda + 0.148753 *begin_y*begin_lambda + -7.01485 *begin_dy*lens_ipow(begin_lambda, 2) + -32.8227 *lens_ipow(begin_dy, 3) + -33.0125 *lens_ipow(begin_dx, 2)*begin_dy + -0.102029 *begin_y*lens_ipow(begin_lambda, 2) + -0.460732 *begin_y*lens_ipow(begin_dy, 2) + -0.232539 *begin_y*lens_ipow(begin_dx, 2) + -0.00372251 *lens_ipow(begin_y, 2)*begin_dy + -7.9245e-05 *lens_ipow(begin_y, 3) + -0.227084 *begin_x*begin_dx*begin_dy + -0.0032596 *begin_x*begin_y*begin_dx + -0.000706094 *lens_ipow(begin_x, 2)*begin_dy + -8.09562e-05 *lens_ipow(begin_x, 2)*begin_y + 0.360857 *begin_y*lens_ipow(begin_dy, 4) + 0.557035 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.181487 *begin_y*lens_ipow(begin_dx, 4) + 0.013793 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + -2.76262e-06 *lens_ipow(begin_y, 4)*begin_dy + 0.0292298 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -3.11841e-06 *begin_x*lens_ipow(begin_y, 3)*begin_dx + 0.0145691 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + 0.000153341 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + 0.00019357 *lens_ipow(begin_x, 3)*begin_dx*begin_dy + -1.15312e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy + -2.68142e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5);
  pred_dx =  + 0.466723 *begin_dx + -0.0152564 *begin_x + 0.00382526 *begin_x*begin_lambda + -0.212245 *begin_dx*lens_ipow(begin_dy, 2) + -0.202676 *lens_ipow(begin_dx, 3) + -0.00846621 *begin_y*begin_dx*begin_dy + -0.00253311 *begin_x*lens_ipow(begin_lambda, 2) + -0.00564783 *begin_x*lens_ipow(begin_dy, 2) + -0.00991514 *begin_x*lens_ipow(begin_dx, 2) + -5.56178e-05 *begin_x*begin_y*begin_dy + -3.48935e-06 *begin_x*lens_ipow(begin_y, 2) + -3.47935e-06 *lens_ipow(begin_x, 3) + -0.32708 *begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -0.33638 *lens_ipow(begin_dx, 3)*begin_lambda + -0.000107629 *lens_ipow(begin_y, 2)*begin_dx*begin_lambda + -0.0131278 *begin_x*lens_ipow(begin_dx, 2)*begin_lambda + 1.0247 *begin_dx*lens_ipow(begin_dy, 4) + 2.16479 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 1.07072 *lens_ipow(begin_dx, 5) + -0.0084067 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -0.000867114 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 2) + 0.000257472 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 0.00082837 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 3) + -1.74716e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -7.88764e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_lambda + -1.17317e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx*begin_lambda + -7.35271e-07 *lens_ipow(begin_x, 3)*begin_y*begin_dy*lens_ipow(begin_lambda, 4) + -1.07866e-16 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 4);
  pred_dy =  + 0.466055 *begin_dy + -0.0153095 *begin_y + 0.00397262 *begin_y*begin_lambda + -0.169718 *lens_ipow(begin_dx, 2)*begin_dy + -0.00258722 *begin_y*lens_ipow(begin_lambda, 2) + -0.0137699 *begin_y*lens_ipow(begin_dy, 2) + -0.00370832 *begin_y*lens_ipow(begin_dx, 2) + -3.5391e-06 *lens_ipow(begin_y, 3) + -0.00531222 *begin_x*begin_dx*begin_dy + -3.41582e-06 *lens_ipow(begin_x, 2)*begin_y + -0.779461 *lens_ipow(begin_dy, 3)*begin_lambda + -0.406725 *lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + -0.00460011 *begin_y*lens_ipow(begin_dx, 2)*begin_lambda + -0.000255953 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + -0.0109484 *begin_x*begin_dx*begin_dy*begin_lambda + -0.00012923 *begin_x*begin_y*begin_dx*begin_lambda + -0.000110395 *lens_ipow(begin_x, 2)*begin_dy*begin_lambda + 2.20486 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 1.09732 *lens_ipow(begin_dx, 4)*begin_dy + 2.44252 *lens_ipow(begin_dy, 5)*begin_lambda + 0.000710586 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3)*begin_lambda + -1.12101e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 0.0560153 *begin_dy*lens_ipow(begin_lambda, 6) + -0.0691368 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 0.0502876 *begin_y*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + -4.97097e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy*begin_lambda + 0.084089 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + -3.30864e-14 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5);
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 51.713  + 10.2785 *begin_lambda + -7.01106 *lens_ipow(begin_lambda, 2) + -32.9667 *lens_ipow(begin_dy, 2) + -98.2887 *lens_ipow(begin_dx, 2) + -0.000840311 *lens_ipow(begin_y, 2) + -0.832817 *begin_x*begin_dx + -0.00289033 *lens_ipow(begin_x, 2) + -4.44835 *begin_y*begin_dy*lens_ipow(begin_lambda, 2) + 0.0114289 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.0601595 *begin_x*begin_y*begin_dx*begin_dy + 0.000356926 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -0.0004369 *lens_ipow(begin_x, 3)*begin_dx + -5.29765e-06 *lens_ipow(begin_x, 4) + 10.8821 *begin_y*begin_dy*lens_ipow(begin_lambda, 3) + -7.37927 *begin_y*begin_dy*lens_ipow(begin_lambda, 4) + 7.03213 *begin_x*begin_dx*lens_ipow(begin_dy, 4) + 9.08072e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy+0.0f;
  dx1_domega0(0, 1) =  + -65.9335 *begin_dx*begin_dy + -0.40802 *begin_x*begin_dy + -0.0128199 *begin_x*begin_y*begin_lambda + -4.44835 *begin_y*begin_dx*lens_ipow(begin_lambda, 2) + 0.0228579 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.0300798 *begin_x*begin_y*lens_ipow(begin_dx, 2) + 10.8821 *begin_y*begin_dx*lens_ipow(begin_lambda, 3) + 0.025116 *begin_x*begin_y*lens_ipow(begin_lambda, 3) + -7.37927 *begin_y*begin_dx*lens_ipow(begin_lambda, 4) + 14.0643 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 9.08072e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx + -0.0290931 *begin_x*begin_y*lens_ipow(begin_lambda, 6)+0.0f;
  dx1_domega0(1, 0) =  + -66.025 *begin_dx*begin_dy + -0.465078 *begin_y*begin_dx + -0.227084 *begin_x*begin_dy + -0.0032596 *begin_x*begin_y + 1.11407 *begin_y*begin_dx*lens_ipow(begin_dy, 2) + 0.725949 *begin_y*lens_ipow(begin_dx, 3) + 0.0292298 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -3.11841e-06 *begin_x*lens_ipow(begin_y, 3) + 0.0291382 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + 0.00019357 *lens_ipow(begin_x, 3)*begin_dy+0.0f;
  dx1_domega0(1, 1) =  + 51.7129  + 10.2789 *begin_lambda + -7.01485 *lens_ipow(begin_lambda, 2) + -98.4682 *lens_ipow(begin_dy, 2) + -33.0125 *lens_ipow(begin_dx, 2) + -0.921463 *begin_y*begin_dy + -0.00372251 *lens_ipow(begin_y, 2) + -0.227084 *begin_x*begin_dx + -0.000706094 *lens_ipow(begin_x, 2) + 1.44343 *begin_y*lens_ipow(begin_dy, 3) + 1.11407 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 0.0413791 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -2.76262e-06 *lens_ipow(begin_y, 4) + 0.0584596 *begin_x*begin_y*begin_dx*begin_dy + 0.0145691 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 0.000306681 *lens_ipow(begin_x, 2)*begin_y*begin_dy + 0.00019357 *lens_ipow(begin_x, 3)*begin_dx + -1.15312e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
