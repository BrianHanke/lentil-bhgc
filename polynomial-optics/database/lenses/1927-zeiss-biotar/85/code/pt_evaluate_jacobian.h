case zeiss__biotar__1927__85mm:
{
const double dx00 =  + 0.151067  + 0.19879 *lambda + -0.131763 *lens_ipow(lambda, 2) + 0.737916 *lens_ipow(dy, 2) + 0.743442 *lens_ipow(dx, 2) + 0.0180242 *y*dy + 0.0316048 *x*dx + 4.61444 *lens_ipow(dx, 4) + 0.0739513 *y*lens_ipow(dx, 2)*dy + -1.82448e-05 *lens_ipow(y, 3)*dy + -1.56349e-07 *lens_ipow(y, 4) + 0.410512 *x*lens_ipow(dx, 3) + -5.35927e-05 *x*lens_ipow(y, 2)*dx + 0.00802547 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -5.98475e-05 *lens_ipow(x, 2)*y*dy + -1.38654e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.20362e-06 *lens_ipow(x, 4) + 0.100587 *y*lens_ipow(dy, 5) + 0.527359 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.598413 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx01 =  + 0.487389 *dx*dy + 0.0127065 *y*dx + 0.0180242 *x*dy + 0.0484206 *y*dx*lens_ipow(dy, 2) + 0.0739513 *x*lens_ipow(dx, 2)*dy + -5.47343e-05 *x*lens_ipow(y, 2)*dy + -6.25397e-07 *x*lens_ipow(y, 3) + -5.35927e-05 *lens_ipow(x, 2)*y*dx + -1.99492e-05 *lens_ipow(x, 3)*dy + -9.2436e-07 *lens_ipow(x, 3)*y + 0.100587 *x*lens_ipow(dy, 5)+0.0f;
const double dx02 =  + 84.4101  + 1.20989 *lambda + -32.8839 *lens_ipow(dy, 2) + -124.936 *lens_ipow(dx, 2) + 0.487389 *y*dy + 0.00635323 *lens_ipow(y, 2) + 1.48688 *x*dx + 0.0158024 *lens_ipow(x, 2) + 265.143 *lens_ipow(dx, 4) + 0.0242103 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 18.4578 *x*lens_ipow(dx, 3) + 0.147903 *x*y*dx*dy + 0.615768 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -2.67964e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00535031 *lens_ipow(x, 3)*dx + 0.263679 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.299207 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx03 =  + -65.7677 *dx*dy + 0.487389 *y*dx + 1.47583 *x*dy + 0.0180242 *x*y + 0.0484206 *lens_ipow(y, 2)*dx*dy + 0.0739513 *x*y*lens_ipow(dx, 2) + -1.82448e-05 *x*lens_ipow(y, 3) + -1.99492e-05 *lens_ipow(x, 3)*y + 0.502937 *x*y*lens_ipow(dy, 4) + 0.527359 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 2) + -0.598413 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 3)+0.0f;
const double dx04 =  + 1.20989 *dx + 0.19879 *x + -0.263525 *x*lambda + 0.527359 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lambda + -0.89762 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx10 =  + 0.502996 *dx*dy + 0.0165435 *y*dx + 0.0127809 *x*dy + 0.0764659 *y*dx*lens_ipow(dy, 2) + 0.0335998 *y*lens_ipow(dx, 3) + -2.06717e-05 *lens_ipow(y, 3)*dx + 0.0556742 *x*lens_ipow(dx, 2)*dy + 0.00104413 *x*y*lens_ipow(dx, 2) + -5.47073e-05 *x*lens_ipow(y, 2)*dy + -9.69925e-07 *x*lens_ipow(y, 3) + -3.65252e-05 *lens_ipow(x, 2)*y*dx + -6.35321e-07 *lens_ipow(x, 3)*y+0.0f;
const double dx11 =  + 0.189842  + 0.0536881 *lambda + 0.758543 *lens_ipow(dy, 2) + 0.0320771 *y*dy + 0.0165435 *x*dx + 2.7547 *lens_ipow(dx, 2)*lambda + 4.48828 *lens_ipow(dy, 4) + -2.53308 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.403363 *y*lens_ipow(dy, 3) + 0.0554164 *y*lens_ipow(dx, 2)*dy + 0.00789535 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.17423e-06 *lens_ipow(y, 4) + 0.0764659 *x*dx*lens_ipow(dy, 2) + 0.0335998 *x*lens_ipow(dx, 3) + -6.20152e-05 *x*lens_ipow(y, 2)*dx + 0.000522063 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -5.47073e-05 *lens_ipow(x, 2)*y*dy + -1.45489e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.21751e-05 *lens_ipow(x, 3)*dx + -1.5883e-07 *lens_ipow(x, 4)+0.0f;
const double dx12 =  + -65.8632 *dx*dy + 0.502996 *x*dy + 0.0165435 *x*y + 5.50939 *y*dx*lambda + -5.06615 *y*dx*lens_ipow(lambda, 2) + 0.0554164 *lens_ipow(y, 2)*dx*dy + 0.0764659 *x*y*lens_ipow(dy, 2) + 0.100799 *x*y*lens_ipow(dx, 2) + -2.06717e-05 *x*lens_ipow(y, 3) + 0.0556742 *lens_ipow(x, 2)*dx*dy + 0.00104413 *lens_ipow(x, 2)*y*dx + -1.21751e-05 *lens_ipow(x, 3)*y+0.0f;
const double dx13 =  + 84.4159  + 1.1865 *lambda + -124.251 *lens_ipow(dy, 2) + -32.9316 *lens_ipow(dx, 2) + 1.51709 *y*dy + 0.0160385 *lens_ipow(y, 2) + 0.502996 *x*dx + 0.00639045 *lens_ipow(x, 2) + 258.705 *lens_ipow(dy, 4) + 17.9531 *y*lens_ipow(dy, 3) + 0.605044 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0277082 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00526357 *lens_ipow(y, 3)*dy + 0.152932 *x*y*dx*dy + 0.0278371 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -2.73537e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)+0.0f;
const double dx14 =  + 1.1865 *dy + 0.0536881 *y + 2.7547 *y*lens_ipow(dx, 2) + -5.06615 *y*lens_ipow(dx, 2)*lambda+0.0f;
const double dx20 =  + -0.0141689  + -0.00219212 *lambda + 0.00153435 *lens_ipow(lambda, 2) + -0.0116307 *lens_ipow(dy, 2) + -0.00334245 *lens_ipow(dx, 2) + -0.000144243 *y*dy + 1.94085e-06 *lens_ipow(y, 2) + -6.49579e-05 *x*dx + 6.08475e-06 *lens_ipow(x, 2) + -0.000522503 *y*lens_ipow(dy, 3) + -0.00104484 *y*lens_ipow(dx, 2)*dy + -7.0357e-06 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000872865 *x*dx*lens_ipow(dy, 2) + 4.35744e-07 *lens_ipow(x, 2)*y*dy + -0.042061 *lens_ipow(dx, 4)*lambda + -0.0033137 *x*lens_ipow(dx, 3)*lambda + 2.801e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 4.96966e-11 *lens_ipow(x, 4)*lens_ipow(y, 2) + -2.20317e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx21 =  + -0.00977878 *dx*dy + 3.42724e-05 *y*dx + -0.000144243 *x*dy + 3.88171e-06 *x*y + -0.000942642 *y*dx*lens_ipow(dy, 2) + -0.000522503 *x*lens_ipow(dy, 3) + -0.00104484 *x*lens_ipow(dx, 2)*dy + -1.40714e-05 *x*y*lens_ipow(dy, 2) + 1.45248e-07 *lens_ipow(x, 3)*dy + 1.4005e-09 *lens_ipow(x, 4)*y*dx + 1.98786e-11 *lens_ipow(x, 5)*y+0.0f;
const double dx22 =  + -1.19337  + -0.31858 *lens_ipow(dy, 2) + 1.63197 *lens_ipow(dx, 2) + -0.00977878 *y*dy + 1.71362e-05 *lens_ipow(y, 2) + -0.0066849 *x*dx + -3.2479e-05 *lens_ipow(x, 2) + -0.000471321 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00208968 *x*y*dx*dy + -0.000436432 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.168244 *x*lens_ipow(dx, 3)*lambda + -0.00497055 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 4.71748 *lens_ipow(dy, 6) + 40.9258 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 45.8338 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 7.0025e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + -8.81266e-08 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + -0.63716 *dx*dy + -0.00977878 *y*dx + -0.0232613 *x*dy + -0.000144243 *x*y + -0.000942642 *lens_ipow(y, 2)*dx*dy + -0.00156751 *x*y*lens_ipow(dy, 2) + -0.00104484 *x*y*lens_ipow(dx, 2) + -1.40714e-05 *x*lens_ipow(y, 2)*dy + -0.000872865 *lens_ipow(x, 2)*dx*dy + 1.45248e-07 *lens_ipow(x, 3)*y + 28.3049 *dx*lens_ipow(dy, 5) + 54.5677 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 18.3335 *lens_ipow(dx, 5)*dy+0.0f;
const double dx24 =  + -0.00219212 *x + 0.0030687 *x*lambda + -0.042061 *x*lens_ipow(dx, 4) + -0.00165685 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -8.81266e-08 *lens_ipow(x, 5)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx30 =  + 0.0183511 *dx*dy + -5.42478e-05 *y*dx + 0.000172682 *x*dy + 4.50823e-06 *x*y + -0.000446908 *y*dx*lens_ipow(dy, 2) + 0.00727902 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 8.10437e-10 *x*lens_ipow(y, 4)*dy + 1.10536e-13 *lens_ipow(x, 3)*lens_ipow(y, 5) + 4.69203e-07 *lens_ipow(x, 4)*dx*lens_ipow(dy, 3) + 5.25744e-12 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx+0.0f;
const double dx31 =  + -0.0142452  + -0.00207664 *lambda + 0.0013948 *lens_ipow(lambda, 2) + -0.00123975 *lens_ipow(dy, 2) + -0.00591907 *lens_ipow(dx, 2) + -4.35548e-05 *y*dy + 6.83272e-06 *lens_ipow(y, 2) + -5.42478e-05 *x*dx + 2.25411e-06 *lens_ipow(x, 2) + -0.031619 *lens_ipow(dy, 4) + 0.00664437 *lens_ipow(dx, 4) + -0.00222795 *y*lens_ipow(dy, 3) + -0.000413132 *y*lens_ipow(dx, 2)*dy + -2.66785e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.26774e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.000446908 *x*dx*lens_ipow(dy, 2) + 1.62087e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 1.38169e-13 *lens_ipow(x, 4)*lens_ipow(y, 4) + 3.15446e-12 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx+0.0f;
const double dx32 =  + 2.76636 *dx*dy + -0.0118381 *y*dx + 0.0183511 *x*dy + -5.42478e-05 *x*y + -1.75472 *lens_ipow(dx, 3)*dy + 0.0265775 *y*lens_ipow(dx, 3) + -0.000413132 *lens_ipow(y, 2)*dx*dy + -8.4516e-06 *lens_ipow(y, 3)*dx + -0.000446908 *x*y*lens_ipow(dy, 2) + 0.00727902 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3) + 9.38405e-08 *lens_ipow(x, 5)*lens_ipow(dy, 3) + 1.05149e-12 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx33 =  + -1.19119  + -0.00620803 *lambda + 1.68613 *lens_ipow(dy, 2) + 1.38318 *lens_ipow(dx, 2) + -0.00247949 *y*dy + -2.17774e-05 *lens_ipow(y, 2) + 0.0183511 *x*dx + 8.63408e-05 *lens_ipow(x, 2) + -0.43868 *lens_ipow(dx, 4) + -0.126476 *y*lens_ipow(dy, 3) + -0.00334192 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000206566 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.77857e-05 *lens_ipow(y, 3)*dy + -0.000893815 *x*y*dx*dy + 0.0109185 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 4.05218e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 2.81522e-07 *lens_ipow(x, 5)*dx*lens_ipow(dy, 2)+0.0f;
const double dx34 =  + -0.00620803 *dy + -0.00207664 *y + 0.00278961 *y*lambda+0.0f;
const double dx40 =  + 0.000889958 *dx + -0.0439537 *dx*lens_ipow(dy, 2) + -0.0479772 *lens_ipow(dx, 3) + -0.00121497 *y*dx*dy + -8.23227e-06 *lens_ipow(y, 2)*dx + -0.000598702 *x*lens_ipow(dy, 2) + -0.00186149 *x*lens_ipow(dx, 2) + -1.64228e-05 *x*y*dy + -2.66788e-05 *lens_ipow(x, 2)*dx + 0.0240582 *lens_ipow(dx, 5) + -4.0675e-10 *x*lens_ipow(y, 4) + -4.23071e-10 *lens_ipow(x, 5)+0.0f;
const double dx41 =  + 0.000767805 *dy + -0.0443759 *lens_ipow(dy, 3) + -0.043916 *lens_ipow(dx, 2)*dy + -0.00188249 *y*lens_ipow(dy, 2) + -0.00059981 *y*lens_ipow(dx, 2) + -2.64964e-05 *lens_ipow(y, 2)*dy + -4.23904e-08 *lens_ipow(y, 3) + -0.00121497 *x*dx*dy + -1.64645e-05 *x*y*dx + -8.21141e-06 *lens_ipow(x, 2)*dy + -8.135e-10 *lens_ipow(x, 2)*lens_ipow(y, 3)+0.0f;
const double dx42 =  + 0.0689765 *dx + 0.000889958 *x + -4.70411 *dx*lens_ipow(dy, 2) + -4.52932 *lens_ipow(dx, 3) + -0.087832 *y*dx*dy + -0.00059981 *lens_ipow(y, 2)*dx + -0.0439537 *x*lens_ipow(dy, 2) + -0.143932 *x*lens_ipow(dx, 2) + -0.00121497 *x*y*dy + -8.23227e-06 *x*lens_ipow(y, 2) + -0.00186149 *lens_ipow(x, 2)*dx + -8.89294e-06 *lens_ipow(x, 3) + 0.120291 *x*lens_ipow(dx, 4)+0.0f;
const double dx43 =  + 0.0809327 *dy + 0.000767805 *y + -4.73839 *lens_ipow(dy, 3) + -4.70411 *lens_ipow(dx, 2)*dy + -0.133128 *y*lens_ipow(dy, 2) + -0.043916 *y*lens_ipow(dx, 2) + -0.00188249 *lens_ipow(y, 2)*dy + -8.83212e-06 *lens_ipow(y, 3) + -0.0879074 *x*dx*dy + -0.00121497 *x*y*dx + -0.000598702 *lens_ipow(x, 2)*dy + -8.21141e-06 *lens_ipow(x, 2)*y+0.0f;
const double dx44 =  + 0.695847  + -1.92 *lambda + 1.39947 *lens_ipow(lambda, 2)+0.0f;
} break;
