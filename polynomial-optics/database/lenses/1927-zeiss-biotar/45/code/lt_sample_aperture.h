case zeiss__biotar__1927__45mm:
{
//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
Eigen::Vector3d view(
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
);
raytrace_normalise(view);
int error = 0;
if(1 || view(2) >= lens_field_of_view)
{
  const double eps = 1e-8;
  double sqr_err = 1e30, sqr_ap_err = 1e30;
  double prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const double begin_x = x;
    const double begin_y = y;
    const double begin_dx = dx;
    const double begin_dy = dy;
    const double begin_lambda = lambda;
    const Eigen::Vector2d pred_ap(
       + 28.6047 *begin_dx + 0.467239 *begin_x + 1.14365 *begin_dx*begin_lambda + 0.0371139 *begin_x*begin_lambda + -17.5745 *begin_dx*lens_ipow(begin_dy, 2) + -17.5355 *lens_ipow(begin_dx, 3) + -0.194251 *begin_x*lens_ipow(begin_dy, 2) + -0.406714 *begin_x*lens_ipow(begin_dx, 2) + -0.000173671 *begin_x*lens_ipow(begin_y, 2) + -0.00715064 *lens_ipow(begin_x, 2)*begin_dx + -0.000179487 *lens_ipow(begin_x, 3) + -0.335571 *begin_y*begin_dx*begin_dy*begin_lambda + -0.00775566 *begin_x*begin_y*begin_dy*begin_lambda + 0.0210202 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.0518338 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -2.86047e-05 *begin_x*lens_ipow(begin_y, 3)*begin_dy + -8.8463e-07 *begin_x*lens_ipow(begin_y, 4) + -4.24333e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + -2.6356e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dy + -1.50714e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -8.0149e-07 *lens_ipow(begin_x, 5) + -1.63866e-05 *lens_ipow(begin_y, 4)*begin_dx*begin_lambda + 0.0369267 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*begin_lambda + -0.0348545 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -2.76212e-07 *lens_ipow(begin_x, 6)*begin_dx*begin_lambda + 0.105319 *begin_x*begin_y*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 6) + -2.34493e-14 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 4) + 6.95643e-10 *lens_ipow(begin_x, 8)*begin_dx*lens_ipow(begin_lambda, 2),
       + 28.4706 *begin_dy + 0.467672 *begin_y + 1.23103 *begin_dy*begin_lambda + 0.0416275 *begin_y*begin_lambda + -16.8339 *lens_ipow(begin_dy, 3) + -15.35 *lens_ipow(begin_dx, 2)*begin_dy + -0.419807 *begin_y*lens_ipow(begin_dy, 2) + -0.00642829 *lens_ipow(begin_y, 2)*begin_dy + -0.000269039 *lens_ipow(begin_y, 3) + -0.000196919 *lens_ipow(begin_x, 2)*begin_y + -0.341036 *begin_y*lens_ipow(begin_dx, 2)*begin_lambda + -0.302272 *begin_x*begin_dx*begin_dy*begin_lambda + -0.00744506 *begin_x*begin_y*begin_dx*begin_lambda + 0.0401756 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -2.54482e-05 *begin_x*lens_ipow(begin_y, 3)*begin_dx + -4.26211e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy + -1.40259e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -6.36972e-07 *lens_ipow(begin_x, 4)*begin_y + -3.36196e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dx*begin_lambda + -0.00111466 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -2.14855e-09 *lens_ipow(begin_y, 7) + -14.415 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + -0.000106831 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 3) + -2.86041e-07 *lens_ipow(begin_y, 6)*begin_dy*begin_lambda + -1131.33 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + -2.59299e-08 *lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -3.16998e-14 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 7) + -6.77921e-08 *lens_ipow(begin_x, 6)*begin_y*lens_ipow(begin_dy, 4)
    );
    const Eigen::Vector2d delta_ap(ap_x - pred_ap[0], ap_y - pred_ap[1]);
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    Eigen::Matrix2d dx1_domega0;
    dx1_domega0(0, 0) =  + 28.6047  + 1.14365 *begin_lambda + -17.5745 *lens_ipow(begin_dy, 2) + -52.6066 *lens_ipow(begin_dx, 2) + -0.813427 *begin_x*begin_dx + -0.00715064 *lens_ipow(begin_x, 2) + -0.335571 *begin_y*begin_dy*begin_lambda + 0.0210202 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.103668 *begin_x*begin_y*begin_dx*begin_dy + -4.24333e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -1.63866e-05 *lens_ipow(begin_y, 4)*begin_lambda + 0.11078 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_lambda + -0.174272 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -2.76212e-07 *lens_ipow(begin_x, 6)*begin_lambda + 6.95643e-10 *lens_ipow(begin_x, 8)*lens_ipow(begin_lambda, 2)+0.0f;
    dx1_domega0(0, 1) =  + -35.1491 *begin_dx*begin_dy + -0.388502 *begin_x*begin_dy + -0.335571 *begin_y*begin_dx*begin_lambda + -0.00775566 *begin_x*begin_y*begin_lambda + 0.0420404 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.0518338 *begin_x*begin_y*lens_ipow(begin_dx, 2) + -2.86047e-05 *begin_x*lens_ipow(begin_y, 3) + -2.6356e-05 *lens_ipow(begin_x, 3)*begin_y + 0.315958 *begin_x*begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6)+0.0f;
    dx1_domega0(1, 0) =  + -30.7001 *begin_dx*begin_dy + -0.682071 *begin_y*begin_dx*begin_lambda + -0.302272 *begin_x*begin_dy*begin_lambda + -0.00744506 *begin_x*begin_y*begin_lambda + 0.0401756 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -2.54482e-05 *begin_x*lens_ipow(begin_y, 3) + -3.36196e-05 *lens_ipow(begin_x, 3)*begin_y*begin_lambda + -43.245 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -4525.31 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2)+0.0f;
    dx1_domega0(1, 1) =  + 28.4706  + 1.23103 *begin_lambda + -50.5016 *lens_ipow(begin_dy, 2) + -15.35 *lens_ipow(begin_dx, 2) + -0.839615 *begin_y*begin_dy + -0.00642829 *lens_ipow(begin_y, 2) + -0.302272 *begin_x*begin_dx*begin_lambda + 0.0803511 *begin_x*begin_y*begin_dx*begin_dy + -4.26211e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -0.00222931 *lens_ipow(begin_y, 3)*begin_dy*lens_ipow(begin_lambda, 2) + -43.245 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -0.000320494 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 2) + -2.86041e-07 *lens_ipow(begin_y, 6)*begin_lambda + -3393.98 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -5.18598e-08 *lens_ipow(begin_y, 7)*begin_dy*lens_ipow(begin_lambda, 2) + -2.71168e-07 *lens_ipow(begin_x, 6)*begin_y*lens_ipow(begin_dy, 3)+0.0f;
    Eigen::Matrix2d invApJ = dx1_domega0.inverse().eval();
    Eigen::Vector2d solution_dir = invApJ * delta_ap;
    dx += solution_dir(0);
    dy += solution_dir(1);
    out(0) =  + 44.888 *begin_dx + 0.175085 *begin_x + 0.0749963 *begin_x*begin_lambda + -17.4403 *begin_dx*lens_ipow(begin_dy, 2) + -17.2603 *lens_ipow(begin_dx, 3) + 0.744652 *begin_x*lens_ipow(begin_dy, 2) + 0.032012 *begin_x*begin_y*begin_dy + 0.0409789 *lens_ipow(begin_x, 2)*begin_dx + 0.841872 *begin_y*begin_dx*begin_dy*begin_lambda + 0.0227466 *lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 5.14921 *begin_x*lens_ipow(begin_dx, 2)*begin_lambda + -5.49513 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + 0.0325736 *begin_x*begin_y*lens_ipow(begin_dy, 3) + -0.000118146 *begin_x*lens_ipow(begin_y, 3)*begin_dy + -2.52609e-06 *begin_x*lens_ipow(begin_y, 4) + 0.0381298 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + -0.000118812 *lens_ipow(begin_x, 3)*begin_y*begin_dy + -5.05733e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -0.000101332 *lens_ipow(begin_x, 4)*begin_dx + -2.42526e-06 *lens_ipow(begin_x, 5) + 0.0997362 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -3.85654e-05 *lens_ipow(begin_y, 4)*begin_dx*begin_lambda + 0.248127 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + 0.325284 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*begin_lambda + -0.000308626 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 0.00503558 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*begin_lambda + 17.3921 *begin_x*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 5) + 2.02642e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_lambda, 2);
    out(1) =  + 44.8341 *begin_dy + 0.1763 *begin_y + 0.073774 *begin_y*begin_lambda + -17.0214 *lens_ipow(begin_dy, 3) + -15.2345 *lens_ipow(begin_dx, 2)*begin_dy + 0.52584 *begin_x*begin_dx*begin_dy + 0.0327674 *begin_x*begin_y*begin_dx + 0.013757 *lens_ipow(begin_x, 2)*begin_dy + 4.88477 *begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 2.7897 *begin_y*lens_ipow(begin_dx, 2)*begin_lambda + 0.118511 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + -4.72977 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -2.58274 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + 0.0879407 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + -2.49026e-06 *lens_ipow(begin_y, 5) + 0.140509 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.000132632 *begin_x*lens_ipow(begin_y, 3)*begin_dx + -5.63105e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -0.116976 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 3) + -0.000351679 *lens_ipow(begin_y, 4)*begin_dy*begin_lambda + -0.000517866 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 0.319544 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*begin_dy + 0.000402832 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 2) + 0.000238521 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*begin_dy + -4.22398e-07 *lens_ipow(begin_x, 5)*begin_y*begin_dx + -1.02277e-07 *lens_ipow(begin_x, 6)*begin_dy + -9.47748e-09 *lens_ipow(begin_x, 6)*begin_y + 0.000314447 *lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 3);
    out(2) =  + -1.19937 *begin_dx + -0.0278216 *begin_x + -0.00103274 *begin_x*begin_lambda + 0.600296 *lens_ipow(begin_dx, 3) + -0.0158406 *begin_y*begin_dx*begin_dy + 0.000109244 *lens_ipow(begin_y, 2)*begin_dx + -0.000402087 *begin_x*begin_y*begin_dy + 1.67848e-05 *begin_x*lens_ipow(begin_y, 2) + 1.64853e-05 *lens_ipow(begin_x, 3) + -0.316844 *begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -0.0723167 *begin_x*lens_ipow(begin_dy, 2)*begin_lambda + -0.00134818 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.0645981 *begin_x*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.00385923 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -4.51311e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.000743949 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + -0.112404 *begin_x*lens_ipow(begin_dx, 4)*begin_lambda + -0.0089563 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*begin_lambda + -0.000179108 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*begin_lambda + 4.03396e-09 *lens_ipow(begin_x, 5)*begin_y*begin_dy + 1.99157e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + 4.97113e-11 *lens_ipow(begin_x, 7) + -2.74625e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda + 2.11325e-11 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*begin_dx + 256.409 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 4)*begin_lambda + 4.61452e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5)*begin_dy*begin_lambda + 2.32134e-15 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 8) + 1.91328e-15 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 4);
    out(3) =  + -1.19703 *begin_dy + -0.0284469 *begin_y + 0.599775 *lens_ipow(begin_dy, 3) + 1.33644 *lens_ipow(begin_dx, 2)*begin_dy + 2.31611e-05 *lens_ipow(begin_y, 3) + 0.0342269 *begin_x*begin_dx*begin_dy + -8.02169e-05 *begin_x*begin_y*begin_dx + 0.000310942 *lens_ipow(begin_x, 2)*begin_dy + 1.77211e-05 *lens_ipow(begin_x, 2)*begin_y + -0.0196635 *begin_y*lens_ipow(begin_dx, 2)*begin_lambda + -1.10657e-05 *lens_ipow(begin_y, 3)*begin_lambda + -4.32688e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -3.96943e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 2.10834e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -0.0054793 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3)*begin_lambda + 1.49096e-06 *lens_ipow(begin_y, 4)*begin_dy*begin_lambda + -0.00462768 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -7.25225e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + -0.135242 *begin_y*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + 0.061981 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 2) + -0.000514103 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 4) + 5.74473e-11 *lens_ipow(begin_y, 7) + 0.000103113 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -2.50154e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_lambda + 9.6939e-13 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + 1.22325e-11 *lens_ipow(begin_x, 7)*begin_y*begin_dx + 2.92267e-13 *lens_ipow(begin_x, 8)*begin_y + -3.42629e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx*begin_dy*begin_lambda;
    Eigen::Vector3d pred_out_cs_pos(0,0,0);
    Eigen::Vector3d pred_out_cs_dir(0,0,0);
    Eigen::Vector2d outpos(out(0), out(1));
    Eigen::Vector2d outdir(out(2), out(3));
    if (lens_outer_pupil_geometry == "cyl-y") cylinderToCs(outpos, outdir, pred_out_cs_pos, pred_out_cs_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius, true);
    else if (lens_outer_pupil_geometry == "cyl-x") cylinderToCs(outpos, outdir, pred_out_cs_pos, pred_out_cs_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius, false);
    else sphereToCs(outpos, outdir, pred_out_cs_pos, pred_out_cs_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    Eigen::Vector3d view(
      scene_x - pred_out_cs_pos(0),
      scene_y - pred_out_cs_pos(1),
      scene_z - pred_out_cs_pos(2)
    );
    raytrace_normalise(view);
    Eigen::VectorXd out_new(5); out_new.setZero();
    Eigen::Vector2d out_new_pos(0,0);
    Eigen::Vector2d out_new_dir(0,0);
    if (lens_outer_pupil_geometry == "cyl-y") csToCylinder(pred_out_cs_pos, view, out_new_pos, out_new_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius, true);
    else if (lens_outer_pupil_geometry == "cyl-x") csToCylinder(pred_out_cs_pos, view, out_new_pos, out_new_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius, false);
    else csToSphere(pred_out_cs_pos, view, out_new_pos, out_new_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    out_new(0) = out_new_pos(0);
    out_new(1) = out_new_pos(1);
    out_new(2) = out_new_dir(0);
    out_new(3) = out_new_dir(1);
    const Eigen::Vector2d delta_out(out_new[2] - out[2], out_new[3] - out[3]);
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    Eigen::Matrix2d domega2_dx0;
    domega2_dx0(0, 0) =  + -0.0278216  + -0.00103274 *begin_lambda + -0.000402087 *begin_y*begin_dy + 1.67848e-05 *lens_ipow(begin_y, 2) + 4.9456e-05 *lens_ipow(begin_x, 2) + -0.0723167 *lens_ipow(begin_dy, 2)*begin_lambda + 0.0645981 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.00385923 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -4.51311e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.0014879 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + -0.112404 *lens_ipow(begin_dx, 4)*begin_lambda + -0.0179126 *begin_x*lens_ipow(begin_dx, 3)*begin_lambda + -0.000537323 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_lambda + 2.01698e-08 *lens_ipow(begin_x, 4)*begin_y*begin_dy + 9.95783e-10 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + 3.47979e-10 *lens_ipow(begin_x, 6) + -5.4925e-07 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda + 1.26795e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_dx + 1.38436e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*begin_dy*begin_lambda + 6.96401e-15 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8) + 1.33929e-14 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 4)+0.0f;
    domega2_dx0(0, 1) =  + -0.0158406 *begin_dx*begin_dy + 0.000218487 *begin_y*begin_dx + -0.000402087 *begin_x*begin_dy + 3.35696e-05 *begin_x*begin_y + -0.00269636 *begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.00385923 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + -9.02622e-05 *begin_x*begin_y*lens_ipow(begin_dx, 2) + 4.03396e-09 *lens_ipow(begin_x, 5)*begin_dy + 3.98313e-10 *lens_ipow(begin_x, 5)*begin_y + -8.23875e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_dy*begin_lambda + 4.22649e-11 *lens_ipow(begin_x, 6)*begin_y*begin_dx + 2.30726e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dy*begin_lambda + 1.85707e-14 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 7) + 7.65311e-15 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 3)+0.0f;
    domega2_dx0(1, 0) =  + 0.0342269 *begin_dx*begin_dy + -8.02169e-05 *begin_y*begin_dx + 0.000621884 *begin_x*begin_dy + 3.54422e-05 *begin_x*begin_y + 4.21667e-08 *begin_x*lens_ipow(begin_y, 3) + -0.00462768 *begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -0.000145045 *begin_x*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + -5.00308e-07 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_lambda + 3.87756e-12 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5) + 8.56276e-11 *lens_ipow(begin_x, 6)*begin_y*begin_dx + 2.33813e-12 *lens_ipow(begin_x, 7)*begin_y + -1.02789e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx*begin_dy*begin_lambda+0.0f;
    domega2_dx0(1, 1) =  + -0.0284469  + 6.94832e-05 *lens_ipow(begin_y, 2) + -8.02169e-05 *begin_x*begin_dx + 1.77211e-05 *lens_ipow(begin_x, 2) + -0.0196635 *lens_ipow(begin_dx, 2)*begin_lambda + -3.31972e-05 *lens_ipow(begin_y, 2)*begin_lambda + -0.000129806 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -0.000119083 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 6.32501e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -0.0109586 *begin_y*lens_ipow(begin_dy, 3)*begin_lambda + 5.96385e-06 *lens_ipow(begin_y, 3)*begin_dy*begin_lambda + -0.00462768 *begin_x*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -7.25225e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -0.135242 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + 0.061981 *lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 2) + -0.00102821 *begin_y*begin_dy*lens_ipow(begin_lambda, 4) + 4.02131e-10 *lens_ipow(begin_y, 6) + 0.00030934 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -7.50462e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_lambda + 4.84695e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4) + 1.22325e-11 *lens_ipow(begin_x, 7)*begin_dx + 2.92267e-13 *lens_ipow(begin_x, 8) + -1.37051e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda+0.0f;
    Eigen::Matrix2d invJ = domega2_dx0.inverse().eval();
    Eigen::Vector2d solution_pos = 0.72 * invJ * delta_out; // default newton-raphson
    x += solution_pos(0);
    y += solution_pos(1);
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const double begin_x = x;
const double begin_y = y;
const double begin_dx = dx;
const double begin_dy = dy;
const double begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.443274  + 0.713433 *begin_lambda + -0.986532 *lens_ipow(begin_lambda, 2) + 0.480204 *lens_ipow(begin_lambda, 3) + -0.78414 *lens_ipow(begin_dy, 4) + -2.05106 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.781365 *lens_ipow(begin_dx, 4) + -0.0654235 *begin_y*lens_ipow(begin_dy, 3) + -0.0649382 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.00241836 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -0.000835641 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -4.05091e-05 *lens_ipow(begin_y, 3)*begin_dy + -2.63395e-07 *lens_ipow(begin_y, 4) + -0.065599 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + -0.0649536 *begin_x*lens_ipow(begin_dx, 3) + -0.00313689 *begin_x*begin_y*begin_dx*begin_dy + -4.04433e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -0.000848759 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -0.00240156 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + -4.06662e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -5.81228e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -4.02804e-05 *lens_ipow(begin_x, 3)*begin_dx + -2.61971e-07 *lens_ipow(begin_x, 4) + -0.997577 *lens_ipow(begin_dy, 6) + -1.00515 *lens_ipow(begin_dx, 6) + -5.66603e-13 *lens_ipow(begin_y, 8) + -4.67549e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4) + -5.55575e-13 *lens_ipow(begin_x, 8);
else
  out[4] = 0.0f;
} break;
