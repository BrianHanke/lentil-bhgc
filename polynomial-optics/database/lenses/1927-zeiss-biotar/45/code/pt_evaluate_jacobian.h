case zeiss__biotar__1927__45mm:
{
const double dx00 =  + 0.175085  + 0.0749963 *lambda + 0.744652 *lens_ipow(dy, 2) + 0.032012 *y*dy + 0.0819578 *x*dx + 5.14921 *lens_ipow(dx, 2)*lambda + -5.49513 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.0325736 *y*lens_ipow(dy, 3) + -0.000118146 *lens_ipow(y, 3)*dy + -2.52609e-06 *lens_ipow(y, 4) + 0.0762595 *x*dx*lens_ipow(dy, 2) + -0.000356436 *lens_ipow(x, 2)*y*dy + -1.5172e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.000405329 *lens_ipow(x, 3)*dx + -1.21263e-05 *lens_ipow(x, 4) + 0.248127 *y*lens_ipow(dx, 2)*dy*lambda + 0.650567 *x*lens_ipow(dx, 3)*lambda + -0.000617252 *x*lens_ipow(y, 2)*dx*lambda + 0.0151067 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 17.3921 *lens_ipow(dx, 4)*lens_ipow(lambda, 5) + 8.10566e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx01 =  + 0.032012 *x*dy + 0.841872 *dx*dy*lambda + 0.0454933 *y*dx*lambda + 0.0325736 *x*lens_ipow(dy, 3) + -0.000354438 *x*lens_ipow(y, 2)*dy + -1.01044e-05 *x*lens_ipow(y, 3) + -0.000118812 *lens_ipow(x, 3)*dy + -1.01147e-05 *lens_ipow(x, 3)*y + 0.199472 *y*dx*lens_ipow(dy, 2)*lambda + -0.000154262 *lens_ipow(y, 3)*dx*lambda + 0.248127 *x*lens_ipow(dx, 2)*dy*lambda + -0.000617252 *lens_ipow(x, 2)*y*dx*lambda + 8.10566e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx02 =  + 44.888  + -17.4403 *lens_ipow(dy, 2) + -51.781 *lens_ipow(dx, 2) + 0.0409789 *lens_ipow(x, 2) + 0.841872 *y*dy*lambda + 0.0227466 *lens_ipow(y, 2)*lambda + 10.2984 *x*dx*lambda + -10.9903 *x*dx*lens_ipow(lambda, 2) + 0.0381298 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.000101332 *lens_ipow(x, 4) + 0.0997362 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -3.85654e-05 *lens_ipow(y, 4)*lambda + 0.496254 *x*y*dx*dy*lambda + 0.975851 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -0.000308626 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.0100712 *lens_ipow(x, 3)*dx*lambda + 69.5685 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 5) + 2.02642e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + -34.8807 *dx*dy + 1.4893 *x*dy + 0.032012 *x*y + 0.841872 *y*dx*lambda + 0.0977209 *x*y*lens_ipow(dy, 2) + -0.000118146 *x*lens_ipow(y, 3) + 0.0762595 *lens_ipow(x, 2)*dx*dy + -0.000118812 *lens_ipow(x, 3)*y + 0.199472 *lens_ipow(y, 2)*dx*dy*lambda + 0.248127 *x*y*lens_ipow(dx, 2)*lambda+0.0f;
const double dx04 =  + 0.0749963 *x + 0.841872 *y*dx*dy + 0.0227466 *lens_ipow(y, 2)*dx + 5.14921 *x*lens_ipow(dx, 2) + -10.9903 *x*lens_ipow(dx, 2)*lambda + 0.0997362 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -3.85654e-05 *lens_ipow(y, 4)*dx + 0.248127 *x*y*lens_ipow(dx, 2)*dy + 0.325284 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.000308626 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + 0.00503558 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 86.9606 *x*lens_ipow(dx, 4)*lens_ipow(lambda, 4) + 4.05283e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*dx*lambda+0.0f;
const double dx10 =  + 0.52584 *dx*dy + 0.0327674 *y*dx + 0.0275141 *x*dy + 0.140509 *y*dx*lens_ipow(dy, 2) + -0.000132632 *lens_ipow(y, 3)*dx + -1.12621e-05 *x*lens_ipow(y, 3) + -0.00103573 *x*lens_ipow(y, 2)*dy*lambda + 0.000805665 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 0.000954085 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -2.11199e-06 *lens_ipow(x, 4)*y*dx + -6.13662e-07 *lens_ipow(x, 5)*dy + -5.68649e-08 *lens_ipow(x, 5)*y+0.0f;
const double dx11 =  + 0.1763  + 0.073774 *lambda + 0.0327674 *x*dx + 4.88477 *lens_ipow(dy, 2)*lambda + 2.7897 *lens_ipow(dx, 2)*lambda + 0.237021 *y*dy*lambda + -4.72977 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -2.58274 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.175881 *y*lens_ipow(dy, 3) + -1.24513e-05 *lens_ipow(y, 4) + 0.140509 *x*dx*lens_ipow(dy, 2) + -0.000397897 *x*lens_ipow(y, 2)*dx + -1.68931e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.233951 *y*dy*lens_ipow(lambda, 3) + -0.00140671 *lens_ipow(y, 3)*dy*lambda + -0.00103573 *lens_ipow(x, 2)*y*dy*lambda + 0.639088 *y*lens_ipow(dx, 4)*dy + 0.000805665 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 2) + -4.22398e-07 *lens_ipow(x, 5)*dx + -9.47748e-09 *lens_ipow(x, 6) + 0.00125779 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 3)+0.0f;
const double dx12 =  + -30.469 *dx*dy + 0.52584 *x*dy + 0.0327674 *x*y + 5.5794 *y*dx*lambda + -5.16549 *y*dx*lens_ipow(lambda, 2) + 0.140509 *x*y*lens_ipow(dy, 2) + -0.000132632 *x*lens_ipow(y, 3) + 1.27818 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + 0.000477042 *lens_ipow(x, 4)*dx*dy + -4.22398e-07 *lens_ipow(x, 5)*y+0.0f;
const double dx13 =  + 44.8341  + -51.0641 *lens_ipow(dy, 2) + -15.2345 *lens_ipow(dx, 2) + 0.52584 *x*dx + 0.013757 *lens_ipow(x, 2) + 9.76954 *y*dy*lambda + 0.118511 *lens_ipow(y, 2)*lambda + -9.45954 *y*dy*lens_ipow(lambda, 2) + 0.263822 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.281018 *x*y*dx*dy + -0.116976 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + -0.000351679 *lens_ipow(y, 4)*lambda + -0.000517866 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.319544 *lens_ipow(y, 2)*lens_ipow(dx, 4) + 0.000402832 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.000238521 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -1.02277e-07 *lens_ipow(x, 6) + 0.000314447 *lens_ipow(y, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx14 =  + 0.073774 *y + 4.88477 *y*lens_ipow(dy, 2) + 2.7897 *y*lens_ipow(dx, 2) + 0.118511 *lens_ipow(y, 2)*dy + -9.45954 *y*lens_ipow(dy, 2)*lambda + -5.16549 *y*lens_ipow(dx, 2)*lambda + -0.350927 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -0.000351679 *lens_ipow(y, 4)*dy + -0.000517866 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + 0.000805665 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy*lambda + 0.000943342 *lens_ipow(y, 4)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx20 =  + -0.0278216  + -0.00103274 *lambda + -0.000402087 *y*dy + 1.67848e-05 *lens_ipow(y, 2) + 4.9456e-05 *lens_ipow(x, 2) + -0.0723167 *lens_ipow(dy, 2)*lambda + 0.0645981 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00385923 *y*lens_ipow(dx, 2)*dy + -4.51311e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0014879 *x*dx*lens_ipow(dy, 2) + -0.112404 *lens_ipow(dx, 4)*lambda + -0.0179126 *x*lens_ipow(dx, 3)*lambda + -0.000537323 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 2.01698e-08 *lens_ipow(x, 4)*y*dy + 9.95783e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 3.47979e-10 *lens_ipow(x, 6) + -5.4925e-07 *x*lens_ipow(y, 3)*dx*dy*lambda + 1.26795e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + 1.38436e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy*lambda + 6.96401e-15 *lens_ipow(x, 2)*lens_ipow(y, 8) + 1.33929e-14 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const double dx21 =  + -0.0158406 *dx*dy + 0.000218487 *y*dx + -0.000402087 *x*dy + 3.35696e-05 *x*y + -0.00269636 *y*dx*lens_ipow(dy, 2) + -0.00385923 *x*lens_ipow(dx, 2)*dy + -9.02622e-05 *x*y*lens_ipow(dx, 2) + 4.03396e-09 *lens_ipow(x, 5)*dy + 3.98313e-10 *lens_ipow(x, 5)*y + -8.23875e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lambda + 4.22649e-11 *lens_ipow(x, 6)*y*dx + 2.30726e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy*lambda + 1.85707e-14 *lens_ipow(x, 3)*lens_ipow(y, 7) + 7.65311e-15 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const double dx22 =  + -1.19937  + 1.80089 *lens_ipow(dx, 2) + -0.0158406 *y*dy + 0.000109244 *lens_ipow(y, 2) + -0.316844 *lens_ipow(dy, 2)*lambda + -0.00134818 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00771846 *x*y*dx*dy + -9.02622e-05 *x*lens_ipow(y, 2)*dx + -0.000743949 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.449616 *x*lens_ipow(dx, 3)*lambda + -0.0268689 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -0.000358216 *lens_ipow(x, 3)*dx*lambda + -2.74625e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + 2.11325e-11 *lens_ipow(x, 6)*lens_ipow(y, 2) + 1282.04 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx23 =  + -0.0158406 *y*dx + -0.000402087 *x*y + -0.633688 *dx*dy*lambda + -0.144633 *x*dy*lambda + -0.00269636 *lens_ipow(y, 2)*dx*dy + 0.129196 *x*dy*lens_ipow(lambda, 2) + -0.00385923 *x*y*lens_ipow(dx, 2) + -0.0014879 *lens_ipow(x, 2)*dx*dy + 4.03396e-09 *lens_ipow(x, 5)*y + -2.74625e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lambda + 1025.63 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lambda + 4.61452e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*lambda+0.0f;
const double dx24 =  + -0.00103274 *x + -0.316844 *dx*lens_ipow(dy, 2) + -0.0723167 *x*lens_ipow(dy, 2) + 0.129196 *x*lens_ipow(dy, 2)*lambda + -0.112404 *x*lens_ipow(dx, 4) + -0.0089563 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.000179108 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -2.74625e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + 256.409 *lens_ipow(dx, 5)*lens_ipow(dy, 4) + 4.61452e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*dy+0.0f;
const double dx30 =  + 0.0342269 *dx*dy + -8.02169e-05 *y*dx + 0.000621884 *x*dy + 3.54422e-05 *x*y + 4.21667e-08 *x*lens_ipow(y, 3) + -0.00462768 *y*dx*lens_ipow(dy, 2)*lambda + -0.000145045 *x*y*lens_ipow(dy, 2)*lambda + -5.00308e-07 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda + 3.87756e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + 8.56276e-11 *lens_ipow(x, 6)*y*dx + 2.33813e-12 *lens_ipow(x, 7)*y + -1.02789e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy*lambda+0.0f;
const double dx31 =  + -0.0284469  + 6.94832e-05 *lens_ipow(y, 2) + -8.02169e-05 *x*dx + 1.77211e-05 *lens_ipow(x, 2) + -0.0196635 *lens_ipow(dx, 2)*lambda + -3.31972e-05 *lens_ipow(y, 2)*lambda + -0.000129806 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000119083 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 6.32501e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0109586 *y*lens_ipow(dy, 3)*lambda + 5.96385e-06 *lens_ipow(y, 3)*dy*lambda + -0.00462768 *x*dx*lens_ipow(dy, 2)*lambda + -7.25225e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -0.135242 *lens_ipow(dy, 4)*lens_ipow(lambda, 2) + 0.061981 *lens_ipow(dx, 4)*lens_ipow(lambda, 2) + -0.00102821 *y*dy*lens_ipow(lambda, 4) + 4.02131e-10 *lens_ipow(y, 6) + 0.00030934 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -7.50462e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 4.84695e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + 1.22325e-11 *lens_ipow(x, 7)*dx + 2.92267e-13 *lens_ipow(x, 8) + -1.37051e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy*lambda+0.0f;
const double dx32 =  + 2.67289 *dx*dy + 0.0342269 *x*dy + -8.02169e-05 *x*y + -0.039327 *y*dx*lambda + -7.93885e-05 *lens_ipow(y, 3)*dx + -0.00462768 *x*y*lens_ipow(dy, 2)*lambda + 0.247924 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 0.000206227 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 3) + -5.00308e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lambda + 1.22325e-11 *lens_ipow(x, 7)*y + -3.42629e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy*lambda+0.0f;
const double dx33 =  + -1.19703  + 1.79933 *lens_ipow(dy, 2) + 1.33644 *lens_ipow(dx, 2) + 0.0342269 *x*dx + 0.000310942 *lens_ipow(x, 2) + -8.65376e-05 *lens_ipow(y, 3)*dy + -0.0164379 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 1.49096e-06 *lens_ipow(y, 4)*lambda + -0.00925536 *x*y*dx*dy*lambda + -0.000145045 *lens_ipow(x, 2)*y*dy*lambda + -0.540968 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.000514103 *lens_ipow(y, 2)*lens_ipow(lambda, 4) + -3.42629e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lambda+0.0f;
const double dx34 =  + -0.0196635 *y*lens_ipow(dx, 2) + -1.10657e-05 *lens_ipow(y, 3) + -0.0054793 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 1.49096e-06 *lens_ipow(y, 4)*dy + -0.00462768 *x*y*dx*lens_ipow(dy, 2) + -7.25225e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -0.270484 *y*lens_ipow(dy, 4)*lambda + 0.123962 *y*lens_ipow(dx, 4)*lambda + -0.00205641 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 3) + 0.00030934 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -2.50154e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2) + -3.42629e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy+0.0f;
const double dx40 =  + -0.065599 *dx*lens_ipow(dy, 2) + -0.0649536 *lens_ipow(dx, 3) + -0.00313689 *y*dx*dy + -4.04433e-05 *lens_ipow(y, 2)*dx + -0.00169752 *x*lens_ipow(dy, 2) + -0.00480312 *x*lens_ipow(dx, 2) + -8.13325e-05 *x*y*dy + -1.16246e-06 *x*lens_ipow(y, 2) + -0.000120841 *lens_ipow(x, 2)*dx + -1.04788e-06 *lens_ipow(x, 3) + -1.87019e-11 *lens_ipow(x, 3)*lens_ipow(y, 4) + -4.4446e-12 *lens_ipow(x, 7)+0.0f;
const double dx41 =  + -0.0654235 *lens_ipow(dy, 3) + -0.0649382 *lens_ipow(dx, 2)*dy + -0.00483671 *y*lens_ipow(dy, 2) + -0.00167128 *y*lens_ipow(dx, 2) + -0.000121527 *lens_ipow(y, 2)*dy + -1.05358e-06 *lens_ipow(y, 3) + -0.00313689 *x*dx*dy + -8.08866e-05 *x*y*dx + -4.06662e-05 *lens_ipow(x, 2)*dy + -1.16246e-06 *lens_ipow(x, 2)*y + -4.53283e-12 *lens_ipow(y, 7) + -1.87019e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)+0.0f;
const double dx42 =  + -4.10213 *dx*lens_ipow(dy, 2) + -3.12546 *lens_ipow(dx, 3) + -0.129876 *y*dx*dy + -0.00167128 *lens_ipow(y, 2)*dx + -0.065599 *x*lens_ipow(dy, 2) + -0.194861 *x*lens_ipow(dx, 2) + -0.00313689 *x*y*dy + -4.04433e-05 *x*lens_ipow(y, 2) + -0.00480312 *lens_ipow(x, 2)*dx + -4.02804e-05 *lens_ipow(x, 3) + -6.03089 *lens_ipow(dx, 5)+0.0f;
const double dx43 =  + -3.13656 *lens_ipow(dy, 3) + -4.10213 *lens_ipow(dx, 2)*dy + -0.19627 *y*lens_ipow(dy, 2) + -0.0649382 *y*lens_ipow(dx, 2) + -0.00483671 *lens_ipow(y, 2)*dy + -4.05091e-05 *lens_ipow(y, 3) + -0.131198 *x*dx*dy + -0.00313689 *x*y*dx + -0.00169752 *lens_ipow(x, 2)*dy + -4.06662e-05 *lens_ipow(x, 2)*y + -5.98546 *lens_ipow(dy, 5)+0.0f;
const double dx44 =  + 0.713433  + -1.97306 *lambda + 1.44061 *lens_ipow(lambda, 2)+0.0f;
} break;
