case zeiss__biotar__1927__45mm:
{
const double dx00 =  + 0.467239  + 0.0371139 *lambda + -0.194251 *lens_ipow(dy, 2) + -0.406714 *lens_ipow(dx, 2) + -0.000173671 *lens_ipow(y, 2) + -0.0143013 *x*dx + -0.000538461 *lens_ipow(x, 2) + -0.00775566 *y*dy*lambda + 0.0518338 *y*lens_ipow(dx, 2)*dy + -2.86047e-05 *lens_ipow(y, 3)*dy + -8.8463e-07 *lens_ipow(y, 4) + -8.48667e-05 *x*lens_ipow(y, 2)*dx + -7.90679e-05 *lens_ipow(x, 2)*y*dy + -4.52141e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -4.00745e-06 *lens_ipow(x, 4) + 0.0738534 *x*lens_ipow(dx, 3)*lambda + -1.65727e-06 *lens_ipow(x, 5)*dx*lambda + 0.105319 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 6) + -1.64145e-13 *lens_ipow(x, 6)*lens_ipow(y, 4) + 5.56514e-09 *lens_ipow(x, 7)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx01 =  + -0.000347341 *x*y + -0.335571 *dx*dy*lambda + -0.00775566 *x*dy*lambda + 0.0420404 *y*dx*lens_ipow(dy, 2) + 0.0518338 *x*lens_ipow(dx, 2)*dy + -8.58142e-05 *x*lens_ipow(y, 2)*dy + -3.53852e-06 *x*lens_ipow(y, 3) + -8.48667e-05 *lens_ipow(x, 2)*y*dx + -2.6356e-05 *lens_ipow(x, 3)*dy + -3.01427e-06 *lens_ipow(x, 3)*y + -6.55464e-05 *lens_ipow(y, 3)*dx*lambda + -0.069709 *y*lens_ipow(dx, 5) + 0.105319 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 6) + -9.37972e-14 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const double dx02 =  + 28.6047  + 1.14365 *lambda + -17.5745 *lens_ipow(dy, 2) + -52.6066 *lens_ipow(dx, 2) + -0.813427 *x*dx + -0.00715064 *lens_ipow(x, 2) + -0.335571 *y*dy*lambda + 0.0210202 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.103668 *x*y*dx*dy + -4.24333e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.63866e-05 *lens_ipow(y, 4)*lambda + 0.11078 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -0.174272 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -2.76212e-07 *lens_ipow(x, 6)*lambda + 6.95643e-10 *lens_ipow(x, 8)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + -35.1491 *dx*dy + -0.388502 *x*dy + -0.335571 *y*dx*lambda + -0.00775566 *x*y*lambda + 0.0420404 *lens_ipow(y, 2)*dx*dy + 0.0518338 *x*y*lens_ipow(dx, 2) + -2.86047e-05 *x*lens_ipow(y, 3) + -2.6356e-05 *lens_ipow(x, 3)*y + 0.315958 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 6)+0.0f;
const double dx04 =  + 1.14365 *dx + 0.0371139 *x + -0.335571 *y*dx*dy + -0.00775566 *x*y*dy + -1.63866e-05 *lens_ipow(y, 4)*dx + 0.0369267 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -2.76212e-07 *lens_ipow(x, 6)*dx + 0.631915 *x*y*lens_ipow(dy, 3)*lens_ipow(lambda, 5) + 1.39129e-09 *lens_ipow(x, 8)*dx*lambda+0.0f;
const double dx10 =  + -0.000393838 *x*y + -0.302272 *dx*dy*lambda + -0.00744506 *y*dx*lambda + 0.0401756 *y*dx*lens_ipow(dy, 2) + -2.54482e-05 *lens_ipow(y, 3)*dx + -8.52422e-05 *x*lens_ipow(y, 2)*dy + -2.80518e-06 *x*lens_ipow(y, 3) + -2.54789e-06 *lens_ipow(x, 3)*y + -0.000100859 *lens_ipow(x, 2)*y*dx*lambda + -14.415 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -0.000427325 *lens_ipow(x, 3)*lens_ipow(dy, 3) + -1.26799e-13 *lens_ipow(x, 3)*lens_ipow(y, 7) + -4.06753e-07 *lens_ipow(x, 5)*y*lens_ipow(dy, 4)+0.0f;
const double dx11 =  + 0.467672  + 0.0416275 *lambda + -0.419807 *lens_ipow(dy, 2) + -0.0128566 *y*dy + -0.000807118 *lens_ipow(y, 2) + -0.000196919 *lens_ipow(x, 2) + -0.341036 *lens_ipow(dx, 2)*lambda + -0.00744506 *x*dx*lambda + 0.0401756 *x*dx*lens_ipow(dy, 2) + -7.63447e-05 *x*lens_ipow(y, 2)*dx + -8.52422e-05 *lens_ipow(x, 2)*y*dy + -4.20777e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -6.36972e-07 *lens_ipow(x, 4) + -3.36196e-05 *lens_ipow(x, 3)*dx*lambda + -0.00334397 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.50399e-08 *lens_ipow(y, 6) + -1.71625e-06 *lens_ipow(y, 5)*dy*lambda + -1.81509e-07 *lens_ipow(y, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -2.21899e-13 *lens_ipow(x, 4)*lens_ipow(y, 6) + -6.77921e-08 *lens_ipow(x, 6)*lens_ipow(dy, 4)+0.0f;
const double dx12 =  + -30.7001 *dx*dy + -0.682071 *y*dx*lambda + -0.302272 *x*dy*lambda + -0.00744506 *x*y*lambda + 0.0401756 *x*y*lens_ipow(dy, 2) + -2.54482e-05 *x*lens_ipow(y, 3) + -3.36196e-05 *lens_ipow(x, 3)*y*lambda + -43.245 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -4525.31 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 28.4706  + 1.23103 *lambda + -50.5016 *lens_ipow(dy, 2) + -15.35 *lens_ipow(dx, 2) + -0.839615 *y*dy + -0.00642829 *lens_ipow(y, 2) + -0.302272 *x*dx*lambda + 0.0803511 *x*y*dx*dy + -4.26211e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00222931 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + -43.245 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.000320494 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -2.86041e-07 *lens_ipow(y, 6)*lambda + -3393.98 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -5.18598e-08 *lens_ipow(y, 7)*dy*lens_ipow(lambda, 2) + -2.71168e-07 *lens_ipow(x, 6)*y*lens_ipow(dy, 3)+0.0f;
const double dx14 =  + 1.23103 *dy + 0.0416275 *y + -0.341036 *y*lens_ipow(dx, 2) + -0.302272 *x*dx*dy + -0.00744506 *x*y*dx + -3.36196e-05 *lens_ipow(x, 3)*y*dx + -0.00222931 *lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + -2.86041e-07 *lens_ipow(y, 6)*dy + -2262.66 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + -5.18598e-08 *lens_ipow(y, 7)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx20 =  + -0.0300371  + 0.0124931 *lambda + -0.0100829 *lens_ipow(lambda, 2) + -0.0112328 *lens_ipow(dy, 2) + -0.0286454 *lens_ipow(dx, 2) + -2.12163e-05 *lens_ipow(y, 2) + -7.33395e-05 *lens_ipow(x, 2) + -0.000338572 *y*dy*lambda + -0.00183695 *x*dx*lambda + -5.11606e-08 *lens_ipow(y, 4) + -0.0792312 *lens_ipow(dx, 4)*lambda + -3.64441e-06 *lens_ipow(y, 3)*dy*lambda + -0.119164 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000100698 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.76996e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + -5.78305e-10 *lens_ipow(x, 6) + -1.1138e-06 *lens_ipow(y, 4)*lens_ipow(dx, 4) + 3.03179e-08 *lens_ipow(x, 5)*y*dx*dy*lambda + -9.54261e-15 *lens_ipow(x, 2)*lens_ipow(y, 8) + 1.08232e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -2.65652e-14 *lens_ipow(x, 6)*lens_ipow(y, 4) + -1.53372e-11 *lens_ipow(x, 8)*lens_ipow(dy, 2)+0.0f;
const double dx21 =  + -0.0208008 *dx*dy + -4.24326e-05 *x*y + -0.000748541 *y*dx*lambda + -0.000338572 *x*dy*lambda + -2.04642e-07 *x*lens_ipow(y, 3) + -1.09332e-05 *x*lens_ipow(y, 2)*dy*lambda + -0.000201397 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -7.07983e-10 *lens_ipow(x, 5)*y + -4.45521e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 4) + 5.05298e-09 *lens_ipow(x, 6)*dx*dy*lambda + -0.0291658 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -2.5447e-14 *lens_ipow(x, 3)*lens_ipow(y, 7) + 2.16463e-07 *lens_ipow(x, 5)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -1.51801e-14 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const double dx22 =  + 0.459939  + -0.160754 *lens_ipow(dy, 2) + -0.606471 *lens_ipow(dx, 2) + -0.0208008 *y*dy + -0.0572909 *x*dx + -0.000374271 *lens_ipow(y, 2)*lambda + -0.000918477 *lens_ipow(x, 2)*lambda + -0.316925 *x*lens_ipow(dx, 3)*lambda + -0.238328 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -4.45521e-06 *x*lens_ipow(y, 4)*lens_ipow(dx, 3) + 5.05298e-09 *lens_ipow(x, 6)*y*dy*lambda + -0.0291658 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 4.32927e-07 *lens_ipow(x, 5)*y*dx*dy*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + -0.321509 *dx*dy + -0.0208008 *y*dx + -0.0224657 *x*dy + -0.000338572 *x*y*lambda + -3.64441e-06 *x*lens_ipow(y, 3)*lambda + -0.238328 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.000201397 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 5.05298e-09 *lens_ipow(x, 6)*y*dx*lambda + -0.0291658 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 2.16463e-07 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -3.40827e-12 *lens_ipow(x, 9)*dy+0.0f;
const double dx24 =  + 0.0124931 *x + -0.0201658 *x*lambda + -0.000374271 *lens_ipow(y, 2)*dx + -0.000338572 *x*y*dy + -0.000918477 *lens_ipow(x, 2)*dx + -0.0792312 *x*lens_ipow(dx, 4) + -3.64441e-06 *x*lens_ipow(y, 3)*dy + -0.238328 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.000201397 *x*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 5.05298e-09 *lens_ipow(x, 6)*y*dx*dy + -0.0194439 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + 4.32927e-07 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx30 =  + -0.0170505 *dx*dy + -3.92599e-05 *x*y + -0.000635 *x*dy*lambda + -1.49592e-07 *lens_ipow(x, 3)*y + -4.57703e-06 *lens_ipow(y, 3)*dx*lambda + -5.53388e-06 *lens_ipow(x, 2)*y*dx*lambda + -0.155801 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + -1.25055e-09 *x*lens_ipow(y, 5) + -2.09634e-06 *x*lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + -7.04113e-08 *x*lens_ipow(y, 4)*dy*lambda + -7.89967e-12 *lens_ipow(x, 5)*lens_ipow(y, 3) + 0.0131491 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 3.01623e-10 *lens_ipow(x, 7)*lens_ipow(dy, 3)+0.0f;
const double dx31 =  + -0.0302526  + 0.0126122 *lambda + -0.0100008 *lens_ipow(lambda, 2) + -0.0305904 *lens_ipow(dy, 2) + -0.0083834 *lens_ipow(dx, 2) + -6.65982e-05 *lens_ipow(y, 2) + -1.963e-05 *lens_ipow(x, 2) + -0.00133994 *y*dy*lambda + -2.76625e-06 *lens_ipow(y, 3)*dy + -3.73981e-08 *lens_ipow(x, 4) + -0.000263321 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -1.37311e-05 *x*lens_ipow(y, 2)*dx*lambda + -1.84463e-06 *lens_ipow(x, 3)*dx*lambda + -7.92727e-10 *lens_ipow(y, 6) + -3.12638e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.0189282 *y*lens_ipow(dy, 5)*lambda + -3.1445e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -1.40823e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + -3.94983e-12 *lens_ipow(x, 6)*lens_ipow(y, 2) + 0.0131491 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx32 =  + -0.0167668 *y*dx + -0.0170505 *x*dy + -0.777866 *dx*dy*lambda + -0.000175547 *lens_ipow(y, 3)*dx*lambda + -4.57703e-06 *x*lens_ipow(y, 3)*lambda + -1.84463e-06 *lens_ipow(x, 3)*y*lambda + 20.4326 *dx*lens_ipow(dy, 5) + -0.467404 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 0.0131491 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx33 =  + 0.458036  + -0.557706 *lens_ipow(dy, 2) + -0.0611808 *y*dy + -0.0170505 *x*dx + -0.388933 *lens_ipow(dx, 2)*lambda + -0.000669968 *lens_ipow(y, 2)*lambda + -0.0003175 *lens_ipow(x, 2)*lambda + -6.91563e-07 *lens_ipow(y, 4) + 51.0816 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.155801 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 0.0473206 *lens_ipow(y, 2)*lens_ipow(dy, 4)*lambda + -2.09634e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + -3.52057e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + 0.0262982 *x*y*dx*dy*lens_ipow(lambda, 5) + 1.13108e-10 *lens_ipow(x, 8)*lens_ipow(dy, 2)+0.0f;
const double dx34 =  + 0.0126122 *y + -0.0200016 *y*lambda + -0.388933 *lens_ipow(dx, 2)*dy + -0.000669968 *lens_ipow(y, 2)*dy + -0.0003175 *lens_ipow(x, 2)*dy + -8.77736e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -4.57703e-06 *x*lens_ipow(y, 3)*dx + -1.84463e-06 *lens_ipow(x, 3)*y*dx + -0.311603 *x*lens_ipow(dx, 3)*dy*lambda + 0.00946412 *lens_ipow(y, 2)*lens_ipow(dy, 5) + -1.04817e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 2) + -3.52057e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + 0.0657455 *x*y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx40 =  + -0.000631136 *dx*lambda + -0.0090516 *dx*lens_ipow(dy, 2) + 0.000312883 *y*dx*dy + -0.000164947 *x*lens_ipow(dy, 2) + -3.92349e-07 *x*lens_ipow(y, 2) + -0.0886047 *lens_ipow(dx, 5) + -9.44549e-08 *lens_ipow(x, 4)*dx + -3.28078e-09 *lens_ipow(x, 5) + 0.000543167 *lens_ipow(x, 2)*lens_ipow(dx, 5) + -1.68938e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)+0.0f;
const double dx41 =  + -0.0135462 *lens_ipow(dy, 3) + -0.0075004 *lens_ipow(dx, 2)*dy + -2.19902e-07 *lens_ipow(y, 3) + 0.000312883 *x*dx*dy + -3.92349e-07 *lens_ipow(x, 2)*y + -0.00048528 *y*lens_ipow(dy, 2)*lambda + -2.34356e-05 *lens_ipow(y, 2)*dy*lambda + -1.67905e-09 *lens_ipow(y, 5) + -1.68938e-11 *lens_ipow(x, 4)*lens_ipow(y, 3) + -7.21535e-05 *lens_ipow(y, 3)*lens_ipow(dx, 6)+0.0f;
const double dx42 =  + -0.000631136 *x*lambda + -2.70485 *dx*lens_ipow(dy, 2) + -1.33401 *lens_ipow(dx, 3) + -0.0150008 *y*dx*dy + -0.0090516 *x*lens_ipow(dy, 2) + 0.000312883 *x*y*dy + -13.4853 *lens_ipow(dx, 5) + -0.443024 *x*lens_ipow(dx, 4) + -1.8891e-08 *lens_ipow(x, 5) + 0.000905279 *lens_ipow(x, 3)*lens_ipow(dx, 4) + -159.049 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda + -0.00010823 *lens_ipow(y, 4)*lens_ipow(dx, 5)+0.0f;
const double dx43 =  + -2.70485 *lens_ipow(dx, 2)*dy + -0.0406386 *y*lens_ipow(dy, 2) + -0.0075004 *y*lens_ipow(dx, 2) + -0.0181032 *x*dx*dy + 0.000312883 *x*y*dx + -0.000164947 *lens_ipow(x, 2)*dy + -0.00048528 *lens_ipow(y, 2)*dy*lambda + -7.81186e-06 *lens_ipow(y, 3)*lambda + -55.6859 *lens_ipow(dy, 5) + 377.984 *lens_ipow(dy, 7) + -159.049 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + -903.476 *lens_ipow(dy, 9)+0.0f;
const double dx44 =  + 0.516111  + -1.43716 *lambda + 1.05341 *lens_ipow(lambda, 2) + -0.000631136 *x*dx + -0.00024264 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -7.81186e-06 *lens_ipow(y, 3)*dy + -39.7622 *lens_ipow(dx, 4)*lens_ipow(dy, 4)+0.0f;
} break;
