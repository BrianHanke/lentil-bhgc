case zeiss__biotar__1927__58mm:
{
const double dx00 =  + 0.216995  + 0.747064 *lens_ipow(dy, 2) + 0.724429 *lens_ipow(dx, 2) + 0.0248833 *y*dy + -0.000859006 *lens_ipow(x, 2) + 0.900938 *lens_ipow(dx, 2)*lambda + 0.121408 *x*dx*lambda + 0.0258419 *y*lens_ipow(dy, 3) + 0.105271 *y*lens_ipow(dx, 2)*dy + -5.49865e-05 *lens_ipow(y, 3)*dy + -8.98589e-07 *lens_ipow(y, 4) + 0.0677406 *x*dx*lens_ipow(dy, 2) + 0.00276356 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -0.000166574 *lens_ipow(x, 2)*y*dy + -5.52038e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.04652e-06 *lens_ipow(x, 4) + 0.25191 *x*lens_ipow(dx, 3)*lambda + -0.000473901 *x*lens_ipow(y, 2)*dx*lambda + 0.000367676 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -0.000794965 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 2) + -2.26176e-05 *lens_ipow(x, 4)*lens_ipow(lambda, 4)+0.0f;
const double dx01 =  + 0.468049 *dx*dy + 0.0189219 *y*dx + 0.0248833 *x*dy + 0.0802884 *y*dx*lens_ipow(dy, 2) + -3.51445e-05 *lens_ipow(y, 3)*dx + 0.0258419 *x*lens_ipow(dy, 3) + 0.105271 *x*lens_ipow(dx, 2)*dy + -0.000164959 *x*lens_ipow(y, 2)*dy + -3.59436e-06 *x*lens_ipow(y, 3) + -5.55245e-05 *lens_ipow(x, 3)*dy + -3.68025e-06 *lens_ipow(x, 3)*y + -0.000473901 *lens_ipow(x, 2)*y*dx*lambda + 0.000367676 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2)+0.0f;
const double dx02 =  + 57.8836  + -22.4452 *lens_ipow(dy, 2) + -66.2365 *lens_ipow(dx, 2) + 0.468049 *y*dy + 0.00946094 *lens_ipow(y, 2) + 1.44886 *x*dx + 1.80188 *x*dx*lambda + 0.060704 *lens_ipow(x, 2)*lambda + 0.0401442 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -8.78612e-06 *lens_ipow(y, 4) + 0.210543 *x*y*dx*dy + 0.0338703 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.377865 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -0.00023695 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.000183838 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.000198741 *lens_ipow(x, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + -44.8904 *dx*dy + 0.468049 *y*dx + 1.49413 *x*dy + 0.0248833 *x*y + 0.0802884 *lens_ipow(y, 2)*dx*dy + 0.0775256 *x*y*lens_ipow(dy, 2) + 0.105271 *x*y*lens_ipow(dx, 2) + -5.49865e-05 *x*lens_ipow(y, 3) + 0.0677406 *lens_ipow(x, 2)*dx*dy + -5.55245e-05 *lens_ipow(x, 3)*y+0.0f;
const double dx04 =  + 0.900938 *x*lens_ipow(dx, 2) + 0.060704 *lens_ipow(x, 2)*dx + 0.00184237 *lens_ipow(x, 3)*lambda + 0.125955 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.00023695 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + 0.000367676 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lambda + -0.000397483 *lens_ipow(x, 4)*dx*lambda + -1.80941e-05 *lens_ipow(x, 5)*lens_ipow(lambda, 3)+0.0f;
const double dx10 =  + 0.513103 *dx*dy + 0.0251013 *y*dx + 0.0221172 *x*dy + 0.0347331 *y*lens_ipow(dx, 3) + -5.38321e-05 *lens_ipow(y, 3)*dx + -3.57121e-06 *x*lens_ipow(y, 3) + -0.00353298 *lens_ipow(x, 2)*dx*dy + -0.000184256 *lens_ipow(x, 2)*y*dx + -7.78805e-05 *lens_ipow(x, 3)*dy + -3.94825e-06 *lens_ipow(x, 3)*y + 0.166306 *y*dx*lens_ipow(dy, 2)*lambda + -0.000299606 *x*lens_ipow(y, 2)*dy*lambda + -4.44033e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx11 =  + 0.180428  + 0.0666385 *lambda + 0.774109 *lens_ipow(dx, 2) + 0.0251013 *x*dx + 2.66025 *lens_ipow(dy, 2)*lambda + 0.138948 *y*dy*lambda + 0.0797596 *y*lens_ipow(dx, 2)*dy + -4.54402e-06 *lens_ipow(y, 4) + 0.0347331 *x*lens_ipow(dx, 3) + -0.000161496 *x*lens_ipow(y, 2)*dx + -5.35682e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -6.14185e-05 *lens_ipow(x, 3)*dx + -9.87062e-07 *lens_ipow(x, 4) + 0.166306 *x*dx*lens_ipow(dy, 2)*lambda + -0.000299606 *lens_ipow(x, 2)*y*dy*lambda + -0.00131362 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + -3.88988 *lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 1.90704 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -3.25842 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 5) + 4.73481e-06 *lens_ipow(y, 5)*dy*lens_ipow(lambda, 4) + -6.6605e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx12 =  + -42.1241 *dx*dy + 1.54822 *y*dx + 0.513103 *x*dy + 0.0251013 *x*y + 0.0797596 *lens_ipow(y, 2)*dx*dy + 0.104199 *x*y*lens_ipow(dx, 2) + -5.38321e-05 *x*lens_ipow(y, 3) + -0.00117766 *lens_ipow(x, 3)*dy + -6.14185e-05 *lens_ipow(x, 3)*y + 0.166306 *x*y*lens_ipow(dy, 2)*lambda+0.0f;
const double dx13 =  + 57.7837  + -66.7834 *lens_ipow(dy, 2) + -21.062 *lens_ipow(dx, 2) + 0.513103 *x*dx + 0.0110586 *lens_ipow(x, 2) + 5.32051 *y*dy*lambda + 0.0694739 *lens_ipow(y, 2)*lambda + 0.0398798 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00117766 *lens_ipow(x, 3)*dx + -1.94701e-05 *lens_ipow(x, 4) + 0.332612 *x*y*dx*dy*lambda + -0.000149803 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -0.000328406 *lens_ipow(y, 4)*lens_ipow(lambda, 2) + -7.77976 *y*dy*lens_ipow(lambda, 5) + 2.86056 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -4.88763 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 7.89134e-07 *lens_ipow(y, 6)*lens_ipow(lambda, 4) + -4.44033e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lens_ipow(lambda, 4)+0.0f;
const double dx14 =  + 0.0666385 *y + 2.66025 *y*lens_ipow(dy, 2) + 0.0694739 *lens_ipow(y, 2)*dy + 0.166306 *x*y*dx*lens_ipow(dy, 2) + -0.000149803 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -0.000656812 *lens_ipow(y, 4)*dy*lambda + -19.4494 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 2.86056 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -8.14606 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 4) + 3.15654e-06 *lens_ipow(y, 6)*dy*lens_ipow(lambda, 3) + -8.88066e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx20 =  + -0.0220985  + -0.000227015 *y*dy + 9.81594e-06 *lens_ipow(y, 2) + 3.10382e-05 *lens_ipow(x, 2) + -0.0499982 *lens_ipow(dy, 2)*lambda + -4.36029e-06 *lens_ipow(y, 2)*lambda + -1.14784e-05 *lens_ipow(x, 2)*lambda + 0.0425018 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.0414607 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00213636 *y*lens_ipow(dx, 2)*dy + -1.6654e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00288221 *x*dx*lens_ipow(dy, 2) + -4.24858e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.000883438 *y*lens_ipow(dy, 3)*lambda + 8.00558e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 1.67156e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 3.01373e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.000265236 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lambda + -2.5898e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + 3.00184e-13 *lens_ipow(x, 2)*lens_ipow(y, 6)+0.0f;
const double dx21 =  + -0.0123531 *dx*dy + 0.000123712 *y*dx + -0.000227015 *x*dy + 1.96319e-05 *x*y + -8.72059e-06 *x*y*lambda + -0.00159373 *y*dx*lens_ipow(dy, 2) + -0.00213636 *x*lens_ipow(dx, 2)*dy + -3.3308e-05 *x*y*lens_ipow(dx, 2) + -0.000883438 *x*lens_ipow(dy, 3)*lambda + 8.00558e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 8.35781e-09 *lens_ipow(x, 4)*y*dx + 1.20549e-10 *lens_ipow(x, 5)*y + -0.000530473 *x*y*lens_ipow(dx, 4)*lambda + -2.5898e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lambda + 6.00368e-13 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const double dx22 =  + -1.1998  + 1.82906 *lens_ipow(dx, 2) + -0.0123531 *y*dy + 6.1856e-05 *lens_ipow(y, 2) + -0.383611 *lens_ipow(dy, 2)*lambda + -0.000796866 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0829214 *x*dx*lens_ipow(dy, 2) + -0.00427272 *x*y*dx*dy + -3.3308e-05 *x*lens_ipow(y, 2)*dx + -0.00144111 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 4.1789e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.00106095 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + -3.88469e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 112.357 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + 46.4259 *lens_ipow(dy, 8)*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + -0.0123531 *y*dx + -0.000227015 *x*y + -0.767222 *dx*dy*lambda + -0.0999963 *x*dy*lambda + -0.00159373 *lens_ipow(y, 2)*dx*dy + 0.0850036 *x*dy*lens_ipow(lambda, 2) + -0.0829214 *x*lens_ipow(dx, 2)*dy + -0.00213636 *x*y*lens_ipow(dx, 2) + -0.00288221 *lens_ipow(x, 2)*dx*dy + -2.83239e-05 *lens_ipow(x, 3)*dy + -0.00265032 *x*y*lens_ipow(dy, 2)*lambda + 2.66853e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + 149.809 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 371.407 *dx*lens_ipow(dy, 7)*lens_ipow(lambda, 2)+0.0f;
const double dx24 =  + -0.383611 *dx*lens_ipow(dy, 2) + -0.0499982 *x*lens_ipow(dy, 2) + -4.36029e-06 *x*lens_ipow(y, 2) + -3.82615e-06 *lens_ipow(x, 3) + 0.0850036 *x*lens_ipow(dy, 2)*lambda + -0.000883438 *x*y*lens_ipow(dy, 3) + -0.000265236 *x*lens_ipow(y, 2)*lens_ipow(dx, 4) + -1.2949e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3) + 74.9047 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda + 92.8518 *dx*lens_ipow(dy, 8)*lambda+0.0f;
const double dx30 =  + 0.0250628 *dx*dy + -7.86144e-05 *y*dx + 0.000331839 *x*dy + 1.2959e-05 *x*y + 0.0441461 *dx*lens_ipow(dy, 3) + 0.00078501 *x*lens_ipow(dy, 3) + 6.93776e-07 *x*lens_ipow(y, 2)*dy + 2.59159e-08 *x*lens_ipow(y, 3) + 2.95005e-08 *lens_ipow(x, 3)*y + -0.00184302 *y*lens_ipow(dx, 3)*lambda + -0.00011876 *x*y*lens_ipow(dx, 2)*lambda+0.0f;
const double dx31 =  + -0.0213552  + -0.000953858 *lambda + -0.00562527 *lens_ipow(dy, 2) + -0.000275027 *y*dy + 1.67392e-05 *lens_ipow(y, 2) + -7.86144e-05 *x*dx + 6.4795e-06 *lens_ipow(x, 2) + -0.0316259 *lens_ipow(dx, 2)*lambda + 0.0323894 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.00173593 *y*lens_ipow(dy, 3) + 2.29734e-06 *lens_ipow(y, 3)*dy + 4.47686e-08 *lens_ipow(y, 4) + 6.93776e-07 *lens_ipow(x, 2)*y*dy + 3.88738e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 7.37512e-09 *lens_ipow(x, 4) + 0.091903 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -9.20413e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.00184302 *x*lens_ipow(dx, 3)*lambda + -5.93801e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx32 =  + 2.51713 *dx*dy + 0.0250628 *x*dy + -7.86144e-05 *x*y + -0.0632518 *y*dx*lambda + 4.33733 *dx*lens_ipow(dy, 3) + 0.0647787 *y*dx*lens_ipow(lambda, 2) + 0.0441461 *x*lens_ipow(dy, 3) + 0.183806 *y*dx*lens_ipow(dy, 2)*lambda + -6.13609e-05 *lens_ipow(y, 3)*dx*lambda + -0.00552907 *x*y*lens_ipow(dx, 2)*lambda + -0.00011876 *lens_ipow(x, 2)*y*dx*lambda+0.0f;
const double dx33 =  + -1.1905  + 1.33599 *lens_ipow(dy, 2) + 1.25857 *lens_ipow(dx, 2) + -0.0112505 *y*dy + -0.000137513 *lens_ipow(y, 2) + 0.0250628 *x*dx + 0.00016592 *lens_ipow(x, 2) + 3.31877 *lens_ipow(dy, 4) + 6.506 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.0026039 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 5.74335e-07 *lens_ipow(y, 4) + 0.132438 *x*dx*lens_ipow(dy, 2) + 0.00117752 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 3.46888e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.183806 *y*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx34 =  + -0.000953858 *y + -0.0316259 *y*lens_ipow(dx, 2) + 0.0647787 *y*lens_ipow(dx, 2)*lambda + 0.091903 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -3.06804e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.00184302 *x*y*lens_ipow(dx, 3) + -5.93801e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)+0.0f;
const double dx40 =  + -0.0522876 *dx*lens_ipow(dy, 2) + -0.000714165 *y*dx*dy + -0.00107306 *x*lens_ipow(dy, 2) + -3.75196e-05 *x*y*dy + -4.57081e-07 *x*lens_ipow(y, 2) + -4.67467e-05 *lens_ipow(x, 2)*dx + -0.0970086 *lens_ipow(dx, 3)*lambda + -0.00212115 *y*dx*dy*lambda + -3.28219e-05 *lens_ipow(y, 2)*dx*lambda + -0.00560501 *x*lens_ipow(dx, 2)*lambda + -2.18445e-09 *lens_ipow(x, 5) + -4.06558e-07 *lens_ipow(x, 4)*dx*lens_ipow(lambda, 3)+0.0f;
const double dx41 =  + -0.0526484 *lens_ipow(dy, 3) + -0.00295004 *y*lens_ipow(dy, 2) + -5.44983e-05 *lens_ipow(y, 2)*dy + -3.73011e-07 *lens_ipow(y, 3) + -0.000714165 *x*dx*dy + -1.87598e-05 *lens_ipow(x, 2)*dy + -4.57081e-07 *lens_ipow(x, 2)*y + -0.0910372 *lens_ipow(dx, 2)*dy*lambda + -0.0017758 *y*lens_ipow(dx, 2)*lambda + -0.00212115 *x*dx*dy*lambda + -6.56438e-05 *x*y*dx*lambda+0.0f;
const double dx42 =  + -3.63598 *dx*lens_ipow(dy, 2) + -2.94459 *lens_ipow(dx, 3) + -0.0522876 *x*lens_ipow(dy, 2) + -0.000714165 *x*y*dy + -1.55822e-05 *lens_ipow(x, 3) + -0.182074 *y*dx*dy*lambda + -0.0017758 *lens_ipow(y, 2)*dx*lambda + -0.291026 *x*lens_ipow(dx, 2)*lambda + -0.00212115 *x*y*dy*lambda + -3.28219e-05 *x*lens_ipow(y, 2)*lambda + -0.00560501 *lens_ipow(x, 2)*dx*lambda + -25.7525 *lens_ipow(dx, 5)*lens_ipow(lambda, 2) + -8.13116e-08 *lens_ipow(x, 5)*lens_ipow(lambda, 3) + -437.371 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx43 =  + -3.10143 *lens_ipow(dy, 3) + -3.63598 *lens_ipow(dx, 2)*dy + -0.157945 *y*lens_ipow(dy, 2) + -0.00295004 *lens_ipow(y, 2)*dy + -1.81661e-05 *lens_ipow(y, 3) + -0.104575 *x*dx*dy + -0.000714165 *x*y*dx + -0.00107306 *lens_ipow(x, 2)*dy + -1.87598e-05 *lens_ipow(x, 2)*y + -0.0910372 *y*lens_ipow(dx, 2)*lambda + -0.00212115 *x*y*dx*lambda + -6.88129 *lens_ipow(dy, 5) + -437.371 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx44 =  + 0.703543  + -1.93822 *lambda + 1.41033 *lens_ipow(lambda, 2) + -0.0910372 *y*lens_ipow(dx, 2)*dy + -0.000887901 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0970086 *x*lens_ipow(dx, 3) + -0.00212115 *x*y*dx*dy + -3.28219e-05 *x*lens_ipow(y, 2)*dx + -0.0028025 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -8.58415 *lens_ipow(dx, 6)*lambda + -2.43935e-07 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 2) + -218.685 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lambda+0.0f;
} break;
