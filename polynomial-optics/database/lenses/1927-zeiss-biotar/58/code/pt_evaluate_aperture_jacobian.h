case zeiss__biotar__1927__58mm:
{
const double dx00 =  + 0.432266  + 0.173489 *lambda + -0.121485 *lens_ipow(lambda, 2) + -0.211797 *lens_ipow(dy, 2) + -0.397613 *lens_ipow(dx, 2) + -0.00545491 *y*dy + -0.000172719 *lens_ipow(y, 2) + -0.00645392 *x*dx + -0.000354847 *lens_ipow(x, 2) + -3.51758e-05 *x*lens_ipow(y, 2)*dx + -0.00171596 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -8.78684e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -8.9339e-05 *lens_ipow(x, 3)*dx + -1.45617e-06 *lens_ipow(x, 4) + 0.0667704 *y*lens_ipow(dx, 2)*dy*lambda + -4.30213e-05 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 2) + -1.24876e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -3.37635e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 23.5194 *lens_ipow(dx, 2)*lens_ipow(dy, 6)+0.0f;
const double dx01 =  + -0.211488 *dx*dy + -0.00166012 *y*dx + -0.00545491 *x*dy + -0.000345437 *x*y + -0.535554 *dx*lens_ipow(dy, 3) + -3.51758e-05 *lens_ipow(x, 2)*y*dx + -5.8579e-07 *lens_ipow(x, 3)*y + 0.0667704 *x*lens_ipow(dx, 2)*dy*lambda + -1.43404e-05 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 2) + -1.24876e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -4.5018e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.000153015 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lambda+0.0f;
const double dx02 =  + 35.1489  + 7.45465 *lambda + -5.14858 *lens_ipow(lambda, 2) + -22.9437 *lens_ipow(dy, 2) + -66.8746 *lens_ipow(dx, 2) + -0.211488 *y*dy + -0.000830058 *lens_ipow(y, 2) + -0.795227 *x*dx + -0.00322696 *lens_ipow(x, 2) + -0.535554 *y*lens_ipow(dy, 3) + -1.75879e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00114398 *lens_ipow(x, 3)*dx + -2.23348e-05 *lens_ipow(x, 4) + 0.133541 *x*y*dx*dy*lambda + -0.000114761 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda + 47.0388 *x*dx*lens_ipow(dy, 6)+0.0f;
const double dx03 =  + -45.8874 *dx*dy + -0.211488 *y*dx + -0.423595 *x*dy + -0.00545491 *x*y + -1.60666 *y*dx*lens_ipow(dy, 2) + 0.0667704 *x*y*lens_ipow(dx, 2)*lambda + -1.43404e-05 *lens_ipow(x, 3)*y*lens_ipow(lambda, 2) + -4.16252e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 141.116 *x*lens_ipow(dx, 2)*lens_ipow(dy, 5)+0.0f;
const double dx04 =  + 7.45465 *dx + 0.173489 *x + -10.2972 *dx*lambda + -0.242969 *x*lambda + 0.0667704 *x*y*lens_ipow(dx, 2)*dy + -2.86809e-05 *lens_ipow(x, 3)*y*dy*lambda + -3.82538e-05 *lens_ipow(y, 4)*lens_ipow(dx, 3)+0.0f;
const double dx10 =  + -0.00228096 *x*dy + -0.000254297 *x*y + -0.602487 *dx*dy*lambda + -0.014519 *y*dx*lambda + 0.036497 *y*dx*lens_ipow(dy, 2) + 0.0467102 *x*lens_ipow(dx, 2)*dy + -3.24998e-05 *x*lens_ipow(y, 2)*dy + -1.03689e-06 *x*lens_ipow(y, 3) + 0.00106265 *lens_ipow(x, 2)*dx*dy + -8.66219e-07 *lens_ipow(x, 3)*y + 0.0211471 *y*dx*lens_ipow(lambda, 3) + -1.97264e-05 *lens_ipow(y, 3)*dx*lambda + -4.15467e-05 *lens_ipow(x, 2)*y*dx*lambda + 0.859791 *dx*dy*lens_ipow(lambda, 4) + 0.0111531 *x*y*lens_ipow(dy, 6)+0.0f;
const double dx11 =  + 0.466997  + 0.040883 *lambda + -0.416494 *lens_ipow(dy, 2) + -0.204649 *lens_ipow(dx, 2) + -0.00939971 *y*dy + -0.000385155 *lens_ipow(y, 2) + -0.000127148 *lens_ipow(x, 2) + -0.014519 *x*dx*lambda + 0.0330532 *y*lens_ipow(dy, 3) + -5.3054e-05 *lens_ipow(y, 3)*dy + -1.20119e-06 *lens_ipow(y, 4) + 0.036497 *x*dx*lens_ipow(dy, 2) + -3.24998e-05 *lens_ipow(x, 2)*y*dy + -1.55534e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.16555e-07 *lens_ipow(x, 4) + 0.0211471 *x*dx*lens_ipow(lambda, 3) + -5.91793e-05 *x*lens_ipow(y, 2)*dx*lambda + -1.38489e-05 *lens_ipow(x, 3)*dx*lambda + 0.00557656 *lens_ipow(x, 2)*lens_ipow(dy, 6)+0.0f;
const double dx12 =  + -46.7904 *dx*dy + -0.409297 *y*dx + -0.602487 *x*dy*lambda + -0.014519 *x*y*lambda + 0.036497 *x*y*lens_ipow(dy, 2) + 0.0467102 *lens_ipow(x, 2)*dx*dy + 0.000354216 *lens_ipow(x, 3)*dy + 0.0211471 *x*y*lens_ipow(lambda, 3) + -1.97264e-05 *x*lens_ipow(y, 3)*lambda + -1.38489e-05 *lens_ipow(x, 3)*y*lambda + 0.859791 *x*dy*lens_ipow(lambda, 4)+0.0f;
const double dx13 =  + 36.7124  + 1.81549 *lambda + -68.8127 *lens_ipow(dy, 2) + -23.3952 *lens_ipow(dx, 2) + -0.832988 *y*dy + -0.00469986 *lens_ipow(y, 2) + -0.00114048 *lens_ipow(x, 2) + -0.602487 *x*dx*lambda + 0.0495798 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.32635e-05 *lens_ipow(y, 4) + 0.072994 *x*y*dx*dy + 0.0233551 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -1.62499e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.000354216 *lens_ipow(x, 3)*dx + 0.859791 *x*dx*lens_ipow(lambda, 4) + 0.0334593 *lens_ipow(x, 2)*y*lens_ipow(dy, 5)+0.0f;
const double dx14 =  + 1.81549 *dy + 0.040883 *y + -0.602487 *x*dx*dy + -0.014519 *x*y*dx + 0.0634413 *x*y*dx*lens_ipow(lambda, 2) + -1.97264e-05 *x*lens_ipow(y, 3)*dx + -1.38489e-05 *lens_ipow(x, 3)*y*dx + 3.43916 *x*dx*dy*lens_ipow(lambda, 3)+0.0f;
const double dx20 =  + -0.0227245  + 0.00687204 *lambda + -0.00487729 *lens_ipow(lambda, 2) + -0.00922672 *lens_ipow(dy, 2) + -0.0263168 *lens_ipow(dx, 2) + -0.000163467 *y*dy + -9.97029e-06 *lens_ipow(y, 2) + -2.76582e-05 *lens_ipow(x, 2) + -0.00208227 *x*dx*lambda + 0.00183275 *x*dx*lens_ipow(lambda, 2) + -5.99009e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -4.81694e-08 *lens_ipow(x, 4) + -2.96752e-11 *lens_ipow(y, 6) + -5.46513e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.6717e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -2.43992e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + -1.06558e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + 1.1473e-09 *lens_ipow(x, 5)*y*dx*dy + -4.49156e-15 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const double dx21 =  + -0.0168216 *dx*dy + -0.000243029 *y*dx + -0.000163467 *x*dy + -1.99406e-05 *x*y + -3.9934e-08 *lens_ipow(x, 3)*y + -1.78051e-10 *x*lens_ipow(y, 5) + -3.64342e-07 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + -1.21996e-08 *lens_ipow(x, 4)*y*dx*lambda + -1.06558e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 1.91217e-10 *lens_ipow(x, 6)*dx*dy + -25.1971 *lens_ipow(dx, 3)*lens_ipow(dy, 7) + -2.5666e-15 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const double dx22 =  + 0.479392  + -0.0297226 *lambda + -0.223243 *lens_ipow(dy, 2) + -0.875188 *lens_ipow(dx, 2) + -0.0168216 *y*dy + -0.000121514 *lens_ipow(y, 2) + -0.0526337 *x*dx + -0.00104114 *lens_ipow(x, 2)*lambda + 0.000916374 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 57.0911 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 24.7093 *lens_ipow(dx, 6) + -3.64342e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -6.09981e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + 1.91217e-10 *lens_ipow(x, 6)*y*dy + -75.5914 *y*lens_ipow(dx, 2)*lens_ipow(dy, 7)+0.0f;
const double dx23 =  + -0.446486 *dx*dy + -0.0168216 *y*dx + -0.0184534 *x*dy + -0.000163467 *x*y + 22.8365 *lens_ipow(dx, 5)*dy + -6.68682e-08 *lens_ipow(x, 5)*dy + -3.55193e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 2) + 1.91217e-10 *lens_ipow(x, 6)*y*dx + -176.38 *y*lens_ipow(dx, 3)*lens_ipow(dy, 6)+0.0f;
const double dx24 =  + -0.0297226 *dx + 0.00687204 *x + -0.00975459 *x*lambda + -0.00104114 *lens_ipow(x, 2)*dx + 0.00183275 *lens_ipow(x, 2)*dx*lambda + -6.09981e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx + -7.10386e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy*lambda+0.0f;
const double dx30 =  + -0.0148795 *dx*dy + -0.000148897 *y*dx + -1.95311e-05 *x*y + -0.000431188 *x*dy*lambda + 0.0011623 *y*dx*lens_ipow(dy, 2) + 3.32433e-05 *lens_ipow(y, 2)*dx*dy + -3.85979e-08 *x*lens_ipow(y, 3) + -0.112777 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + -1.56785e-10 *lens_ipow(x, 5)*y + -1.34773e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(lambda, 2) + -1.35485e-06 *lens_ipow(x, 3)*y*lens_ipow(dy, 4) + -6.9329e-13 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const double dx31 =  + -0.023279  + 0.00864086 *lambda + -0.00661105 *lens_ipow(lambda, 2) + -0.0233253 *lens_ipow(dy, 2) + -0.00796186 *lens_ipow(dx, 2) + -2.3311e-05 *lens_ipow(y, 2) + -0.000148897 *x*dx + -9.76553e-06 *lens_ipow(x, 2) + -0.000781992 *y*dy*lambda + -4.13548e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.91075e-06 *lens_ipow(y, 3)*dy + -7.01731e-08 *lens_ipow(y, 4) + 0.0011623 *x*dx*lens_ipow(dy, 2) + 6.64865e-05 *x*y*dx*dy + -5.78968e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.000107021 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -2.61308e-11 *lens_ipow(x, 6) + -1.34773e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -3.38712e-07 *lens_ipow(x, 4)*lens_ipow(dy, 4) + -8.66613e-13 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx32 =  + -0.0159237 *y*dx + -0.0148795 *x*dy + -0.000148897 *x*y + -0.956052 *dx*dy*lambda + -2.75699e-05 *lens_ipow(y, 3)*dx + 0.0011623 *x*y*lens_ipow(dy, 2) + 3.32433e-05 *x*lens_ipow(y, 2)*dy + 5.84331 *dx*lens_ipow(dy, 3)*lambda + -0.338332 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -4.49244e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx33 =  + 0.463472  + -1.07396 *lens_ipow(dy, 2) + -0.0466506 *y*dy + -0.0148795 *x*dx + -0.478026 *lens_ipow(dx, 2)*lambda + -0.000390996 *lens_ipow(y, 2)*lambda + -0.000215594 *lens_ipow(x, 2)*lambda + 5.26733 *lens_ipow(dy, 4) + -4.77688e-07 *lens_ipow(y, 4) + 0.0023246 *x*y*dx*dy + 3.32433e-05 *x*lens_ipow(y, 2)*dx + 8.76496 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -7.13473e-05 *lens_ipow(y, 3)*dy*lambda + -0.112777 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -1.35485e-06 *lens_ipow(x, 4)*y*lens_ipow(dy, 3)+0.0f;
const double dx34 =  + 0.00864086 *y + -0.0132221 *y*lambda + -0.478026 *lens_ipow(dx, 2)*dy + -0.000390996 *lens_ipow(y, 2)*dy + -0.000215594 *lens_ipow(x, 2)*dy + 2.92165 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -3.56736e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.225555 *x*lens_ipow(dx, 3)*dy*lambda + -8.98489e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*lambda+0.0f;
const double dx40 =  + -0.000239983 *dx + -0.00879357 *dx*lens_ipow(dy, 2) + -0.00906212 *lens_ipow(dx, 3) + -1.61234e-07 *x*lens_ipow(y, 2) + -1.52346e-07 *lens_ipow(x, 3) + 1.08087e-07 *x*lens_ipow(y, 2)*lambda + -0.00330334 *x*lens_ipow(dy, 6) + 8.87423e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -2.63427e-12 *lens_ipow(x, 3)*lens_ipow(y, 4) + 0.125714 *y*lens_ipow(dx, 3)*lens_ipow(dy, 5) + 3.59119e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const double dx41 =  + -0.0117579 *lens_ipow(dy, 3) + -0.0102295 *lens_ipow(dx, 2)*dy + -1.59906e-07 *lens_ipow(y, 3) + -1.61234e-07 *lens_ipow(x, 2)*y + -0.000321924 *y*lens_ipow(dy, 2)*lambda + -9.46997e-06 *lens_ipow(y, 2)*dy*lambda + 1.08087e-07 *lens_ipow(x, 2)*y*lambda + -4.70107e-06 *lens_ipow(y, 3)*lens_ipow(dx, 4) + 8.87423e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -2.63427e-12 *lens_ipow(x, 4)*lens_ipow(y, 3) + 0.125714 *x*lens_ipow(dx, 3)*lens_ipow(dy, 5) + 5.38678e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const double dx42 =  + -0.000239983 *x + -1.98185 *dx*lens_ipow(dy, 2) + -2.08067 *lens_ipow(dx, 3) + -0.0204589 *y*dx*dy + -0.00879357 *x*lens_ipow(dy, 2) + -0.0271864 *x*lens_ipow(dx, 2) + -6.72903 *dx*lens_ipow(dy, 4) + -12.2274 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -5.4184 *lens_ipow(dx, 5) + -4.70107e-06 *lens_ipow(y, 4)*lens_ipow(dx, 3) + 2.95808e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + 0.377141 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 5) + 3.59119e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 3)+0.0f;
const double dx43 =  + -1.96561 *lens_ipow(dy, 3) + -1.98185 *lens_ipow(dx, 2)*dy + -0.0352738 *y*lens_ipow(dy, 2) + -0.0102295 *y*lens_ipow(dx, 2) + -0.0175871 *x*dx*dy + -0.000321924 *lens_ipow(y, 2)*dy*lambda + -3.15666e-06 *lens_ipow(y, 3)*lambda + -6.33794 *lens_ipow(dy, 5) + -13.4581 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -6.1137 *lens_ipow(dx, 4)*dy + -0.00991002 *lens_ipow(x, 2)*lens_ipow(dy, 5) + 2.95808e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + 0.628568 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 4) + 5.38678e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx44 =  + 0.50033  + -1.38289 *lambda + 1.00779 *lens_ipow(lambda, 2) + -0.000160962 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -3.15666e-06 *lens_ipow(y, 3)*dy + 5.40434e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)+0.0f;
} break;
