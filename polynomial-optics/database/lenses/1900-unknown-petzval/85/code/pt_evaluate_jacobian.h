case unknown__petzval__1900__85mm:
{
const double dx00 =  + 0.454088  + 0.59228 *lambda + 0.0214508 *y*dy + 0.0538487 *x*dx + -0.818791 *lens_ipow(lambda, 2) + 0.000177113 *lens_ipow(y, 2) + 0.000472806 *lens_ipow(x, 2) + 0.409904 *lens_ipow(dy, 2) + 0.334909 *lens_ipow(dx, 2) + 0.397003 *lens_ipow(lambda, 3) + 8.74322e-06 *lens_ipow(y, 2)*lambda + 2.09557e-05 *lens_ipow(x, 2)*lambda + 0.000174476 *lens_ipow(x, 3)*dx + 0.105017 *x*lens_ipow(dx, 3) + 1.24938e-06 *lens_ipow(x, 4) + 0.00774843 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 3.65283e-06 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + 7.27924e-14 *lens_ipow(x, 6)*lens_ipow(y, 4) + -3.58028e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -3.32666e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy + 1.7462e-12 *lens_ipow(x, 5)*lens_ipow(y, 4)*dx+0.0f;
const double dx01 =  + 0.0214508 *x*dy + 0.000354226 *x*y + 0.0153676 *y*dx + 1.74864e-05 *x*y*lambda + 3.65283e-06 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2) + 4.15956e-14 *lens_ipow(x, 7)*lens_ipow(y, 3) + -1.79014e-05 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -1.66333e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx*dy + 1.16414e-12 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx+0.0f;
const double dx02 =  + 77.1309  + 31.296 *lambda + 0.0269243 *lens_ipow(x, 2) + -168.656 *lens_ipow(dx, 2) + -55.2151 *lens_ipow(dy, 2) + 0.669817 *x*dx + 0.00768378 *lens_ipow(y, 2) + -42.9963 *lens_ipow(lambda, 2) + 20.7679 *lens_ipow(lambda, 3) + 4.3619e-05 *lens_ipow(x, 4) + 0.157526 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00516562 *lens_ipow(x, 3)*dx + 1.82642e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -2.68521e-05 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -5.54443e-11 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy + 2.91034e-13 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const double dx03 =  + 0.0214508 *x*y + -110.43 *dx*dy + 0.819809 *x*dy + -1.79014e-05 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + -5.54443e-11 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx+0.0f;
const double dx04 =  + 0.59228 *x + 31.296 *dx + -1.63758 *x*lambda + -85.9927 *dx*lambda + 62.3036 *dx*lens_ipow(lambda, 2) + 1.19101 *x*lens_ipow(lambda, 2) + 8.74322e-06 *x*lens_ipow(y, 2) + 6.98523e-06 *lens_ipow(x, 3) + 3.65283e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lambda+0.0f;
const double dx10 =  + 0.0214208 *y*dx + 0.000358338 *x*y + 0.0154043 *x*dy + 1.00682e-05 *x*y*lambda + 9.35048e-09 *x*lens_ipow(y, 4)*dy + -5.39568e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 4) + 2.88488e-11 *x*lens_ipow(y, 7)*lens_ipow(dx, 2) + -2.26423e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx*dy + 3.78551e-14 *lens_ipow(x, 3)*lens_ipow(y, 7) + 3.17946 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 5)+0.0f;
const double dx11 =  + 0.453986  + 0.590498 *lambda + 0.408793 *lens_ipow(dx, 2) + 0.058649 *y*dy + 0.436343 *lens_ipow(dy, 2) + 0.0214208 *x*dx + -0.815614 *lens_ipow(lambda, 2) + 0.000179169 *lens_ipow(x, 2) + 0.000535687 *lens_ipow(y, 2) + -0.0235675 *lens_ipow(dy, 2)*lambda + 0.395174 *lens_ipow(lambda, 3) + 2.80629e-05 *lens_ipow(y, 2)*lambda + 5.03411e-06 *lens_ipow(x, 2)*lambda + 1.13466e-06 *lens_ipow(y, 3)*dy + 1.8701e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -8.09351e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4) + 1.00971e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*lens_ipow(dx, 2) + -4.52847e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy + 6.62464e-14 *lens_ipow(x, 4)*lens_ipow(y, 6) + 6.35891 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 5)+0.0f;
const double dx12 =  + 0.817586 *y*dx + 0.0214208 *x*y + -110.64 *dx*dy + -1.07914e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 3) + 2.88488e-11 *lens_ipow(x, 2)*lens_ipow(y, 7)*dx + 1.23473e+06 *lens_ipow(dx, 3)*lens_ipow(dy, 7) + -7.54745e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy + 9.53837 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 5)+0.0f;
const double dx13 =  + 77.1077  + 31.4081 *lambda + 0.0293245 *lens_ipow(y, 2) + 0.872687 *y*dy + -55.3199 *lens_ipow(dx, 2) + -43.2699 *lens_ipow(lambda, 2) + 0.00770216 *lens_ipow(x, 2) + -165.037 *lens_ipow(dy, 2) + -0.0471349 *y*dy*lambda + 20.9473 *lens_ipow(lambda, 3) + 2.83665e-07 *lens_ipow(y, 4) + 4.67524e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 2.16077e+06 *lens_ipow(dx, 4)*lens_ipow(dy, 6) + -7.54745e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx + 15.8973 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 4)+0.0f;
const double dx14 =  + 31.4081 *dy + 0.590498 *y + -1.63123 *y*lambda + -86.5397 *dy*lambda + -0.0235675 *y*lens_ipow(dy, 2) + 1.18552 *y*lens_ipow(lambda, 2) + 62.8419 *dy*lens_ipow(lambda, 2) + 9.35429e-06 *lens_ipow(y, 3) + 5.03411e-06 *lens_ipow(x, 2)*y+0.0f;
const double dx20 =  + -0.0229909  + -0.000609063 *lambda + -0.000664524 *y*dy + -0.000682946 *x*dx + 0.000455632 *lens_ipow(lambda, 2) + -2.93278e-06 *lens_ipow(y, 2) + -3.84163e-06 *lens_ipow(x, 2) + -0.0254622 *lens_ipow(dy, 2) + -0.00281935 *lens_ipow(dx, 2)*lambda + -5.36391e-07 *lens_ipow(x, 3)*dx*lambda + -7.64371e-09 *lens_ipow(x, 4)*lambda + -0.0146742 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.000203128 *x*y*lens_ipow(dx, 3)*dy*lambda + -1.64013e-11 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda+0.0f;
const double dx21 =  + -0.0360606 *dx*dy + -0.000664524 *x*dy + -5.86556e-06 *x*y + -0.000448084 *y*dx + -0.0146742 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.000101564 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy*lambda + 0.000177365 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lambda + -2.18684e-11 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda+0.0f;
const double dx22 =  + -1.66455  + 0.212594 *lambda + -0.0360606 *y*dy + -0.000341473 *lens_ipow(x, 2) + 2.92165 *lens_ipow(dx, 2) + -1.16931 *lens_ipow(dy, 2) + -0.000224042 *lens_ipow(y, 2) + -0.313753 *lens_ipow(lambda, 2) + -0.0056387 *x*dx*lambda + 0.165033 *lens_ipow(lambda, 3) + -0.516459 *lens_ipow(dx, 2)*lambda + 5.24565 *lens_ipow(dx, 4) + -1.34098e-07 *lens_ipow(x, 4)*lambda + -0.0293484 *x*y*dx*lens_ipow(dy, 3) + 199.717 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 112.716 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 10.3113 *lens_ipow(dy, 6) + 0.000304691 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lambda + 5.91217e-05 *lens_ipow(y, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx23 =  + -0.0360606 *y*dx + -0.000664524 *x*y + -2.33862 *dx*dy + -0.0509245 *x*dy + -0.0440227 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 266.289 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 45.0863 *lens_ipow(dx, 5)*dy + 61.8676 *dx*lens_ipow(dy, 5) + 0.000101564 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lambda + 0.000177365 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx24 =  + -0.000609063 *x + 0.212594 *dx + 0.000911263 *x*lambda + -0.627507 *dx*lambda + -0.00281935 *x*lens_ipow(dx, 2) + 0.495099 *dx*lens_ipow(lambda, 2) + -0.172153 *lens_ipow(dx, 3) + -1.34098e-07 *lens_ipow(x, 4)*dx + -1.52874e-09 *lens_ipow(x, 5) + 0.000101564 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*dy + 5.91217e-05 *lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + -5.46709e-12 *lens_ipow(x, 3)*lens_ipow(y, 4)+0.0f;
const double dx30 =  + 0.0555798 *dx*dy + 7.10653e-07 *x*y + 0.00240334 *x*dy*lambda + -0.0284935 *lens_ipow(dx, 3)*dy + -0.00432315 *x*dy*lens_ipow(lambda, 2) + 7.48553e-06 *lens_ipow(x, 2)*dx*dy + 0.00259949 *x*dy*lens_ipow(lambda, 3) + 1.05286e-05 *lens_ipow(y, 2)*dx*dy*lambda + 1.37693e-07 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx31 =  + -0.0229683  + -0.000715456 *lambda + 0.00445966 *lens_ipow(dx, 2) + -0.000637749 *y*dy + 0.000562722 *lens_ipow(lambda, 2) + 3.55327e-07 *lens_ipow(x, 2) + -3.47775e-06 *lens_ipow(y, 2) + 0.0060437 *lens_ipow(dx, 4) + -5.91053e-07 *lens_ipow(y, 3)*dy*lambda + -7.91873e-09 *lens_ipow(y, 4)*lambda + 2.10571e-05 *x*y*dx*dy*lambda + 4.13079e-07 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -0.00487297 *lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx32 =  + 0.00891932 *y*dx + 0.0555798 *x*dy + 6.12436 *dx*dy + -0.299522 *dx*dy*lambda + -0.0854805 *x*lens_ipow(dx, 2)*dy + 4.66507 *dx*lens_ipow(dy, 3) + 0.0241748 *y*lens_ipow(dx, 3) + 2.49518e-06 *lens_ipow(x, 3)*dy + 1.05286e-05 *x*lens_ipow(y, 2)*dy*lambda + 1.37693e-07 *x*lens_ipow(y, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx33 =  + -1.639  + 0.0662049 *lambda + -0.000318875 *lens_ipow(y, 2) + 0.0555798 *x*dx + 3.06218 *lens_ipow(dx, 2) + -0.0411715 *lens_ipow(lambda, 2) + 2.75352 *lens_ipow(dy, 2) + -0.149761 *lens_ipow(dx, 2)*lambda + 0.00120167 *lens_ipow(x, 2)*lambda + -0.0284935 *x*lens_ipow(dx, 3) + 6.9976 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 5.91951 *lens_ipow(dy, 4) + -0.00216157 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 2.49518e-06 *lens_ipow(x, 3)*dx + -0.67137 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -1.47763e-07 *lens_ipow(y, 4)*lambda + 0.00129974 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 1.05286e-05 *x*lens_ipow(y, 2)*dx*lambda + -0.00974593 *y*dy*lens_ipow(lambda, 4)+0.0f;
const double dx34 =  + 0.0662049 *dy + -0.000715456 *y + 0.00112544 *y*lambda + -0.082343 *dy*lambda + -0.149761 *lens_ipow(dx, 2)*dy + 0.00120167 *lens_ipow(x, 2)*dy + -0.00432315 *lens_ipow(x, 2)*dy*lambda + -0.67137 *lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -1.47763e-07 *lens_ipow(y, 4)*dy + -1.58375e-09 *lens_ipow(y, 5) + 0.00389923 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 2) + 1.05286e-05 *x*lens_ipow(y, 2)*dx*dy + 2.75386e-07 *x*lens_ipow(y, 3)*dx*lambda + -0.0194919 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx40 =  + -1.49654e-05 *x*y*dy + -7.43305e-06 *lens_ipow(y, 2)*dx + -3.91501e-07 *x*lens_ipow(y, 2) + -0.000537731 *x*lens_ipow(dx, 2) + -3.01815e-05 *lens_ipow(x, 2)*dx + 0.0123624 *dx*lens_ipow(dy, 2) + -4.07805e-07 *lens_ipow(x, 3) + -0.000192304 *dx*lens_ipow(lambda, 2) + -0.000118034 *x*y*lens_ipow(dy, 5) + -2.47628e-12 *lens_ipow(x, 3)*lens_ipow(y, 4) + 6.43865e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -1.06346e-12 *lens_ipow(x, 7) + -1.84845e-13 *lens_ipow(x, 8)*dx + -4.3438e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 3)*lambda+0.0f;
const double dx41 =  + 2.14502e-06 *y*lambda + -7.48269e-06 *lens_ipow(x, 2)*dy + -1.48661e-05 *x*y*dx + -3.91501e-07 *lens_ipow(x, 2)*y + -4.19527e-07 *lens_ipow(y, 3) + 0.0116643 *lens_ipow(dx, 2)*dy + -0.000611531 *y*lens_ipow(dy, 2) + -3.2722e-05 *lens_ipow(y, 2)*dy + -2.30609e-10 *lens_ipow(y, 5) + -5.9017e-05 *lens_ipow(x, 2)*lens_ipow(dy, 5) + -2.47628e-12 *lens_ipow(x, 4)*lens_ipow(y, 3) + 6.43865e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + 1.5931e-09 *lens_ipow(y, 5)*lens_ipow(dy, 2) + -5.79173e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 3)*lambda+0.0f;
const double dx42 =  + 0.776537 *dx*lens_ipow(dy, 2) + -7.43305e-06 *x*lens_ipow(y, 2) + -0.000537731 *lens_ipow(x, 2)*dx + 0.0233286 *y*dx*dy + -1.00605e-05 *lens_ipow(x, 3) + 0.0123624 *x*lens_ipow(dy, 2) + -0.000192304 *x*lens_ipow(lambda, 2) + -0.0248427 *dx*lens_ipow(lambda, 3) + 2.14622e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -2.05383e-14 *lens_ipow(x, 9) + -4.3438e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx43 =  + 0.776537 *lens_ipow(dx, 2)*dy + -7.48269e-06 *lens_ipow(x, 2)*y + 0.0116643 *y*lens_ipow(dx, 2) + -0.000611531 *lens_ipow(y, 2)*dy + 0.0247249 *x*dx*dy + -1.09073e-05 *lens_ipow(y, 3) + -0.000295085 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + 2.14622e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + 5.31033e-10 *lens_ipow(y, 6)*dy+0.0f;
const double dx44 =  + 0.842987  + -3.51743 *lambda + 1.07251e-06 *lens_ipow(y, 2) + 5.17399 *lens_ipow(lambda, 2) + -2.62065 *lens_ipow(lambda, 3) + -0.000384609 *x*dx*lambda + -0.0372641 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -1.44793e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 3)+0.0f;
} break;
