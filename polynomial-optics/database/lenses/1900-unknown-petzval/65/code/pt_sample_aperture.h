case unknown__petzval__1900__65mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 49.5899 *begin_dx + 0.759924 *begin_x + 3.1298 *begin_dx*begin_lambda + 0.120695 *begin_x*begin_lambda + 0.515988 *begin_y*begin_dx*begin_dy + 0.00889992 *lens_ipow(begin_y, 2)*begin_dx + -0.0835724 *begin_x*lens_ipow(begin_lambda, 2) + 0.11357 *begin_x*lens_ipow(begin_dy, 2) + 0.604841 *begin_x*lens_ipow(begin_dx, 2) + 0.0129187 *begin_x*begin_y*begin_dy + 0.000157296 *begin_x*lens_ipow(begin_y, 2) + 0.0208795 *lens_ipow(begin_x, 2)*begin_dx + 0.000141571 *lens_ipow(begin_x, 3) + -2.06405 *begin_dx*lens_ipow(begin_lambda, 3) + 7.92678e-06 *lens_ipow(begin_x, 3)*begin_lambda + -7.7508e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.000564161 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + 2.35158e-06 *lens_ipow(begin_x, 3)*begin_y*begin_dy + 2.33614e-05 *lens_ipow(begin_x, 4)*begin_dx + 2.31805e-07 *lens_ipow(begin_x, 5) + 1.72681e-08 *begin_x*lens_ipow(begin_y, 4)*begin_lambda + 5.20658 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + -6.40788e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda + 1.59467e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_lambda + -2803.02 *lens_ipow(begin_dx, 7)*lens_ipow(begin_dy, 2) + 0.00639312 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 0.000657857 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 4)*begin_dy + 9.15569e-13 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2);
  pred_y =  + 49.5894 *begin_dy + 0.760162 *begin_y + 3.13797 *begin_dy*begin_lambda + 0.119797 *begin_y*begin_lambda + -0.0827452 *begin_y*lens_ipow(begin_lambda, 2) + 0.610543 *begin_y*lens_ipow(begin_dy, 2) + 0.113264 *begin_y*lens_ipow(begin_dx, 2) + 0.0210479 *lens_ipow(begin_y, 2)*begin_dy + 0.000146743 *lens_ipow(begin_y, 3) + 0.516508 *begin_x*begin_dx*begin_dy + 0.0130752 *begin_x*begin_y*begin_dx + 0.00891991 *lens_ipow(begin_x, 2)*begin_dy + 0.000158792 *lens_ipow(begin_x, 2)*begin_y + -2.09263 *begin_dy*lens_ipow(begin_lambda, 3) + -8.32987e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -3.61459e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2) + 0.00129551 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2)*begin_lambda + 4.43484e-05 *lens_ipow(begin_y, 4)*begin_dy*begin_lambda + 4.2646e-07 *lens_ipow(begin_y, 5)*begin_lambda + 5.18524 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 8.30028e-05 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + 13.0196 *lens_ipow(begin_dy, 5)*lens_ipow(begin_lambda, 3) + -3.17047e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx*begin_dy*begin_lambda + -0.707244 *begin_x*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 1.60095e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7) + 2.18183e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 2) + 0.000456485 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 1.34678e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)*begin_dy;
  pred_dx =  + 0.492465 *begin_dx + -0.0137087 *begin_x + 0.46455 *begin_dx*begin_lambda + 0.015746 *begin_x*begin_lambda + -0.483042 *begin_dx*lens_ipow(begin_lambda, 2) + -0.336158 *begin_dx*lens_ipow(begin_dy, 2) + -0.344341 *lens_ipow(begin_dx, 3) + 0.0077197 *begin_y*begin_dx*begin_dy + 0.000223874 *lens_ipow(begin_y, 2)*begin_dx + -0.0219432 *begin_x*lens_ipow(begin_lambda, 2) + 0.00249289 *begin_x*lens_ipow(begin_dy, 2) + 0.00857999 *begin_x*lens_ipow(begin_dx, 2) + 0.00051792 *begin_x*begin_y*begin_dy + 6.36965e-06 *begin_x*lens_ipow(begin_y, 2) + 0.000675975 *lens_ipow(begin_x, 2)*begin_dx + 5.43926e-06 *lens_ipow(begin_x, 3) + 0.0107066 *begin_x*lens_ipow(begin_lambda, 3) + 3.55796e-07 *lens_ipow(begin_x, 3)*begin_lambda + 0.177328 *begin_dx*lens_ipow(begin_lambda, 4) + 2.28956e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + 9.66781e-07 *lens_ipow(begin_x, 4)*begin_dx + 9.84992e-09 *lens_ipow(begin_x, 5) + -10.0763 *lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + -1.54517e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda + 3.23397e-05 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 4)*begin_dy + 6.20967e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*lens_ipow(begin_lambda, 2) + -1.03342e-14 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 6)*begin_dx + -7.87045e-15 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2)*begin_dx;
  pred_dy =  + 0.492652 *begin_dy + -0.0136945 *begin_y + 0.463968 *begin_dy*begin_lambda + 0.0156163 *begin_y*begin_lambda + -0.482779 *begin_dy*lens_ipow(begin_lambda, 2) + -0.343058 *lens_ipow(begin_dy, 3) + -0.332565 *lens_ipow(begin_dx, 2)*begin_dy + -0.0216848 *begin_y*lens_ipow(begin_lambda, 2) + 0.00928505 *begin_y*lens_ipow(begin_dy, 2) + 0.00243746 *begin_y*lens_ipow(begin_dx, 2) + 0.000703553 *lens_ipow(begin_y, 2)*begin_dy + 6.02727e-06 *lens_ipow(begin_y, 3) + 0.007844 *begin_x*begin_dx*begin_dy + 0.000514665 *begin_x*begin_y*begin_dx + 0.00022461 *lens_ipow(begin_x, 2)*begin_dy + 6.31667e-06 *lens_ipow(begin_x, 2)*begin_y + 0.0105618 *begin_y*lens_ipow(begin_lambda, 3) + 0.177463 *begin_dy*lens_ipow(begin_lambda, 4) + 6.22695e-08 *lens_ipow(begin_y, 4)*begin_dy + -13.5065 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 5) + -0.000178964 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + 1.05289e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5) + 2.05629e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2)*begin_lambda + 7.94128e-09 *lens_ipow(begin_y, 6)*begin_dy*begin_lambda + 8.01103e-11 *lens_ipow(begin_y, 7)*begin_lambda + -1.34976e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx*begin_dy*begin_lambda + 5.4018e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 2) + -2.68455e-11 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3);
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 49.5899  + 3.1298 *begin_lambda + 0.515988 *begin_y*begin_dy + 0.00889992 *lens_ipow(begin_y, 2) + 1.20968 *begin_x*begin_dx + 0.0208795 *lens_ipow(begin_x, 2) + -2.06405 *lens_ipow(begin_lambda, 3) + 0.00112832 *lens_ipow(begin_x, 3)*begin_dx + 2.33614e-05 *lens_ipow(begin_x, 4) + 10.4132 *begin_x*begin_dx*lens_ipow(begin_dy, 4) + -6.40788e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy*begin_lambda + -19621.2 *lens_ipow(begin_dx, 6)*lens_ipow(begin_dy, 2) + 0.0127862 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 0.00263143 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 3)*begin_dy+0.0f;
  dx1_domega0(0, 1) =  + 0.515988 *begin_y*begin_dx + 0.22714 *begin_x*begin_dy + 0.0129187 *begin_x*begin_y + -0.000155016 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 2.35158e-06 *lens_ipow(begin_x, 3)*begin_y + 20.8263 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -6.40788e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*begin_lambda + -5606.04 *lens_ipow(begin_dx, 7)*begin_dy + 0.0127862 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 2) + 0.000657857 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 4)+0.0f;
  dx1_domega0(1, 0) =  + 0.226527 *begin_y*begin_dx + 0.516508 *begin_x*begin_dy + 0.0130752 *begin_x*begin_y + -7.22917e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dx + 10.3705 *begin_y*begin_dx*lens_ipow(begin_dy, 4) + 8.30028e-05 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -3.17047e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dy*begin_lambda + -2.12173 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 0.00091297 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_dy*lens_ipow(begin_lambda, 3)+0.0f;
  dx1_domega0(1, 1) =  + 49.5894  + 3.13797 *begin_lambda + 1.22109 *begin_y*begin_dy + 0.0210479 *lens_ipow(begin_y, 2) + 0.516508 *begin_x*begin_dx + 0.00891991 *lens_ipow(begin_x, 2) + -2.09263 *lens_ipow(begin_lambda, 3) + -0.000166597 *lens_ipow(begin_y, 3)*begin_dy + 0.00259103 *lens_ipow(begin_y, 3)*begin_dy*begin_lambda + 4.43484e-05 *lens_ipow(begin_y, 4)*begin_lambda + 20.7409 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 0.000166006 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy + 65.0978 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 3) + -3.17047e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx*begin_lambda + -1.41449 *begin_x*begin_y*lens_ipow(begin_dx, 3)*begin_dy*lens_ipow(begin_lambda, 2) + 0.000456485 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + 1.34678e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
