case unknown__petzval__1900__65mm:
{
const double dx00 =  + 0.451516  + 0.606186 *lambda + -0.846398 *lens_ipow(lambda, 2) + 0.410811 *lens_ipow(dy, 2) + 0.40855 *lens_ipow(dx, 2) + 0.028177 *y*dy + 0.00030757 *lens_ipow(y, 2) + 0.0758276 *x*dx + 0.000896674 *lens_ipow(x, 2) + 0.41458 *lens_ipow(lambda, 3) + 1.14933e-05 *lens_ipow(y, 2)*lambda + 5.17273e-05 *lens_ipow(x, 2)*lambda + -0.00019765 *x*y*dx*dy*lambda + -8.20974e-07 *lens_ipow(x, 4)*lens_ipow(lambda, 4) + 0.00018237 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 7.47149e-06 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 3) + 7.8023e-08 *lens_ipow(x, 6)*lens_ipow(lambda, 3) + 0.00367726 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 7.80076e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 3.66026e-13 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const double dx01 =  + 0.0202797 *y*dx + 0.028177 *x*dy + 0.000615139 *x*y + 2.29867e-05 *x*y*lambda + -9.88251e-05 *lens_ipow(x, 2)*dx*dy*lambda + 0.00245151 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 4.68046e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 2.09158e-13 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const double dx02 =  + 58.9159  + 24.2712 *lambda + -33.5079 *lens_ipow(lambda, 2) + -42.3734 *lens_ipow(dy, 2) + -127.08 *lens_ipow(dx, 2) + 0.0101398 *lens_ipow(y, 2) + 0.817101 *x*dx + 0.0379138 *lens_ipow(x, 2) + 16.2511 *lens_ipow(lambda, 3) + -9.88251e-05 *lens_ipow(x, 2)*y*dy*lambda + 2139.45 *lens_ipow(dx, 6)*lens_ipow(lambda, 2) + 7.29481e-05 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 3) + 1.24525e-06 *lens_ipow(x, 6)*lens_ipow(lambda, 3) + 0.00490301 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 3.1203e-08 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx03 =  + -84.7468 *dx*dy + 0.821621 *x*dy + 0.028177 *x*y + -9.88251e-05 *lens_ipow(x, 2)*y*dx*lambda + 0.00245151 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + 1.56015e-08 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dx, 2)+0.0f;
const double dx04 =  + 24.2712 *dx + 0.606186 *x + -67.0157 *dx*lambda + -1.6928 *x*lambda + 48.7532 *dx*lens_ipow(lambda, 2) + 1.24374 *x*lens_ipow(lambda, 2) + 1.14933e-05 *x*lens_ipow(y, 2) + 1.72424e-05 *lens_ipow(x, 3) + -9.88251e-05 *lens_ipow(x, 2)*y*dx*dy + 611.27 *lens_ipow(dx, 7)*lambda + -6.56779e-07 *lens_ipow(x, 5)*lens_ipow(lambda, 3) + 0.000109422 *lens_ipow(x, 5)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 3.73575e-06 *lens_ipow(x, 6)*dx*lens_ipow(lambda, 2) + 3.34384e-08 *lens_ipow(x, 7)*lens_ipow(lambda, 2)+0.0f;
const double dx10 =  + 0.0280036 *y*dx + 0.0202887 *x*dy + 0.000613326 *x*y + 1.545e-05 *x*y*lambda + 0.000134508 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.5904e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy + 4.22542e-11 *lens_ipow(x, 3)*lens_ipow(y, 5) + -5.48156e-08 *lens_ipow(y, 6)*dx*lens_ipow(dy, 3) + 5.54264e-15 *x*lens_ipow(y, 9)+0.0f;
const double dx11 =  + 0.45251  + 0.598958 *lambda + -0.831557 *lens_ipow(lambda, 2) + 0.434385 *lens_ipow(dy, 2) + 0.406588 *lens_ipow(dx, 2) + 0.0773517 *y*dy + 0.000920732 *lens_ipow(y, 2) + 0.0280036 *x*dx + 0.000306663 *lens_ipow(x, 2) + 0.404997 *lens_ipow(lambda, 3) + 4.90243e-05 *lens_ipow(y, 2)*lambda + 7.72501e-06 *lens_ipow(x, 2)*lambda + 0.0141758 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 4) + -19.6089 *y*lens_ipow(dx, 2)*lens_ipow(dy, 5) + -0.626521 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 0.000201762 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -2.12054e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 5.28177e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + 1.86629e-10 *lens_ipow(y, 8)*lens_ipow(dx, 2) + -3.28893e-07 *x*lens_ipow(y, 5)*dx*lens_ipow(dy, 3) + 2.49419e-14 *lens_ipow(x, 2)*lens_ipow(y, 8)+0.0f;
const double dx12 =  + -84.7294 *dx*dy + 0.813176 *y*dx + 0.0280036 *x*y + -19.6089 *lens_ipow(y, 2)*dx*lens_ipow(dy, 5) + -0.417681 *lens_ipow(y, 3)*dx*lens_ipow(dy, 4) + 0.000134508 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -5.30135e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 4.14731e-11 *lens_ipow(y, 9)*dx + -5.48156e-08 *x*lens_ipow(y, 6)*lens_ipow(dy, 3)+0.0f;
const double dx13 =  + 59.5458  + 19.4711 *lambda + -20.1758 *lens_ipow(lambda, 2) + -125.516 *lens_ipow(dy, 2) + -42.3647 *lens_ipow(dx, 2) + 0.868769 *y*dy + 0.0386758 *lens_ipow(y, 2) + 0.0101443 *lens_ipow(x, 2) + 7.35573 *lens_ipow(lambda, 4) + 0.0212637 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -49.0222 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.835361 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.000134508 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -5.30135e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + -1.64447e-07 *x*lens_ipow(y, 6)*dx*lens_ipow(dy, 2)+0.0f;
const double dx14 =  + 19.4711 *dy + 0.598958 *y + -40.3516 *dy*lambda + -1.66311 *y*lambda + 1.21499 *y*lens_ipow(lambda, 2) + 1.63414e-05 *lens_ipow(y, 3) + 7.72501e-06 *lens_ipow(x, 2)*y + 29.4229 *dy*lens_ipow(lambda, 3) + 0.0283516 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx20 =  + -0.0302104  + -0.00018288 *lambda + -0.0333787 *lens_ipow(dy, 2) + -0.00114565 *y*dy + -6.72865e-06 *lens_ipow(y, 2) + -0.000866427 *x*dx + -0.000968924 *x*dx*lambda + -2.89579e-05 *lens_ipow(x, 2)*lambda + -0.0191766 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.000355262 *x*lens_ipow(dx, 3) + 3.37128e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 0.00265676 *x*dx*lens_ipow(lambda, 5) + 0.0864011 *lens_ipow(dx, 2)*lens_ipow(lambda, 6) + -1.0447 *y*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.000307717 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx21 =  + -0.04681 *dx*dy + -0.000777743 *y*dx + -0.00114565 *x*dy + -1.34573e-05 *x*y + -0.0102283 *lens_ipow(dx, 3)*dy + -1.0447 *x*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.000307717 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx22 =  + -1.64603  + 0.0964454 *lambda + -0.0719471 *lens_ipow(lambda, 2) + -1.13404 *lens_ipow(dy, 2) + -0.04681 *y*dy + -0.000388871 *lens_ipow(y, 2) + -0.000433214 *lens_ipow(x, 2) + 17.9 *lens_ipow(dx, 2)*lambda + -0.000484462 *lens_ipow(x, 2)*lambda + -38.9534 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 5.49966 *lens_ipow(dx, 4) + -0.0306849 *y*lens_ipow(dx, 2)*dy + -0.0383531 *x*dx*lens_ipow(lambda, 2) + -0.000532893 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 27.2923 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 3.47189 *lens_ipow(dy, 6) + 0.00132838 *lens_ipow(x, 2)*lens_ipow(lambda, 5) + 9376.06 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + 0.172802 *x*dx*lens_ipow(lambda, 6) + -4.17881 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.000461576 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx23 =  + -2.26807 *dx*dy + -0.04681 *y*dx + -0.0667575 *x*dy + -0.00114565 *x*y + -0.0102283 *y*lens_ipow(dx, 3) + 20.8314 *dx*lens_ipow(dy, 5) + 7500.85 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + -3.1341 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.000307717 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy+0.0f;
const double dx24 =  + 0.0964454 *dx + -0.00018288 *x + -0.143894 *dx*lambda + 5.96666 *lens_ipow(dx, 3) + -0.000484462 *lens_ipow(x, 2)*dx + -9.65263e-06 *lens_ipow(x, 3) + -25.969 *lens_ipow(dx, 3)*lambda + -0.0383531 *x*lens_ipow(dx, 2)*lambda + 27.2923 *lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 3.37128e-05 *lens_ipow(x, 3)*lens_ipow(lambda, 2) + 0.00664191 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 4) + 0.518407 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx30 =  + 0.0722633 *dx*dy + 0.000749095 *x*dy + 2.30345e-06 *x*y + -1.4436e-06 *x*y*lambda + -0.000322478 *y*dx*lens_ipow(dy, 2)+0.0f;
const double dx31 =  + -0.0303047  + 0.00632751 *lens_ipow(dx, 2) + 1.85058e-05 *lens_ipow(y, 2) + 1.15173e-06 *lens_ipow(x, 2) + 0.0591995 *lens_ipow(dy, 2)*lambda + -0.00295714 *y*dy*lambda + -0.000101365 *lens_ipow(y, 2)*lambda + -7.21802e-07 *lens_ipow(x, 2)*lambda + -0.179209 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.023436 *lens_ipow(dy, 4) + 8.99164e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.000322478 *x*dx*lens_ipow(dy, 2) + -0.000277807 *lens_ipow(lambda, 6) + 0.194514 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 0.00413984 *y*dy*lens_ipow(lambda, 4)+0.0f;
const double dx32 =  + 6.13067 *dx*dy + 0.012655 *y*dx + 0.0722633 *x*dy + -0.288821 *dx*dy*lambda + 4.76128 *dx*lens_ipow(dy, 3) + 3.46655 *lens_ipow(dx, 3)*dy + -0.000322478 *x*y*lens_ipow(dy, 2)+0.0f;
const double dx33 =  + -1.65429  + 0.122283 *lambda + -0.0903359 *lens_ipow(lambda, 2) + 3.06533 *lens_ipow(dx, 2) + 0.0722633 *x*dx + 0.000374548 *lens_ipow(x, 2) + 20.7032 *lens_ipow(dy, 2)*lambda + -0.14441 *lens_ipow(dx, 2)*lambda + 0.118399 *y*dy*lambda + -0.00147857 *lens_ipow(y, 2)*lambda + -48.9915 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 9.51158 *lens_ipow(dy, 4) + 7.14192 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.866637 *lens_ipow(dx, 4) + -0.358417 *y*dy*lens_ipow(lambda, 2) + 0.093744 *y*lens_ipow(dy, 3) + -0.000644956 *x*y*dx*dy + 35.4523 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.389027 *y*dy*lens_ipow(lambda, 4) + 0.00206992 *lens_ipow(y, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx34 =  + 0.122283 *dy + -0.180672 *dy*lambda + 6.90107 *lens_ipow(dy, 3) + -0.14441 *lens_ipow(dx, 2)*dy + 0.0591995 *y*lens_ipow(dy, 2) + -0.00147857 *lens_ipow(y, 2)*dy + -3.37884e-05 *lens_ipow(y, 3) + -7.21802e-07 *lens_ipow(x, 2)*y + -32.661 *lens_ipow(dy, 3)*lambda + -0.358417 *y*lens_ipow(dy, 2)*lambda + 5.99443e-05 *lens_ipow(y, 3)*lambda + 35.4523 *lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.00166684 *y*lens_ipow(lambda, 5) + 0.778054 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.00827968 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 3)+0.0f;
const double dx40 =  + -0.000326418 *dx*lambda + -0.0006459 *y*dx*dy + -2.56937e-05 *lens_ipow(y, 2)*dx + -0.000315967 *x*lens_ipow(dy, 2) + -4.79836e-05 *x*y*dy + -1.38962e-06 *x*lens_ipow(y, 2) + -4.53675e-07 *lens_ipow(x, 3) + -6.26173e-07 *lens_ipow(x, 4)*dx + -8.41443e-09 *lens_ipow(x, 5) + 3.38702e-06 *lens_ipow(x, 4)*lens_ipow(dx, 3) + 0.182746 *x*lens_ipow(dx, 8) + -7.01024e-09 *x*lens_ipow(y, 5)*lens_ipow(dx, 2)*dy + 4.15007e-12 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx + -5.74776e-09 *lens_ipow(x, 6)*lens_ipow(dx, 3) + -2.65482e-14 *lens_ipow(x, 7)*lens_ipow(y, 2) + 2.07192e-07 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*dy*lambda+0.0f;
const double dx41 =  + -0.000951704 *y*lens_ipow(dy, 2) + -0.000390895 *y*lens_ipow(dx, 2) + -6.89777e-05 *lens_ipow(y, 2)*dy + -1.11367e-06 *lens_ipow(y, 3) + -0.0006459 *x*dx*dy + -5.13875e-05 *x*y*dx + -2.39918e-05 *lens_ipow(x, 2)*dy + -1.38962e-06 *lens_ipow(x, 2)*y + -1.47855e-09 *lens_ipow(y, 5) + 6.93256e-09 *lens_ipow(y, 5)*lens_ipow(dy, 2) + -1.75256e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + 8.30014e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx + -6.63704e-15 *lens_ipow(x, 8)*y + 4.14385e-08 *lens_ipow(x, 5)*lens_ipow(dx, 3)*dy*lambda+0.0f;
const double dx42 =  + -0.000326418 *x*lambda + -0.000390895 *lens_ipow(y, 2)*dx + -0.0006459 *x*y*dy + -2.56937e-05 *x*lens_ipow(y, 2) + -0.851253 *lens_ipow(dx, 3)*lambda + -1.25235e-07 *lens_ipow(x, 5) + 2.03221e-06 *lens_ipow(x, 5)*lens_ipow(dx, 2) + 0.730985 *lens_ipow(x, 2)*lens_ipow(dx, 7) + -7.01024e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*dy + 1.38336e-12 *lens_ipow(x, 3)*lens_ipow(y, 6) + -2.46332e-09 *lens_ipow(x, 7)*lens_ipow(dx, 2) + 1.24315e-07 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx43 =  + -0.000951704 *lens_ipow(y, 2)*dy + -2.29926e-05 *lens_ipow(y, 3) + -0.0006459 *x*y*dx + -0.000315967 *lens_ipow(x, 2)*dy + -2.39918e-05 *lens_ipow(x, 2)*y + 2.31085e-09 *lens_ipow(y, 6)*dy + -3.50512e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*lens_ipow(dx, 2) + 4.14385e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 3)*lambda+0.0f;
const double dx44 =  + 0.849799  + -3.55216 *lambda + 5.23368 *lens_ipow(lambda, 2) + -0.000326418 *x*dx + -2.65526 *lens_ipow(lambda, 3) + -0.212813 *lens_ipow(dx, 4) + 4.14385e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 3)*dy+0.0f;
} break;
