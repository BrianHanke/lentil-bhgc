case unknown__petzval__1900__65mm:
{
const double dx00 =  + 0.759924  + 0.120695 *lambda + -0.0835724 *lens_ipow(lambda, 2) + 0.11357 *lens_ipow(dy, 2) + 0.604841 *lens_ipow(dx, 2) + 0.0129187 *y*dy + 0.000157296 *lens_ipow(y, 2) + 0.0417591 *x*dx + 0.000424712 *lens_ipow(x, 2) + 2.37804e-05 *lens_ipow(x, 2)*lambda + -7.7508e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00169248 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 7.05473e-06 *lens_ipow(x, 2)*y*dy + 9.34457e-05 *lens_ipow(x, 3)*dx + 1.15902e-06 *lens_ipow(x, 4) + 1.72681e-08 *lens_ipow(y, 4)*lambda + 5.20658 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -1.28158e-05 *x*lens_ipow(y, 3)*dx*dy*lambda + 4.784e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + 0.00639312 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.00197357 *lens_ipow(x, 2)*y*lens_ipow(dx, 4)*dy + 6.40898e-12 *lens_ipow(x, 6)*lens_ipow(y, 2)+0.0f;
const double dx01 =  + 0.515988 *dx*dy + 0.0177998 *y*dx + 0.0129187 *x*dy + 0.000314592 *x*y + -0.000155016 *x*y*lens_ipow(dy, 2) + 2.35158e-06 *lens_ipow(x, 3)*dy + 6.90726e-08 *x*lens_ipow(y, 3)*lambda + -1.92236e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lambda + 6.37867e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + 0.0127862 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.000657857 *lens_ipow(x, 3)*lens_ipow(dx, 4)*dy + 1.83114e-12 *lens_ipow(x, 7)*y+0.0f;
const double dx02 =  + 49.5899  + 3.1298 *lambda + 0.515988 *y*dy + 0.00889992 *lens_ipow(y, 2) + 1.20968 *x*dx + 0.0208795 *lens_ipow(x, 2) + -2.06405 *lens_ipow(lambda, 3) + 0.00112832 *lens_ipow(x, 3)*dx + 2.33614e-05 *lens_ipow(x, 4) + 10.4132 *x*dx*lens_ipow(dy, 4) + -6.40788e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + -19621.2 *lens_ipow(dx, 6)*lens_ipow(dy, 2) + 0.0127862 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.00263143 *lens_ipow(x, 3)*y*lens_ipow(dx, 3)*dy+0.0f;
const double dx03 =  + 0.515988 *y*dx + 0.22714 *x*dy + 0.0129187 *x*y + -0.000155016 *x*lens_ipow(y, 2)*dy + 2.35158e-06 *lens_ipow(x, 3)*y + 20.8263 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -6.40788e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lambda + -5606.04 *lens_ipow(dx, 7)*dy + 0.0127862 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 0.000657857 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)+0.0f;
const double dx04 =  + 3.1298 *dx + 0.120695 *x + -0.167145 *x*lambda + -6.19214 *dx*lens_ipow(lambda, 2) + 7.92678e-06 *lens_ipow(x, 3) + 1.72681e-08 *x*lens_ipow(y, 4) + -6.40788e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + 1.59467e-09 *lens_ipow(x, 3)*lens_ipow(y, 4) + 0.0127862 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx10 =  + 0.516508 *dx*dy + 0.0130752 *y*dx + 0.0178398 *x*dy + 0.000317585 *x*y + -7.22917e-05 *x*y*lens_ipow(dx, 2) + 8.30028e-05 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -9.5114e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lambda + -0.707244 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 3.20189e-12 *x*lens_ipow(y, 7) + 8.72732e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 2) + 0.00091297 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + 2.69356e-13 *x*lens_ipow(y, 8)*dy+0.0f;
const double dx11 =  + 0.760162  + 0.119797 *lambda + -0.0827452 *lens_ipow(lambda, 2) + 0.610543 *lens_ipow(dy, 2) + 0.113264 *lens_ipow(dx, 2) + 0.0420958 *y*dy + 0.000440228 *lens_ipow(y, 2) + 0.0130752 *x*dx + 0.000158792 *lens_ipow(x, 2) + -0.000249896 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -3.61459e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00388654 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.000177394 *lens_ipow(y, 3)*dy*lambda + 2.1323e-06 *lens_ipow(y, 4)*lambda + 5.18524 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 0.000249008 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -6.34093e-06 *lens_ipow(x, 3)*y*dx*dy*lambda + -0.707244 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 1.12066e-11 *lens_ipow(x, 2)*lens_ipow(y, 6) + 6.54549e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.00091297 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + 1.07742e-12 *lens_ipow(x, 2)*lens_ipow(y, 7)*dy+0.0f;
const double dx12 =  + 0.226527 *y*dx + 0.516508 *x*dy + 0.0130752 *x*y + -7.22917e-05 *lens_ipow(x, 2)*y*dx + 10.3705 *y*dx*lens_ipow(dy, 4) + 8.30028e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + -3.17047e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + -2.12173 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.00091297 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 3)+0.0f;
const double dx13 =  + 49.5894  + 3.13797 *lambda + 1.22109 *y*dy + 0.0210479 *lens_ipow(y, 2) + 0.516508 *x*dx + 0.00891991 *lens_ipow(x, 2) + -2.09263 *lens_ipow(lambda, 3) + -0.000166597 *lens_ipow(y, 3)*dy + 0.00259103 *lens_ipow(y, 3)*dy*lambda + 4.43484e-05 *lens_ipow(y, 4)*lambda + 20.7409 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.000166006 *x*lens_ipow(y, 3)*dx*dy + 65.0978 *lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -3.17047e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + -1.41449 *x*y*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + 0.000456485 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 1.34678e-13 *lens_ipow(x, 2)*lens_ipow(y, 8)+0.0f;
const double dx14 =  + 3.13797 *dy + 0.119797 *y + -0.16549 *y*lambda + -6.27789 *dy*lens_ipow(lambda, 2) + 0.00129551 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 4.43484e-05 *lens_ipow(y, 4)*dy + 4.2646e-07 *lens_ipow(y, 5) + 39.0587 *lens_ipow(dy, 5)*lens_ipow(lambda, 2) + -3.17047e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -1.41449 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 4.36366e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*lambda + 0.00136945 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx20 =  + -0.0137087  + 0.015746 *lambda + -0.0219432 *lens_ipow(lambda, 2) + 0.00249289 *lens_ipow(dy, 2) + 0.00857999 *lens_ipow(dx, 2) + 0.00051792 *y*dy + 6.36965e-06 *lens_ipow(y, 2) + 0.00135195 *x*dx + 1.63178e-05 *lens_ipow(x, 2) + 0.0107066 *lens_ipow(lambda, 3) + 1.06739e-06 *lens_ipow(x, 2)*lambda + 6.86868e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 3.86712e-06 *lens_ipow(x, 3)*dx + 4.92496e-08 *lens_ipow(x, 4) + -3.09035e-07 *x*lens_ipow(y, 3)*dx*dy*lambda + 9.70192e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 4)*dy + 1.8629e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(lambda, 2) + -4.13368e-14 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx + -6.29636e-14 *lens_ipow(x, 7)*lens_ipow(y, 2)*dx+0.0f;
const double dx21 =  + 0.0077197 *dx*dy + 0.000447748 *y*dx + 0.00051792 *x*dy + 1.27393e-05 *x*y + -4.63552e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lambda + 3.23397e-05 *lens_ipow(x, 3)*lens_ipow(dx, 4)*dy + 2.48387e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 2) + -6.20052e-14 *lens_ipow(x, 4)*lens_ipow(y, 5)*dx + -1.57409e-14 *lens_ipow(x, 8)*y*dx+0.0f;
const double dx22 =  + 0.492465  + 0.46455 *lambda + -0.483042 *lens_ipow(lambda, 2) + -0.336158 *lens_ipow(dy, 2) + -1.03302 *lens_ipow(dx, 2) + 0.0077197 *y*dy + 0.000223874 *lens_ipow(y, 2) + 0.01716 *x*dx + 0.000675975 *lens_ipow(x, 2) + 0.177328 *lens_ipow(lambda, 4) + 4.57912e-05 *lens_ipow(x, 3)*dx + 9.66781e-07 *lens_ipow(x, 4) + -50.3816 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -1.54517e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + 0.000129359 *lens_ipow(x, 3)*y*lens_ipow(dx, 3)*dy + -1.03342e-14 *lens_ipow(x, 4)*lens_ipow(y, 6) + -7.87045e-15 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const double dx23 =  + -0.672317 *dx*dy + 0.0077197 *y*dx + 0.00498578 *x*dy + 0.00051792 *x*y + -20.1526 *lens_ipow(dx, 5)*dy + -1.54517e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lambda + 3.23397e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)+0.0f;
const double dx24 =  + 0.46455 *dx + 0.015746 *x + -0.966084 *dx*lambda + -0.0438864 *x*lambda + 0.0321198 *x*lens_ipow(lambda, 2) + 3.55796e-07 *lens_ipow(x, 3) + 0.709314 *dx*lens_ipow(lambda, 3) + -1.54517e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + 1.24193e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*lambda+0.0f;
const double dx30 =  + 0.007844 *dx*dy + 0.000514665 *y*dx + 0.000449221 *x*dy + 1.26333e-05 *x*y + -0.000178964 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 2.10578e-11 *x*lens_ipow(y, 5) + -4.04928e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lambda + 2.16072e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 2) + -1.61073e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dy, 3)+0.0f;
const double dx31 =  + -0.0136945  + 0.0156163 *lambda + -0.0216848 *lens_ipow(lambda, 2) + 0.00928505 *lens_ipow(dy, 2) + 0.00243746 *lens_ipow(dx, 2) + 0.00140711 *y*dy + 1.80818e-05 *lens_ipow(y, 2) + 0.000514665 *x*dx + 6.31667e-06 *lens_ipow(x, 2) + 0.0105618 *lens_ipow(lambda, 3) + 2.49078e-07 *lens_ipow(y, 3)*dy + -0.000357928 *x*y*dx*lens_ipow(dy, 3) + 5.26446e-11 *lens_ipow(x, 2)*lens_ipow(y, 4) + 1.02815e-06 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lambda + 4.76477e-08 *lens_ipow(y, 5)*dy*lambda + 5.60772e-10 *lens_ipow(y, 6)*lambda + -2.69952e-07 *lens_ipow(x, 3)*y*dx*dy*lambda + 1.62054e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -5.36909e-11 *lens_ipow(x, 6)*y*lens_ipow(dy, 3)+0.0f;
const double dx32 =  + -0.665129 *dx*dy + 0.00487491 *y*dx + 0.007844 *x*dy + 0.000514665 *x*y + -27.0129 *dx*lens_ipow(dy, 5) + -0.000178964 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + -1.34976e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda+0.0f;
const double dx33 =  + 0.492652  + 0.463968 *lambda + -0.482779 *lens_ipow(lambda, 2) + -1.02917 *lens_ipow(dy, 2) + -0.332565 *lens_ipow(dx, 2) + 0.0185701 *y*dy + 0.000703553 *lens_ipow(y, 2) + 0.007844 *x*dx + 0.00022461 *lens_ipow(x, 2) + 0.177463 *lens_ipow(lambda, 4) + 6.22695e-08 *lens_ipow(y, 4) + -67.5323 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.000536893 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 4.11259e-07 *lens_ipow(y, 5)*dy*lambda + 7.94128e-09 *lens_ipow(y, 6)*lambda + -1.34976e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + -8.05364e-11 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(dy, 2)+0.0f;
const double dx34 =  + 0.463968 *dy + 0.0156163 *y + -0.965557 *dy*lambda + -0.0433696 *y*lambda + 0.0316854 *y*lens_ipow(lambda, 2) + 0.709852 *dy*lens_ipow(lambda, 3) + 2.05629e-07 *lens_ipow(y, 5)*lens_ipow(dy, 2) + 7.94128e-09 *lens_ipow(y, 6)*dy + 8.01103e-11 *lens_ipow(y, 7) + -1.34976e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + 1.08036e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*lambda+0.0f;
const double dx40 =  + -0.000350746 *dx*lambda + 0.00819705 *dx*lens_ipow(dy, 2) + -1.65584e-05 *lens_ipow(y, 2)*dx + -3.07907e-05 *x*y*dy + -1.19502e-06 *x*lens_ipow(y, 2) + -5.09396e-07 *lens_ipow(x, 3) + -6.75873e-07 *lens_ipow(x, 4)*dx + -8.94934e-09 *lens_ipow(x, 5) + 2.25243e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*dy + 3.67777e-06 *lens_ipow(x, 4)*lens_ipow(dx, 3) + -6.62421e-12 *lens_ipow(x, 5)*lens_ipow(y, 2) + -9.00068e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + -8.72227e-14 *lens_ipow(x, 3)*lens_ipow(y, 6) + -1.21368e-05 *lens_ipow(x, 4)*lens_ipow(dx, 5) + -8.05208e-13 *lens_ipow(x, 8)*dx+0.0f;
const double dx41 =  + 6.36952e-06 *y*lambda + 0.00989982 *lens_ipow(dx, 2)*dy + -0.000954554 *y*lens_ipow(dy, 2) + -7.27468e-05 *lens_ipow(y, 2)*dy + -1.36538e-06 *lens_ipow(y, 3) + -3.31167e-05 *x*y*dx + -1.53953e-05 *lens_ipow(x, 2)*dy + -1.19502e-06 *lens_ipow(x, 2)*y + -2.96435e-10 *lens_ipow(y, 6)*dy + -6.96901e-12 *lens_ipow(y, 7) + 7.50809e-06 *lens_ipow(x, 3)*lens_ipow(dx, 3)*dy + -2.20807e-12 *lens_ipow(x, 6)*y + -1.20009e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -1.30834e-13 *lens_ipow(x, 4)*lens_ipow(y, 5)+0.0f;
const double dx42 =  + -0.000350746 *x*lambda + 0.0197996 *y*dx*dy + 0.00819705 *x*lens_ipow(dy, 2) + -1.65584e-05 *x*lens_ipow(y, 2) + -0.684265 *lens_ipow(dx, 3)*lambda + -1.35175e-07 *lens_ipow(x, 5) + 2.25243e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*dy + 2.20666e-06 *lens_ipow(x, 5)*lens_ipow(dx, 2) + -3.00023e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dy, 2) + -1.21368e-05 *lens_ipow(x, 5)*lens_ipow(dx, 4) + -8.94675e-14 *lens_ipow(x, 9)+0.0f;
const double dx43 =  + 0.00989982 *y*lens_ipow(dx, 2) + -0.000954554 *lens_ipow(y, 2)*dy + -2.42489e-05 *lens_ipow(y, 3) + 0.0163941 *x*dx*dy + -1.53953e-05 *lens_ipow(x, 2)*y + -4.23479e-11 *lens_ipow(y, 7) + 7.50809e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 3) + -6.00045e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy+0.0f;
const double dx44 =  + 0.633684  + -2.66186 *lambda + 3.93868 *lens_ipow(lambda, 2) + 3.18476e-06 *lens_ipow(y, 2) + -0.000350746 *x*dx + -2.00651 *lens_ipow(lambda, 3) + -0.171066 *lens_ipow(dx, 4)+0.0f;
} break;
