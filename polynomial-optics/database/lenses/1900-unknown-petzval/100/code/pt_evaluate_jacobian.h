case unknown__petzval__1900__100mm:
{
const double dx00 =  + 0.4524  + 0.601095 *lambda + -0.834825 *lens_ipow(lambda, 2) + 0.415465 *lens_ipow(dy, 2) + 0.326509 *lens_ipow(dx, 2) + 0.0184585 *y*dy + 0.000132629 *lens_ipow(y, 2) + 0.0454126 *x*dx + 0.000346577 *lens_ipow(x, 2) + 0.407414 *lens_ipow(lambda, 3) + -1.16563 *lens_ipow(dx, 4) + -0.0222499 *y*lens_ipow(dx, 2)*dy + 9.86505e-06 *x*lens_ipow(y, 2)*dx + 0.00383371 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 9.6693e-05 *lens_ipow(x, 3)*dx + 6.37383e-07 *lens_ipow(x, 4) + 9.26886e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + 9.32638e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 3.53771e-10 *lens_ipow(x, 6)*y*dy + 4.07143e-11 *lens_ipow(x, 8)*lens_ipow(dy, 2)+0.0f;
const double dx01 =  + 0.0129062 *y*dx + 0.0184585 *x*dy + 0.000265258 *x*y + -0.0222499 *x*lens_ipow(dx, 2)*dy + 9.86505e-06 *lens_ipow(x, 2)*y*dx + 6.17924e-08 *lens_ipow(x, 3)*y*lens_ipow(lambda, 2) + 3.73055e-10 *lens_ipow(x, 5)*y + 5.05386e-11 *lens_ipow(x, 7)*dy+0.0f;
const double dx02 =  + 90.6531  + 37.4278 *lambda + -51.7994 *lens_ipow(lambda, 2) + -64.9442 *lens_ipow(dy, 2) + -200.029 *lens_ipow(dx, 2) + 0.00645309 *lens_ipow(y, 2) + 0.653019 *x*dx + 0.0227063 *lens_ipow(x, 2) + 25.2017 *lens_ipow(lambda, 3) + -4.66254 *x*lens_ipow(dx, 3) + -0.0444999 *x*y*dx*dy + 4.93253e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0025558 *lens_ipow(x, 3)*dx + 2.41732e-05 *lens_ipow(x, 4) + 212.708 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx03 =  + -129.888 *dx*dy + 0.83093 *x*dy + 0.0184585 *x*y + -0.0222499 *x*y*lens_ipow(dx, 2) + 141.805 *lens_ipow(dx, 3)*dy*lambda + 5.05386e-11 *lens_ipow(x, 7)*y + 9.04762e-12 *lens_ipow(x, 9)*dy+0.0f;
const double dx04 =  + 37.4278 *dx + 0.601095 *x + -103.599 *dx*lambda + -1.66965 *x*lambda + 75.605 *dx*lens_ipow(lambda, 2) + 1.22224 *x*lens_ipow(lambda, 2) + 70.9026 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 6.17924e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*lambda+0.0f;
const double dx10 =  + 0.0182343 *y*dx + 0.0130552 *x*dy + 0.000262066 *x*y + -0.228215 *y*dx*lens_ipow(dy, 4) + 2.26886e-08 *x*lens_ipow(y, 4)*dy + 2.36161e-10 *x*lens_ipow(y, 5)*lambda + 3.28342e-07 *x*lens_ipow(y, 5)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.4638e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx*dy + 1.546e-14 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const double dx11 =  + 0.452848  + 0.598858 *lambda + -0.831154 *lens_ipow(lambda, 2) + 0.323803 *lens_ipow(dy, 2) + 0.409423 *lens_ipow(dx, 2) + 0.0454733 *y*dy + 0.000347312 *lens_ipow(y, 2) + 0.0182343 *x*dx + 0.000131033 *lens_ipow(x, 2) + 0.405522 *lens_ipow(lambda, 3) + 0.100362 *y*lens_ipow(dy, 3) + 0.00604045 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000110485 *lens_ipow(y, 3)*dy + 6.51548e-07 *lens_ipow(y, 4) + -0.228215 *x*dx*lens_ipow(dy, 4) + 4.53771e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 5.90403e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + 8.20855e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -2.92759e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy + 2.7055e-14 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx12 =  + -130.018 *dx*dy + 0.818846 *y*dx + 0.0182343 *x*y + -0.228215 *x*y*lens_ipow(dy, 4) + 2213.36 *dx*lens_ipow(dy, 5)*lambda + 3.28342e-07 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + -4.87932e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy+0.0f;
const double dx13 =  + 90.6436  + 37.4646 *lambda + -51.8916 *lens_ipow(lambda, 2) + -199.31 *lens_ipow(dy, 2) + -65.0089 *lens_ipow(dx, 2) + 0.647606 *y*dy + 0.0227366 *lens_ipow(y, 2) + 0.00652758 *lens_ipow(x, 2) + 25.2777 *lens_ipow(lambda, 3) + 0.150543 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00402697 *lens_ipow(y, 3)*dy + 2.76212e-05 *lens_ipow(y, 4) + -0.912861 *x*y*dx*lens_ipow(dy, 3) + 1.13443e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 5533.4 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda + 3.28342e-07 *lens_ipow(x, 2)*lens_ipow(y, 5)*lens_ipow(dx, 2)*dy + -4.87932e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx+0.0f;
const double dx14 =  + 37.4646 *dy + 0.598858 *y + -103.783 *dy*lambda + -1.66231 *y*lambda + 75.8331 *dy*lens_ipow(lambda, 2) + 1.21657 *y*lens_ipow(lambda, 2) + 1106.68 *lens_ipow(dx, 2)*lens_ipow(dy, 5) + 1.18081e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)+0.0f;
const double dx20 =  + -0.0195467  + -0.000494585 *lambda + 0.000368155 *lens_ipow(lambda, 2) + -0.0219661 *lens_ipow(dy, 2) + -0.000481324 *y*dy + -1.77814e-06 *lens_ipow(y, 2) + -0.000488325 *x*dx + -2.49414e-06 *lens_ipow(x, 2) + -0.00187141 *lens_ipow(dx, 2)*lambda + 0.0397705 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 4.12115e-06 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -1.45422e-09 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.0360702 *y*lens_ipow(dy, 7) + -1.72506e-07 *lens_ipow(y, 4)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx21 =  + -0.0308055 *dx*dy + -0.000318066 *y*dx + -0.000481324 *x*dy + -3.55628e-06 *x*y + 0.0213212 *lens_ipow(dx, 3)*dy + -9.6948e-10 *lens_ipow(x, 3)*y*lens_ipow(lambda, 2) + -0.0177346 *y*dx*lens_ipow(dy, 4)*lambda + -0.0360702 *x*lens_ipow(dy, 7) + -6.90025e-07 *x*lens_ipow(y, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx22 =  + -1.6662  + 0.218846 *lambda + -0.32161 *lens_ipow(lambda, 2) + -1.22128 *lens_ipow(dy, 2) + 2.95099 *lens_ipow(dx, 2) + -0.0308055 *y*dy + -0.000159033 *lens_ipow(y, 2) + -0.000244163 *lens_ipow(x, 2) + 0.168836 *lens_ipow(lambda, 3) + -0.593829 *lens_ipow(dx, 2)*lambda + -0.00374282 *x*dx*lambda + 16.8117 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 5.87113 *lens_ipow(dx, 4) + 0.0639637 *y*lens_ipow(dx, 2)*dy + 0.079541 *x*dx*lens_ipow(dy, 2) + 2.74743e-06 *lens_ipow(x, 3)*dx + 34.22 *lens_ipow(dy, 6) + -0.0088673 *lens_ipow(y, 2)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx23 =  + -2.44255 *dx*dy + -0.0308055 *y*dx + -0.0439322 *x*dy + -0.000481324 *x*y + 11.2078 *lens_ipow(dx, 3)*dy + 0.0213212 *y*lens_ipow(dx, 3) + 0.079541 *x*lens_ipow(dx, 2)*dy + 205.32 *dx*lens_ipow(dy, 5) + -0.0354692 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lambda + -0.252492 *x*y*lens_ipow(dy, 6) + -6.90025e-07 *x*lens_ipow(y, 4)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx24 =  + 0.218846 *dx + -0.000494585 *x + -0.64322 *dx*lambda + 0.00073631 *x*lambda + 0.506508 *dx*lens_ipow(lambda, 2) + -0.197943 *lens_ipow(dx, 3) + -0.00187141 *x*lens_ipow(dx, 2) + -9.6948e-10 *lens_ipow(x, 3)*lens_ipow(y, 2)*lambda + -0.0088673 *lens_ipow(y, 2)*dx*lens_ipow(dy, 4) + -1.72506e-07 *x*lens_ipow(y, 4)*lens_ipow(dy, 4)+0.0f;
const double dx30 =  + 3.56938e-07 *x*y + 0.204459 *dx*dy*lambda + 0.000897703 *x*dy*lambda + -0.22777 *dx*dy*lens_ipow(lambda, 2) + -0.0175996 *lens_ipow(dx, 3)*dy + -0.000183951 *y*dx*lens_ipow(dy, 2) + -5.07542e-08 *lens_ipow(x, 2)*y*dx + -0.00291191 *x*dy*lens_ipow(lambda, 4) + 0.134538 *dx*dy*lens_ipow(lambda, 6) + 0.00333732 *x*dy*lens_ipow(lambda, 6)+0.0f;
const double dx31 =  + -0.0194426  + -0.000893952 *lambda + 0.000740008 *lens_ipow(lambda, 2) + -0.000486318 *y*dy + -2.43415e-06 *lens_ipow(y, 2) + 1.78469e-07 *lens_ipow(x, 2) + -0.00210167 *lens_ipow(dy, 2)*lambda + 0.0153558 *lens_ipow(dx, 2)*lambda + -0.0146515 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.000246426 *y*lens_ipow(dy, 3) + -0.000183951 *x*dx*lens_ipow(dy, 2) + -1.69181e-08 *lens_ipow(x, 3)*dx+0.0f;
const double dx32 =  + 27.1709 *dx*dy*lambda + 0.0307116 *y*dx*lambda + 0.204459 *x*dy*lambda + -32.2976 *dx*dy*lens_ipow(lambda, 2) + 5.06413 *dx*lens_ipow(dy, 3) + -0.0293031 *y*dx*lens_ipow(lambda, 2) + -0.22777 *x*dy*lens_ipow(lambda, 2) + -0.0527987 *x*lens_ipow(dx, 2)*dy + -0.000183951 *x*y*lens_ipow(dy, 2) + -1.69181e-08 *lens_ipow(x, 3)*y + 16.1238 *dx*dy*lens_ipow(lambda, 5) + 0.134538 *x*dy*lens_ipow(lambda, 6)+0.0f;
const double dx33 =  + -1.62721  + 0.0220237 *lambda + 2.75865 *lens_ipow(dy, 2) + -0.000243159 *lens_ipow(y, 2) + 13.5855 *lens_ipow(dx, 2)*lambda + -0.00420334 *y*dy*lambda + 0.204459 *x*dx*lambda + 0.000448851 *lens_ipow(x, 2)*lambda + -0.581432 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 6.90813 *lens_ipow(dy, 4) + -16.1488 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 7.59619 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000369639 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.22777 *x*dx*lens_ipow(lambda, 2) + -0.0175996 *x*lens_ipow(dx, 3) + -0.000367901 *x*y*dx*dy + -0.00145596 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + 8.06191 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + 0.134538 *x*dx*lens_ipow(lambda, 6) + 0.00166866 *lens_ipow(x, 2)*lens_ipow(lambda, 6)+0.0f;
const double dx34 =  + 0.0220237 *dy + -0.000893952 *y + 0.00148002 *y*lambda + 13.5855 *lens_ipow(dx, 2)*dy + -0.00210167 *y*lens_ipow(dy, 2) + 0.0153558 *y*lens_ipow(dx, 2) + 0.204459 *x*dx*dy + 0.000448851 *lens_ipow(x, 2)*dy + -0.387621 *lens_ipow(dy, 3)*lambda + -32.2976 *lens_ipow(dx, 2)*dy*lambda + -0.0293031 *y*lens_ipow(dx, 2)*lambda + -0.45554 *x*dx*dy*lambda + -0.00582382 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 3) + 40.3096 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + 0.807226 *x*dx*dy*lens_ipow(lambda, 5) + 0.010012 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 5)+0.0f;
const double dx40 =  + -0.00934463 *lens_ipow(dx, 3) + -0.000246545 *y*dx*dy + -5.82705e-06 *lens_ipow(y, 2)*dx + -0.000141105 *x*lens_ipow(dy, 2) + -0.000751276 *x*lens_ipow(dx, 2) + -1.21198e-05 *x*y*dy + -2.27066e-07 *x*lens_ipow(y, 2) + -2.23814e-05 *lens_ipow(x, 2)*dx + -2.04911e-07 *lens_ipow(x, 3) + 2.41121e-08 *x*lens_ipow(y, 2)*lambda + -1.66036e-10 *lens_ipow(x, 5) + 1.95186e-06 *x*lens_ipow(y, 2)*lens_ipow(dy, 4) + 5.10176e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -1.05952e-12 *lens_ipow(x, 3)*lens_ipow(y, 4) + -2.17384e-11 *lens_ipow(x, 6)*dx + -1.36364e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 4.30339e-12 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 2)+0.0f;
const double dx41 =  + 1.30828e-06 *y + -0.000401836 *y*lens_ipow(dy, 2) + -0.000118094 *y*lens_ipow(dx, 2) + -1.90097e-05 *lens_ipow(y, 2)*dy + -2.29171e-07 *lens_ipow(y, 3) + -0.000246545 *x*dx*dy + -1.16541e-05 *x*y*dx + -6.0599e-06 *lens_ipow(x, 2)*dy + -2.27066e-07 *lens_ipow(x, 2)*y + 2.41121e-08 *lens_ipow(x, 2)*y*lambda + 1.95186e-06 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + 5.10176e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -1.05952e-12 *lens_ipow(x, 4)*lens_ipow(y, 3) + -1.36364e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 4.30339e-12 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 2)+0.0f;
const double dx42 =  + -0.649899 *lens_ipow(dx, 3) + -0.000118094 *lens_ipow(y, 2)*dx + -0.0280339 *x*lens_ipow(dx, 2) + -0.000246545 *x*y*dy + -5.82705e-06 *x*lens_ipow(y, 2) + -0.000751276 *lens_ipow(x, 2)*dx + -7.46046e-06 *lens_ipow(x, 3) + 1.70059e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -3.10548e-12 *lens_ipow(x, 7) + -1.36364e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda + 2.1517e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)*dx+0.0f;
const double dx43 =  + -0.000401836 *lens_ipow(y, 2)*dy + -6.33657e-06 *lens_ipow(y, 3) + -0.000246545 *x*y*dx + -0.000141105 *lens_ipow(x, 2)*dy + -6.0599e-06 *lens_ipow(x, 2)*y + 3.90373e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 3) + 1.70059e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -1.36364e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx44 =  + 0.846588  + -3.53706 *lambda + 5.2096 *lens_ipow(lambda, 2) + -2.64214 *lens_ipow(lambda, 3) + 1.2056e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -6.81819e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
} break;
