case unknown__petzval__1900__75mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 55.2914 *begin_dx + 0.726822 *begin_x + 14.4587 *begin_dx*begin_lambda + 0.30756 *begin_x*begin_lambda + -20.0206 *begin_dx*lens_ipow(begin_lambda, 2) + 0.519052 *begin_y*begin_dx*begin_dy + 0.0077513 *lens_ipow(begin_y, 2)*begin_dx + -0.429532 *begin_x*lens_ipow(begin_lambda, 2) + 0.117692 *begin_x*lens_ipow(begin_dy, 2) + 0.609379 *begin_x*lens_ipow(begin_dx, 2) + 0.0115469 *begin_x*begin_y*begin_dy + 0.000119884 *begin_x*lens_ipow(begin_y, 2) + 0.0181972 *lens_ipow(begin_x, 2)*begin_dx + 0.000106076 *lens_ipow(begin_x, 3) + 9.748 *begin_dx*lens_ipow(begin_lambda, 3) + 0.210059 *begin_x*lens_ipow(begin_lambda, 3) + 4.25346e-06 *begin_x*lens_ipow(begin_y, 2)*begin_lambda + 6.84974e-06 *lens_ipow(begin_x, 3)*begin_lambda + 1.34511e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + 0.000515632 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + 1.70763e-05 *lens_ipow(begin_x, 4)*begin_dx + 1.41414e-07 *lens_ipow(begin_x, 5) + -1.66696e-07 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + 56.6978 *lens_ipow(begin_dx, 7)*begin_lambda + 7.01251e-14 *begin_x*lens_ipow(begin_y, 8) + 9.09157e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -5.01211e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda + 7.15036e-12 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4)*begin_lambda;
  pred_y =  + 55.3114 *begin_dy + 0.728022 *begin_y + 14.3735 *begin_dy*begin_lambda + 0.301612 *begin_y*begin_lambda + -19.9065 *begin_dy*lens_ipow(begin_lambda, 2) + -0.420164 *begin_y*lens_ipow(begin_lambda, 2) + 0.615288 *begin_y*lens_ipow(begin_dy, 2) + 0.118286 *begin_y*lens_ipow(begin_dx, 2) + 0.0183132 *lens_ipow(begin_y, 2)*begin_dy + 0.000106594 *lens_ipow(begin_y, 3) + 0.519284 *begin_x*begin_dx*begin_dy + 0.0118472 *begin_x*begin_y*begin_dx + 0.00776532 *lens_ipow(begin_x, 2)*begin_dy + 0.000122374 *lens_ipow(begin_x, 2)*begin_y + 9.69447 *begin_dy*lens_ipow(begin_lambda, 3) + 0.20509 *begin_y*lens_ipow(begin_lambda, 3) + 7.9563e-06 *lens_ipow(begin_y, 3)*begin_lambda + -0.000645421 *begin_x*begin_y*begin_dx*begin_lambda + 0.000496892 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 1.66908e-05 *lens_ipow(begin_y, 4)*begin_dy + 1.38887e-07 *lens_ipow(begin_y, 5) + 1.14546e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy + 6.19134 *lens_ipow(begin_dy, 5)*begin_lambda + -6.6536e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*begin_lambda + 4.06256e-06 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_lambda, 4) + 0.000158665 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -8.4825e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + 1.20626e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5)*lens_ipow(begin_lambda, 2);
  pred_dx =  + 0.492294 *begin_dx + -0.0118337 *begin_x + 0.465775 *begin_dx*begin_lambda + 0.0134708 *begin_x*begin_lambda + -0.484335 *begin_dx*lens_ipow(begin_lambda, 2) + -0.335116 *begin_dx*lens_ipow(begin_dy, 2) + -0.352304 *lens_ipow(begin_dx, 3) + 0.00696187 *begin_y*begin_dx*begin_dy + 0.000166882 *lens_ipow(begin_y, 2)*begin_dx + -0.0187778 *begin_x*lens_ipow(begin_lambda, 2) + 0.00183706 *begin_x*lens_ipow(begin_dy, 2) + 0.00703379 *begin_x*lens_ipow(begin_dx, 2) + 0.000373922 *begin_x*begin_y*begin_dy + 3.81262e-06 *begin_x*lens_ipow(begin_y, 2) + 0.000508306 *lens_ipow(begin_x, 2)*begin_dx + 3.5701e-06 *lens_ipow(begin_x, 3) + 0.00916155 *begin_x*lens_ipow(begin_lambda, 3) + 2.73447e-07 *begin_x*lens_ipow(begin_y, 2)*begin_lambda + -1.80922e-05 *lens_ipow(begin_x, 2)*begin_dx*begin_lambda + 0.177917 *begin_dx*lens_ipow(begin_lambda, 4) + 9.35308e-05 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.0185665 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -1.3537e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + 1.8873e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 2.68868e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*begin_lambda + 1.00866e-06 *lens_ipow(begin_x, 4)*begin_dx*begin_lambda + 9.16473e-09 *lens_ipow(begin_x, 5)*begin_lambda + 3.99954e-15 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6);
  pred_dy =  + 0.492597 *begin_dy + -0.0118275 *begin_y + 0.464885 *begin_dy*begin_lambda + 0.0134369 *begin_y*begin_lambda + -0.483958 *begin_dy*lens_ipow(begin_lambda, 2) + -0.352732 *lens_ipow(begin_dy, 3) + -0.332119 *lens_ipow(begin_dx, 2)*begin_dy + -0.0187176 *begin_y*lens_ipow(begin_lambda, 2) + 0.00683736 *begin_y*lens_ipow(begin_dy, 2) + 0.00174594 *begin_y*lens_ipow(begin_dx, 2) + 0.000491469 *lens_ipow(begin_y, 2)*begin_dy + 3.34028e-06 *lens_ipow(begin_y, 3) + 0.00680743 *begin_x*begin_dx*begin_dy + 0.000364672 *begin_x*begin_y*begin_dx + 0.000166885 *lens_ipow(begin_x, 2)*begin_dy + 3.82133e-06 *lens_ipow(begin_x, 2)*begin_y + 0.00913626 *begin_y*lens_ipow(begin_lambda, 3) + 2.72783e-07 *lens_ipow(begin_y, 3)*begin_lambda + 0.178162 *begin_dy*lens_ipow(begin_lambda, 4) + 0.0216985 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 1.65027e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 6.14429e-07 *lens_ipow(begin_y, 4)*begin_dy + 5.5803e-09 *lens_ipow(begin_y, 5) + -1.55551e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 2.38955e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 5.88297e-08 *lens_ipow(begin_x, 3)*begin_y*begin_dx + 1.8029e-09 *lens_ipow(begin_x, 4)*begin_y*begin_lambda + -1.3519e-08 *lens_ipow(begin_x, 5)*begin_dx*begin_dy*lens_ipow(begin_lambda, 3);
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 55.2914  + 14.4587 *begin_lambda + -20.0206 *lens_ipow(begin_lambda, 2) + 0.519052 *begin_y*begin_dy + 0.0077513 *lens_ipow(begin_y, 2) + 1.21876 *begin_x*begin_dx + 0.0181972 *lens_ipow(begin_x, 2) + 9.748 *lens_ipow(begin_lambda, 3) + 1.34511e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 0.00103126 *lens_ipow(begin_x, 3)*begin_dx + 1.70763e-05 *lens_ipow(begin_x, 4) + 396.885 *lens_ipow(begin_dx, 6)*begin_lambda + 0.000181831 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -5.01211e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dy*begin_lambda+0.0f;
  dx1_domega0(0, 1) =  + 0.519052 *begin_y*begin_dx + 0.235384 *begin_x*begin_dy + 0.0115469 *begin_x*begin_y + -3.33393e-07 *begin_x*lens_ipow(begin_y, 4)*begin_dy + 0.000181831 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + -5.01211e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx*begin_lambda+0.0f;
  dx1_domega0(1, 0) =  + 0.236573 *begin_y*begin_dx + 0.519284 *begin_x*begin_dy + 0.0118472 *begin_x*begin_y + -0.000645421 *begin_x*begin_y*begin_lambda + -0.000133072 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_lambda + 4.06256e-06 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 4) + 0.00031733 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -8.4825e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 2)+0.0f;
  dx1_domega0(1, 1) =  + 55.3114  + 14.3735 *begin_lambda + -19.9065 *lens_ipow(begin_lambda, 2) + 1.23058 *begin_y*begin_dy + 0.0183132 *lens_ipow(begin_y, 2) + 0.519284 *begin_x*begin_dx + 0.00776532 *lens_ipow(begin_x, 2) + 9.69447 *lens_ipow(begin_lambda, 3) + 0.000993784 *lens_ipow(begin_y, 3)*begin_dy + 1.66908e-05 *lens_ipow(begin_y, 4) + 1.14546e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 30.9567 *lens_ipow(begin_dy, 4)*begin_lambda + 0.00031733 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 2) + -8.4825e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_lambda, 2)+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
