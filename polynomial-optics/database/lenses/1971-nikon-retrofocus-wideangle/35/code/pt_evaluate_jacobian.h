case nikon__retrofocus_wideangle__1971__35mm:
{
const double dx00 =  + -0.160269  + 0.607588 *lens_ipow(dy, 2) + 1.29345 *lens_ipow(dx, 2) + 0.0247493 *y*dy + 0.000500303 *lens_ipow(y, 2) + 0.0938104 *x*dx + 0.00165042 *lens_ipow(x, 2) + -1.32266 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 4.54352 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.289046 *lens_ipow(dx, 4) + 0.00237194 *y*lens_ipow(dy, 3) + -0.0559366 *x*dx*lens_ipow(lambda, 2) + 0.222699 *x*dx*lens_ipow(dy, 2) + -6.37256e-06 *x*lens_ipow(y, 2)*dx + -0.000582095 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.00336764 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 2.53973e-05 *lens_ipow(x, 2)*y*dy+0.0f;
const double dx01 =  + 0.295929 *dx*dy + 0.0291073 *y*dx + 0.0247493 *x*dy + 0.00100061 *x*y + -0.167061 *dx*lens_ipow(dy, 3) + 0.00237194 *x*lens_ipow(dy, 3) + -6.37256e-06 *lens_ipow(x, 2)*y*dx + 8.46576e-06 *lens_ipow(x, 3)*dy+0.0f;
const double dx02 =  + 29.949  + 20.8124 *lambda + -29.1542 *lens_ipow(lambda, 2) + -12.0267 *lens_ipow(dy, 2) + -16.5409 *lens_ipow(dx, 2) + 0.295929 *y*dy + 0.0145537 *lens_ipow(y, 2) + 2.58691 *x*dx + 0.0469052 *lens_ipow(x, 2) + 14.2965 *lens_ipow(lambda, 3) + -59.2929 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 261.297 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.167061 *y*lens_ipow(dy, 3) + -2.64533 *x*dx*lens_ipow(lambda, 2) + 9.08705 *x*dx*lens_ipow(dy, 2) + -1.15618 *x*lens_ipow(dx, 3) + -0.0279683 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.111349 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -3.18628e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)+0.0f;
const double dx03 =  + -24.0533 *dx*dy + 0.295929 *y*dx + 1.21518 *x*dy + 0.0247493 *x*y + 174.198 *lens_ipow(dx, 3)*dy + -0.501184 *y*dx*lens_ipow(dy, 2) + 9.08705 *x*lens_ipow(dx, 2)*dy + 0.00711582 *x*y*lens_ipow(dy, 2) + 0.222699 *lens_ipow(x, 2)*dx*dy + 0.00224509 *lens_ipow(x, 3)*dy + 8.46576e-06 *lens_ipow(x, 3)*y+0.0f;
const double dx04 =  + 20.8124 *dx + -58.3085 *dx*lambda + 42.8894 *dx*lens_ipow(lambda, 2) + -39.5286 *lens_ipow(dx, 3)*lambda + -2.64533 *x*lens_ipow(dx, 2)*lambda + -0.0559366 *lens_ipow(x, 2)*dx*lambda + -0.000388063 *lens_ipow(x, 3)*lambda+0.0f;
const double dx10 =  + 0.279996 *dx*dy + 0.0248059 *y*dx + 0.0286486 *x*dy + 0.000999953 *x*y + 0.0047392 *y*lens_ipow(dx, 3) + -0.000719513 *lens_ipow(y, 2)*dx*dy + -0.0440602 *y*dx*lens_ipow(dy, 2)*lambda + 1.90718e-06 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.183885 *x*lens_ipow(dy, 5)*lambda + 8.11923e-11 *lens_ipow(y, 7)*dx*lambda+0.0f;
const double dx11 =  + -0.155488  + -0.00980928 *lambda + 0.929571 *lens_ipow(dy, 2) + 0.650284 *lens_ipow(dx, 2) + 0.0782838 *y*dy + 0.00149703 *lens_ipow(y, 2) + 0.0248059 *x*dx + 0.000499977 *lens_ipow(x, 2) + -0.000262678 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0047392 *x*lens_ipow(dx, 3) + -0.00143903 *x*y*dx*dy + -0.0440602 *x*dx*lens_ipow(dy, 2)*lambda + 2.86078e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + 2.50049e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda + 0.00258418 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 5.68346e-10 *x*lens_ipow(y, 6)*dx*lambda + 0.135911 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx12 =  + -20.8341 *dx*dy + 1.30057 *y*dx + 0.279996 *x*dy + 0.0248059 *x*y + 0.0142176 *x*y*lens_ipow(dx, 2) + -0.000719513 *x*lens_ipow(y, 2)*dy + -0.0440602 *x*y*lens_ipow(dy, 2)*lambda + 1.00019e-05 *lens_ipow(y, 5)*dx*lambda + 438.859 *dx*lens_ipow(dy, 3)*lens_ipow(lambda, 4) + 0.00129209 *lens_ipow(y, 4)*dx*dy*lens_ipow(lambda, 2) + 8.11923e-11 *x*lens_ipow(y, 7)*lambda + 0.090607 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx13 =  + 30.2723  + 19.9671 *lambda + -28.631 *lens_ipow(lambda, 2) + -32.3835 *lens_ipow(dy, 2) + -10.4171 *lens_ipow(dx, 2) + 1.85914 *y*dy + 0.0391419 *lens_ipow(y, 2) + 0.279996 *x*dx + 0.0143243 *lens_ipow(x, 2) + 14.0392 *lens_ipow(lambda, 3) + -0.000175119 *lens_ipow(y, 3)*dy + -0.000719513 *x*lens_ipow(y, 2)*dx + 58.3922 *lens_ipow(dy, 4)*lambda + -0.0881204 *x*y*dx*dy*lambda + 1.90718e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 0.459712 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + 658.288 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 0.000646046 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.090607 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4)+0.0f;
const double dx14 =  + 19.9671 *dy + -0.00980928 *y + -57.262 *dy*lambda + 42.1175 *dy*lens_ipow(lambda, 2) + 11.6784 *lens_ipow(dy, 5) + -0.0440602 *x*y*dx*lens_ipow(dy, 2) + 5.00097e-06 *lens_ipow(y, 5)*lens_ipow(dx, 2) + 0.0919424 *lens_ipow(x, 2)*lens_ipow(dy, 5) + 877.718 *lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + 0.00129209 *lens_ipow(y, 4)*lens_ipow(dx, 2)*dy*lambda + 8.11923e-11 *x*lens_ipow(y, 7)*dx + 0.181214 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx20 =  + -0.0260265  + 0.00667057 *lambda + -0.00483806 *lens_ipow(lambda, 2) + 0.0126975 *lens_ipow(dx, 2) + -0.0474111 *lens_ipow(dy, 2)*lambda + -0.00218544 *y*dy*lambda + -1.50741e-05 *lens_ipow(y, 2)*lambda + -0.00330191 *x*dx*lambda + -4.44657e-05 *lens_ipow(x, 2)*lambda + 0.0413368 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.101452 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.00195744 *y*dy*lens_ipow(lambda, 2) + 0.111331 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 1.58606e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 0.00312414 *x*dx*lens_ipow(lambda, 3) + 4.33889e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 6.23182e-06 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -5.37064e-11 *lens_ipow(x, 4)*lens_ipow(y, 2) + -2.98613e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lambda + -0.000982169 *x*y*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + -4.80465e-10 *lens_ipow(x, 6)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx21 =  + 0.00375711 *dx*dy + 9.93391e-05 *y*dx + -0.00218544 *x*dy*lambda + -3.01482e-05 *x*y*lambda + 3.57253e-05 *lens_ipow(y, 2)*dx*dy + 7.23957e-07 *lens_ipow(y, 3)*dx + 0.00195744 *x*dy*lens_ipow(lambda, 2) + 3.17213e-05 *x*y*lens_ipow(lambda, 3) + 1.24636e-05 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -2.14826e-11 *lens_ipow(x, 5)*y + -9.95377e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy*lambda + -0.000491085 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx22 =  + -1.03437  + -0.0910994 *lens_ipow(dy, 2) + 1.51381 *lens_ipow(dx, 2) + 0.00375711 *y*dy + 4.96695e-05 *lens_ipow(y, 2) + 0.025395 *x*dx + -0.00165095 *lens_ipow(x, 2)*lambda + 1.19084e-05 *lens_ipow(y, 3)*dy + 1.80989e-07 *lens_ipow(y, 4) + -0.202904 *x*dx*lens_ipow(lambda, 2) + 0.222661 *x*dx*lens_ipow(lambda, 3) + 0.00156207 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 1.24636e-05 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -1.99075e-05 *lens_ipow(x, 3)*y*dx*dy*lambda + -0.00147325 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + -0.182199 *dx*dy + 0.00375711 *y*dx + -0.0948221 *x*dy*lambda + -0.00218544 *x*y*lambda + 1.19084e-05 *lens_ipow(y, 3)*dx + 0.0826735 *x*dy*lens_ipow(lambda, 2) + 0.00195744 *x*y*lens_ipow(lambda, 2) + -9.95377e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lambda + -0.000491085 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -1.37276e-10 *lens_ipow(x, 7)*dy*lambda+0.0f;
const double dx24 =  + 0.00667057 *x + -0.00967612 *x*lambda + -0.0474111 *x*lens_ipow(dy, 2) + -0.00218544 *x*y*dy + -1.50741e-05 *x*lens_ipow(y, 2) + -0.00165095 *lens_ipow(x, 2)*dx + -1.48219e-05 *lens_ipow(x, 3) + 0.0826735 *x*lens_ipow(dy, 2)*lambda + -0.202904 *x*lens_ipow(dx, 2)*lambda + 0.00391489 *x*y*dy*lambda + 0.333992 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 4.75819e-05 *x*lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.00468621 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 2) + 4.33889e-05 *lens_ipow(x, 3)*lens_ipow(lambda, 2) + 1.24636e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -9.95377e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*dy + -0.000982169 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*dy*lambda + -6.86378e-11 *lens_ipow(x, 7)*lens_ipow(dy, 2)+0.0f;
const double dx30 =  + 0.0296174 *dx*dy + -0.000591649 *y*dx + -8.89194e-06 *x*y + 3.71936e-05 *lens_ipow(y, 2)*dx*dy*lambda + -8.07294e-06 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -9.32806e-07 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + -2.85684e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -3.27018e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -2.9214e-11 *x*lens_ipow(y, 5)*lambda + 1.44182e-13 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const double dx31 =  + -0.0255481  + 0.00485144 *lambda + -0.00323192 *lens_ipow(lambda, 2) + -0.0150997 *lens_ipow(dx, 2) + -0.000741909 *y*dy + -1.49417e-05 *lens_ipow(y, 2) + -0.000591649 *x*dx + -4.44597e-06 *lens_ipow(x, 2) + -0.00174177 *y*dy*lambda + 0.00156594 *y*dy*lens_ipow(lambda, 2) + 0.00259144 *y*lens_ipow(dx, 2)*dy*lambda + 4.24643e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 7.43872e-05 *x*y*dx*dy*lambda + -4.87508e-08 *lens_ipow(y, 4)*lens_ipow(lambda, 2) + -2.42188e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + -1.39921e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.85684e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -2.45263e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.0350039 *lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -7.3035e-11 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + 1.80227e-13 *lens_ipow(x, 4)*lens_ipow(y, 4) + 1.39831e-07 *lens_ipow(y, 4)*lens_ipow(lambda, 6)+0.0f;
const double dx32 =  + 2.08539 *dx*dy + -0.0301994 *y*dx + 0.0296174 *x*dy + -0.000591649 *x*y + 0.308082 *dx*dy*lambda + 0.00259144 *lens_ipow(y, 2)*dx*dy*lambda + 3.71936e-05 *x*lens_ipow(y, 2)*dy*lambda + -2.42188e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + -9.32806e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -9.5228e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const double dx33 =  + -1.03554  + 1.04269 *lens_ipow(dx, 2) + -0.000370955 *lens_ipow(y, 2) + 0.0296174 *x*dx + 4.99971 *lens_ipow(dy, 2)*lambda + 0.154041 *lens_ipow(dx, 2)*lambda + -0.000870886 *lens_ipow(y, 2)*lambda + -4.33827 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.000782972 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.00129572 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 2.83096e-05 *lens_ipow(y, 3)*dy*lambda + 3.71936e-05 *x*lens_ipow(y, 2)*dx*lambda + -0.140016 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx34 =  + 0.00485144 *y + -0.00646384 *y*lambda + 1.66657 *lens_ipow(dy, 3) + 0.154041 *lens_ipow(dx, 2)*dy + -0.000870886 *lens_ipow(y, 2)*dy + -2.89218 *lens_ipow(dy, 3)*lambda + 0.00156594 *lens_ipow(y, 2)*dy*lambda + 0.00129572 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 1.41548e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 3.71936e-05 *x*lens_ipow(y, 2)*dx*dy + -1.95003e-08 *lens_ipow(y, 5)*lambda + -0.105012 *y*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -1.4607e-11 *lens_ipow(x, 2)*lens_ipow(y, 5) + 1.67797e-07 *lens_ipow(y, 5)*lens_ipow(lambda, 5)+0.0f;
const double dx40 =  + -0.0413706 *dx*lens_ipow(dy, 2) + -0.153779 *lens_ipow(dx, 3) + -0.000327349 *y*dx*dy + -0.000327423 *x*lens_ipow(dy, 2) + -0.0070418 *x*lens_ipow(dx, 2) + -6.40441e-06 *x*y*dy + -1.68918e-07 *x*lens_ipow(y, 2) + -0.000129192 *lens_ipow(x, 2)*dx + -9.65327e-07 *lens_ipow(x, 3)+0.0f;
const double dx41 =  + -0.00168015 *dy + -3.35056e-05 *y + -0.0330158 *lens_ipow(dx, 2)*dy + -0.000327349 *x*dx*dy + -3.2022e-06 *lens_ipow(x, 2)*dy + -1.68918e-07 *lens_ipow(x, 2)*y + -2.20743 *lens_ipow(dy, 5) + -0.099394 *y*lens_ipow(dy, 4) + -0.0012757 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -1.19272e-09 *lens_ipow(y, 5) + 2.1132 *lens_ipow(dy, 9)+0.0f;
const double dx42 =  + -5.76711 *dx*lens_ipow(dy, 2) + -11.8499 *lens_ipow(dx, 3) + -0.0660315 *y*dx*dy + -0.0413706 *x*lens_ipow(dy, 2) + -0.461338 *x*lens_ipow(dx, 2) + -0.000327349 *x*y*dy + -0.0070418 *lens_ipow(x, 2)*dx + -4.30641e-05 *lens_ipow(x, 3) + -2.81769 *lens_ipow(dx, 5) + -104.124 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx43 =  + -0.0996956 *dy + -0.00168015 *y + -5.76711 *lens_ipow(dx, 2)*dy + -0.0330158 *y*lens_ipow(dx, 2) + -0.0827412 *x*dx*dy + -0.000327349 *x*y*dx + -0.000327423 *lens_ipow(x, 2)*dy + -3.2022e-06 *lens_ipow(x, 2)*y + -241.156 *lens_ipow(dy, 5) + -11.0371 *y*lens_ipow(dy, 4) + -0.198788 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.0012757 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 256.364 *lens_ipow(dy, 7) + -104.124 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + 19.0188 *y*lens_ipow(dy, 8)+0.0f;
const double dx44 =  + 2.05381  + -8.89198 *lambda + 13.6035 *lens_ipow(lambda, 2) + -7.16736 *lens_ipow(lambda, 3) + -26.0311 *lens_ipow(dx, 4)*lens_ipow(dy, 4)+0.0f;
} break;
