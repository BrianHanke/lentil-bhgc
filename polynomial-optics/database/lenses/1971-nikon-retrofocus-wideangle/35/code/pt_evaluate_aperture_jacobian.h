case nikon__retrofocus_wideangle__1971__35mm:
{
const double dx00 =  + 0.771654  + -0.0440603 *lambda + 0.0340632 *lens_ipow(lambda, 2) + 2.04106 *lens_ipow(dx, 2) + 0.125252 *x*dx + 0.0015604 *lens_ipow(x, 2) + 3.06284 *lens_ipow(dy, 2)*lambda + 0.168312 *y*dy*lambda + 0.00201315 *lens_ipow(y, 2)*lambda + -2.92628 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.158485 *y*dy*lens_ipow(lambda, 2) + -0.00189516 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.800313 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.00105121 *x*y*dx*dy*lambda + 2.50519e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 3.93506e-09 *lens_ipow(x, 7)*dx*lens_ipow(dy, 2) + 6.73327e-11 *lens_ipow(x, 8)*lens_ipow(dy, 2)+0.0f;
const double dx01 =  + 5.00217 *dx*dy*lambda + 0.156253 *y*dx*lambda + 0.168312 *x*dy*lambda + 0.00402631 *x*y*lambda + -4.70816 *dx*dy*lens_ipow(lambda, 2) + -0.165229 *y*dx*lens_ipow(lambda, 2) + -0.158485 *x*dy*lens_ipow(lambda, 2) + -0.00379031 *x*y*lens_ipow(lambda, 2) + 0.0228523 *y*dx*lens_ipow(lambda, 3) + -0.000525604 *lens_ipow(x, 2)*dx*dy*lambda + 1.67013e-07 *lens_ipow(x, 3)*y*lambda + -0.000380525 *lens_ipow(y, 4)*lens_ipow(dx, 5)*dy + -6.3987e-06 *lens_ipow(y, 5)*lens_ipow(dx, 5)+0.0f;
const double dx02 =  + 46.0468  + 34.5393 *lens_ipow(dx, 2) + 4.08212 *x*dx + 0.0626259 *lens_ipow(x, 2) + 51.4406 *lens_ipow(dy, 2)*lambda + 5.00217 *y*dy*lambda + 0.0781263 *lens_ipow(y, 2)*lambda + -51.6044 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -4.70816 *y*dy*lens_ipow(lambda, 2) + -0.0826144 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.0114261 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 1.60063 *x*dx*lens_ipow(dy, 2)*lambda + -0.000525604 *lens_ipow(x, 2)*y*dy*lambda + -0.000380525 *lens_ipow(y, 5)*lens_ipow(dx, 4)*dy + -5.33225e-06 *lens_ipow(y, 6)*lens_ipow(dx, 4) + 4.91882e-10 *lens_ipow(x, 8)*lens_ipow(dy, 2)+0.0f;
const double dx03 =  + 102.881 *dx*dy*lambda + 5.00217 *y*dx*lambda + 6.12568 *x*dy*lambda + 0.168312 *x*y*lambda + -103.209 *dx*dy*lens_ipow(lambda, 2) + -4.70816 *y*dx*lens_ipow(lambda, 2) + -5.85256 *x*dy*lens_ipow(lambda, 2) + -0.158485 *x*y*lens_ipow(lambda, 2) + 1.60063 *x*lens_ipow(dx, 2)*dy*lambda + -0.000525604 *lens_ipow(x, 2)*y*dx*lambda + -7.61051e-05 *lens_ipow(y, 5)*lens_ipow(dx, 5) + 9.83764e-10 *lens_ipow(x, 8)*dx*dy + 1.49628e-11 *lens_ipow(x, 9)*dy+0.0f;
const double dx04 =  + -0.0440603 *x + 0.0681265 *x*lambda + 51.4406 *dx*lens_ipow(dy, 2) + 5.00217 *y*dx*dy + 0.0781263 *lens_ipow(y, 2)*dx + 3.06284 *x*lens_ipow(dy, 2) + 0.168312 *x*y*dy + 0.00201315 *x*lens_ipow(y, 2) + -103.209 *dx*lens_ipow(dy, 2)*lambda + -9.41632 *y*dx*dy*lambda + -0.165229 *lens_ipow(y, 2)*dx*lambda + -5.85256 *x*lens_ipow(dy, 2)*lambda + -0.316969 *x*y*dy*lambda + -0.00379031 *x*lens_ipow(y, 2)*lambda + 0.0342784 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + 0.800313 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000525604 *lens_ipow(x, 2)*y*dx*dy + 8.35064e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)+0.0f;
const double dx10 =  + 1.32074 *dx*dy + 0.0434403 *y*dx + 0.039721 *x*dy + 0.00103928 *x*y + -0.000242538 *lens_ipow(y, 2)*dx*dy + -0.0255169 *x*lens_ipow(dx, 2)*dy + 8.72976e-08 *x*lens_ipow(y, 3) + -0.00176537 *lens_ipow(x, 2)*dx*dy + -2.4462e-05 *lens_ipow(x, 3)*dy+0.0f;
const double dx11 =  + 0.771389  + -0.0292671 *lambda + 0.777021 *lens_ipow(dx, 2) + 0.0434403 *x*dx + 0.000519638 *lens_ipow(x, 2) + 5.21395 *lens_ipow(dy, 2)*lambda + 0.373461 *y*dy*lambda + 0.0059393 *lens_ipow(y, 2)*lambda + -0.00549907 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.000156533 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000485077 *x*y*dx*dy + 1.30946e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.574482 *y*dy*lens_ipow(lambda, 3) + 0.0665203 *lens_ipow(lambda, 6) + -7.74085 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 0.212802 *y*dy*lens_ipow(lambda, 4) + 1.67233e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx12 =  + 24.1189 *dx*dy + 1.55404 *y*dx + 1.32074 *x*dy + 0.0434403 *x*y + -0.000242538 *x*lens_ipow(y, 2)*dy + -0.0255169 *lens_ipow(x, 2)*dx*dy + -0.000588457 *lens_ipow(x, 3)*dy + 6.68931e-07 *lens_ipow(y, 5)*dx*lambda+0.0f;
const double dx13 =  + 46.3471  + -0.616797 *lambda + 12.0594 *lens_ipow(dx, 2) + 1.32074 *x*dx + 0.0198605 *lens_ipow(x, 2) + 10.4279 *y*dy*lambda + 0.18673 *lens_ipow(y, 2)*lambda + 188.007 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000104355 *lens_ipow(y, 3)*dy + -0.000242538 *x*lens_ipow(y, 2)*dx + -0.0127585 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.000588457 *lens_ipow(x, 3)*dx + -6.11549e-06 *lens_ipow(x, 4) + -0.287241 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + -15.4817 *y*dy*lens_ipow(lambda, 4) + 0.106401 *lens_ipow(y, 2)*lens_ipow(lambda, 4) + -623.732 *lens_ipow(dy, 2)*lens_ipow(lambda, 6) + 5.83562 *lens_ipow(lambda, 9)+0.0f;
const double dx14 =  + -0.616797 *dy + -0.0292671 *y + 5.21395 *y*lens_ipow(dy, 2) + 0.18673 *lens_ipow(y, 2)*dy + 0.00197977 *lens_ipow(y, 3) + 125.338 *lens_ipow(dy, 3)*lambda + -0.00366605 *lens_ipow(y, 3)*lambda + -0.861723 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 0.399122 *y*lens_ipow(lambda, 5) + -30.9634 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.425604 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 3) + 3.34465e-07 *lens_ipow(y, 5)*lens_ipow(dx, 2) + -1247.46 *lens_ipow(dy, 3)*lens_ipow(lambda, 5) + 52.5206 *dy*lens_ipow(lambda, 8)+0.0f;
const double dx20 =  + 0.00173343  + -0.0192548 *lambda + 0.0131946 *lens_ipow(lambda, 2) + 0.0718864 *lens_ipow(dy, 2) + 0.207939 *lens_ipow(dx, 2) + 0.00344883 *y*dy + 4.09686e-05 *lens_ipow(y, 2) + 0.0102876 *x*dx + 0.000123928 *lens_ipow(x, 2) + 8.14853e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 3.71347e-07 *lens_ipow(y, 3)*dy + 7.89375e-09 *lens_ipow(y, 4) + 0.00182022 *x*lens_ipow(dx, 3) + -0.000223148 *x*y*dx*dy + -2.70227e-06 *lens_ipow(x, 2)*y*dy + 1.68004e-08 *lens_ipow(x, 4) + 0.000134321 *lens_ipow(x, 2)*lens_ipow(dy, 4)+0.0f;
const double dx21 =  + 0.138788 *dx*dy + 0.00341687 *y*dx + 0.00344883 *x*dy + 8.19372e-05 *x*y + 0.070169 *lens_ipow(dx, 3)*dy + 0.000996356 *y*dx*lens_ipow(dy, 2) + 0.00595396 *y*lens_ipow(dx, 3) + 0.000162971 *x*y*lens_ipow(dx, 2) + 1.11404e-06 *x*lens_ipow(y, 2)*dy + 3.1575e-08 *x*lens_ipow(y, 3) + -0.000111574 *lens_ipow(x, 2)*dx*dy + -9.00758e-07 *lens_ipow(x, 3)*dy+0.0f;
const double dx22 =  + 1.4079  + -1.12376 *lambda + 0.772416 *lens_ipow(lambda, 2) + 3.30999 *lens_ipow(dy, 2) + 9.82941 *lens_ipow(dx, 2) + 0.138788 *y*dy + 0.00170843 *lens_ipow(y, 2) + 0.415877 *x*dx + 0.00514379 *lens_ipow(x, 2) + 0.210507 *y*lens_ipow(dx, 2)*dy + 0.000498178 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00893094 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000162971 *x*lens_ipow(y, 2)*dx + 0.00273032 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.000111574 *lens_ipow(x, 2)*y*dy + -4.34162 *lens_ipow(dx, 4)*lambda+0.0f;
const double dx23 =  + 6.61999 *dx*dy + 0.138788 *y*dx + 0.143773 *x*dy + 0.00344883 *x*y + 0.070169 *y*lens_ipow(dx, 3) + 0.000996356 *lens_ipow(y, 2)*dx*dy + 3.71347e-07 *x*lens_ipow(y, 3) + -0.000111574 *lens_ipow(x, 2)*y*dx + -9.00758e-07 *lens_ipow(x, 3)*y + 0.000179094 *lens_ipow(x, 3)*lens_ipow(dy, 3)+0.0f;
const double dx24 =  + -1.12376 *dx + -0.0192548 *x + 1.54483 *dx*lambda + 0.0263892 *x*lambda + -0.868323 *lens_ipow(dx, 5)+0.0f;
const double dx30 =  + 0.142008 *dx*dy + 0.00345328 *y*dx + 0.00355077 *x*dy + 8.24869e-05 *x*y + -0.0201098 *lens_ipow(dx, 3)*dy + -4.00764e-05 *lens_ipow(y, 2)*dx*dy + 2.40794e-08 *x*lens_ipow(y, 3) + 1.71988e-06 *lens_ipow(x, 2)*y*dx + 4.11254e-08 *lens_ipow(x, 3)*y + -0.000932865 *y*lens_ipow(dx, 3)*lambda + 8.5894e-10 *lens_ipow(y, 5)*dx + 8.93376e-07 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2)+0.0f;
const double dx31 =  + 0.00176334  + -0.0194505 *lambda + 0.0133504 *lens_ipow(lambda, 2) + 0.216139 *lens_ipow(dy, 2) + 0.0719157 *lens_ipow(dx, 2) + 0.0105437 *y*dy + 0.000125332 *lens_ipow(y, 2) + 0.00345328 *x*dx + 4.12435e-05 *lens_ipow(x, 2) + -5.07e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 2.29222e-08 *lens_ipow(y, 4) + -8.01528e-05 *x*y*dx*dy + 3.61192e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 5.73295e-07 *lens_ipow(x, 3)*dx + 1.02813e-08 *lens_ipow(x, 4) + -0.000932865 *x*lens_ipow(dx, 3)*lambda + 2.06729e-07 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 4.2947e-09 *x*lens_ipow(y, 4)*dx + 2.97792e-07 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx32 =  + 6.79406 *dx*dy + 0.143831 *y*dx + 0.142008 *x*dy + 0.00345328 *x*y + -0.0603294 *x*lens_ipow(dx, 2)*dy + -4.00764e-05 *x*lens_ipow(y, 2)*dy + 5.73295e-07 *lens_ipow(x, 3)*y + -0.00279859 *x*y*lens_ipow(dx, 2)*lambda + 8.26918e-08 *lens_ipow(y, 5)*dx + 8.5894e-10 *x*lens_ipow(y, 5) + 2.97792e-07 *lens_ipow(x, 3)*y*lens_ipow(lambda, 2)+0.0f;
const double dx33 =  + 1.4047  + -1.12782 *lambda + 0.777598 *lens_ipow(lambda, 2) + 10.5648 *lens_ipow(dy, 2) + 3.39703 *lens_ipow(dx, 2) + 0.432279 *y*dy + 0.00527187 *lens_ipow(y, 2) + 0.142008 *x*dx + 0.00177539 *lens_ipow(x, 2) + -0.363015 *lens_ipow(dy, 2)*lambda + -3.38e-05 *lens_ipow(y, 3)*dy + -0.0201098 *x*lens_ipow(dx, 3) + -4.00764e-05 *x*lens_ipow(y, 2)*dx+0.0f;
const double dx34 =  + -1.12782 *dy + -0.0194505 *y + 1.5552 *dy*lambda + 0.0267009 *y*lambda + -0.121005 *lens_ipow(dy, 3) + -0.000932865 *x*y*lens_ipow(dx, 3) + 5.95584e-07 *lens_ipow(x, 3)*y*dx*lambda+0.0f;
const double dx40 =  + -0.000345482 *dx + -0.111559 *lens_ipow(dx, 3) + 0.000613613 *y*dx*dy + 0.000271638 *x*lens_ipow(dy, 2) + -0.00494506 *x*lens_ipow(dx, 2) + -3.91887e-07 *x*lens_ipow(y, 2) + -0.000102136 *lens_ipow(x, 2)*dx + -9.8683e-07 *lens_ipow(x, 3)+0.0f;
const double dx41 =  + -0.0013269 *dy + -1.93585e-05 *y + 0.00027437 *y*lens_ipow(dx, 2) + -2.13633e-05 *lens_ipow(y, 2)*dy + -4.44681e-07 *lens_ipow(y, 3) + 0.000613613 *x*dx*dy + -3.91887e-07 *lens_ipow(x, 2)*y + -2.48647 *lens_ipow(dy, 5) + -0.144389 *y*lens_ipow(dy, 4) + -0.0029106 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -2.04811e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2)+0.0f;
const double dx42 =  + -0.0275309 *dx + -0.000345482 *x + -2.68545 *dx*lens_ipow(dy, 2) + -9.14723 *lens_ipow(dx, 3) + 0.00027437 *lens_ipow(y, 2)*dx + -0.334678 *x*lens_ipow(dx, 2) + 0.000613613 *x*y*dy + -0.00494506 *lens_ipow(x, 2)*dx + -3.40454e-05 *lens_ipow(x, 3)+0.0f;
const double dx43 =  + -0.0860177 *dy + -0.0013269 *y + -1.26571 *lens_ipow(dy, 3) + -2.68545 *lens_ipow(dx, 2)*dy + -7.1211e-06 *lens_ipow(y, 3) + 0.000613613 *x*y*dx + 0.000271638 *lens_ipow(x, 2)*dy + -199.882 *lens_ipow(dy, 5) + -12.4324 *y*lens_ipow(dy, 4) + -0.288778 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.0029106 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -1.02406e-05 *lens_ipow(y, 4)*dy+0.0f;
const double dx44 =  + 1.45028  + -6.04644 *lambda + 8.90491 *lens_ipow(lambda, 2) + -4.52254 *lens_ipow(lambda, 3)+0.0f;
} break;
