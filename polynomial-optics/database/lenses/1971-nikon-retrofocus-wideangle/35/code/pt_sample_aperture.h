case nikon__retrofocus_wideangle__1971__35mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 46.0468 *begin_dx + 0.771654 *begin_x + -0.0440603 *begin_x*begin_lambda + 11.5131 *lens_ipow(begin_dx, 3) + 0.0340632 *begin_x*lens_ipow(begin_lambda, 2) + 2.04106 *begin_x*lens_ipow(begin_dx, 2) + 0.0626259 *lens_ipow(begin_x, 2)*begin_dx + 0.000520133 *lens_ipow(begin_x, 3) + 51.4406 *begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 5.00217 *begin_y*begin_dx*begin_dy*begin_lambda + 0.0781263 *lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 3.06284 *begin_x*lens_ipow(begin_dy, 2)*begin_lambda + 0.168312 *begin_x*begin_y*begin_dy*begin_lambda + 0.00201315 *begin_x*lens_ipow(begin_y, 2)*begin_lambda + -51.6044 *begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -4.70816 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -0.0826144 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + -2.92628 *begin_x*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.158485 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 2) + -0.00189516 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + 0.0114261 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 3) + 0.800313 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -0.000525604 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy*begin_lambda + 8.35064e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_lambda + -7.61051e-05 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 5)*begin_dy + -1.06645e-06 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 5) + 4.91882e-10 *lens_ipow(begin_x, 8)*begin_dx*lens_ipow(begin_dy, 2) + 7.48142e-12 *lens_ipow(begin_x, 9)*lens_ipow(begin_dy, 2);
  pred_y =  + 46.3471 *begin_dy + 0.771389 *begin_y + -0.616797 *begin_dy*begin_lambda + -0.0292671 *begin_y*begin_lambda + 12.0594 *lens_ipow(begin_dx, 2)*begin_dy + 0.777021 *begin_y*lens_ipow(begin_dx, 2) + 1.32074 *begin_x*begin_dx*begin_dy + 0.0434403 *begin_x*begin_y*begin_dx + 0.0198605 *lens_ipow(begin_x, 2)*begin_dy + 0.000519638 *lens_ipow(begin_x, 2)*begin_y + 5.21395 *begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 0.18673 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 0.00197977 *lens_ipow(begin_y, 3)*begin_lambda + 62.6692 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + -0.00183302 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 2) + -5.21776e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -0.000242538 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -0.0127585 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + 4.36488e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -0.000588457 *lens_ipow(begin_x, 3)*begin_dx*begin_dy + -6.11549e-06 *lens_ipow(begin_x, 4)*begin_dy + -0.287241 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 0.0665203 *begin_y*lens_ipow(begin_lambda, 6) + -7.74085 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + 0.106401 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 4) + 3.34465e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2)*begin_lambda + -207.911 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 6) + 5.83562 *begin_dy*lens_ipow(begin_lambda, 9);
  pred_dx =  + 1.4079 *begin_dx + 0.00173343 *begin_x + -1.12376 *begin_dx*begin_lambda + -0.0192548 *begin_x*begin_lambda + 0.772416 *begin_dx*lens_ipow(begin_lambda, 2) + 3.30999 *begin_dx*lens_ipow(begin_dy, 2) + 3.27647 *lens_ipow(begin_dx, 3) + 0.138788 *begin_y*begin_dx*begin_dy + 0.00170843 *lens_ipow(begin_y, 2)*begin_dx + 0.0131946 *begin_x*lens_ipow(begin_lambda, 2) + 0.0718864 *begin_x*lens_ipow(begin_dy, 2) + 0.207939 *begin_x*lens_ipow(begin_dx, 2) + 0.00344883 *begin_x*begin_y*begin_dy + 4.09686e-05 *begin_x*lens_ipow(begin_y, 2) + 0.00514379 *lens_ipow(begin_x, 2)*begin_dx + 4.13093e-05 *lens_ipow(begin_x, 3) + 0.070169 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + 0.000498178 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.00297698 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + 8.14853e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 3.71347e-07 *begin_x*lens_ipow(begin_y, 3)*begin_dy + 7.89375e-09 *begin_x*lens_ipow(begin_y, 4) + 0.000910108 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + -0.000111574 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + -9.00758e-07 *lens_ipow(begin_x, 3)*begin_y*begin_dy + 3.36008e-09 *lens_ipow(begin_x, 5) + -0.868323 *lens_ipow(begin_dx, 5)*begin_lambda + 4.47735e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 4);
  pred_dy =  + 1.4047 *begin_dy + 0.00176334 *begin_y + -1.12782 *begin_dy*begin_lambda + -0.0194505 *begin_y*begin_lambda + 0.777598 *begin_dy*lens_ipow(begin_lambda, 2) + 3.52159 *lens_ipow(begin_dy, 3) + 3.39703 *lens_ipow(begin_dx, 2)*begin_dy + 0.0133504 *begin_y*lens_ipow(begin_lambda, 2) + 0.216139 *begin_y*lens_ipow(begin_dy, 2) + 0.0719157 *begin_y*lens_ipow(begin_dx, 2) + 0.00527187 *lens_ipow(begin_y, 2)*begin_dy + 4.17773e-05 *lens_ipow(begin_y, 3) + 0.142008 *begin_x*begin_dx*begin_dy + 0.00345328 *begin_x*begin_y*begin_dx + 0.00177539 *lens_ipow(begin_x, 2)*begin_dy + 4.12435e-05 *lens_ipow(begin_x, 2)*begin_y + -0.121005 *lens_ipow(begin_dy, 3)*begin_lambda + -1.69e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 4.58445e-09 *lens_ipow(begin_y, 5) + -0.0201098 *begin_x*lens_ipow(begin_dx, 3)*begin_dy + -4.00764e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 1.20397e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 5.73295e-07 *lens_ipow(begin_x, 3)*begin_y*begin_dx + 1.02813e-08 *lens_ipow(begin_x, 4)*begin_y + -0.000932865 *begin_x*begin_y*lens_ipow(begin_dx, 3)*begin_lambda + 4.13459e-08 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + 8.5894e-10 *begin_x*lens_ipow(begin_y, 5)*begin_dx + 2.97792e-07 *lens_ipow(begin_x, 3)*begin_y*begin_dx*lens_ipow(begin_lambda, 2);
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 46.0468  + 34.5393 *lens_ipow(begin_dx, 2) + 4.08212 *begin_x*begin_dx + 0.0626259 *lens_ipow(begin_x, 2) + 51.4406 *lens_ipow(begin_dy, 2)*begin_lambda + 5.00217 *begin_y*begin_dy*begin_lambda + 0.0781263 *lens_ipow(begin_y, 2)*begin_lambda + -51.6044 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -4.70816 *begin_y*begin_dy*lens_ipow(begin_lambda, 2) + -0.0826144 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + 0.0114261 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + 1.60063 *begin_x*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -0.000525604 *lens_ipow(begin_x, 2)*begin_y*begin_dy*begin_lambda + -0.000380525 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 4)*begin_dy + -5.33225e-06 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 4) + 4.91882e-10 *lens_ipow(begin_x, 8)*lens_ipow(begin_dy, 2)+0.0f;
  dx1_domega0(0, 1) =  + 102.881 *begin_dx*begin_dy*begin_lambda + 5.00217 *begin_y*begin_dx*begin_lambda + 6.12568 *begin_x*begin_dy*begin_lambda + 0.168312 *begin_x*begin_y*begin_lambda + -103.209 *begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -4.70816 *begin_y*begin_dx*lens_ipow(begin_lambda, 2) + -5.85256 *begin_x*begin_dy*lens_ipow(begin_lambda, 2) + -0.158485 *begin_x*begin_y*lens_ipow(begin_lambda, 2) + 1.60063 *begin_x*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + -0.000525604 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_lambda + -7.61051e-05 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 5) + 9.83764e-10 *lens_ipow(begin_x, 8)*begin_dx*begin_dy + 1.49628e-11 *lens_ipow(begin_x, 9)*begin_dy+0.0f;
  dx1_domega0(1, 0) =  + 24.1189 *begin_dx*begin_dy + 1.55404 *begin_y*begin_dx + 1.32074 *begin_x*begin_dy + 0.0434403 *begin_x*begin_y + -0.000242538 *begin_x*lens_ipow(begin_y, 2)*begin_dy + -0.0255169 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -0.000588457 *lens_ipow(begin_x, 3)*begin_dy + 6.68931e-07 *lens_ipow(begin_y, 5)*begin_dx*begin_lambda+0.0f;
  dx1_domega0(1, 1) =  + 46.3471  + -0.616797 *begin_lambda + 12.0594 *lens_ipow(begin_dx, 2) + 1.32074 *begin_x*begin_dx + 0.0198605 *lens_ipow(begin_x, 2) + 10.4279 *begin_y*begin_dy*begin_lambda + 0.18673 *lens_ipow(begin_y, 2)*begin_lambda + 188.007 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.000104355 *lens_ipow(begin_y, 3)*begin_dy + -0.000242538 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -0.0127585 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + -0.000588457 *lens_ipow(begin_x, 3)*begin_dx + -6.11549e-06 *lens_ipow(begin_x, 4) + -0.287241 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + -15.4817 *begin_y*begin_dy*lens_ipow(begin_lambda, 4) + 0.106401 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 4) + -623.732 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 6) + 5.83562 *lens_ipow(begin_lambda, 9)+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
