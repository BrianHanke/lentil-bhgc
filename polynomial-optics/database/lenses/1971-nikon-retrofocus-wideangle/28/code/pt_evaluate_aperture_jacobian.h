case nikon__retrofocus_wideangle__1971__28mm:
{
const double dx00 =  + 0.761108  + -0.00662178 *lambda + 4.63029 *lens_ipow(dx, 2)*lambda + 0.00694231 *lens_ipow(x, 2)*lambda + 0.393494 *x*dx*lambda + 0.00531378 *x*lens_ipow(dx, 3) + 0.0173568 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 17.0056 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 1.16157 *y*dy*lens_ipow(lambda, 2) + -41.7386 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.0422162 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + -2.82755 *y*dy*lens_ipow(lambda, 3) + -0.00751705 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 1.90426 *y*dy*lens_ipow(lambda, 4) + -0.559684 *x*dx*lens_ipow(lambda, 4) + 0.0284157 *lens_ipow(y, 2)*lens_ipow(lambda, 4) + 28.3181 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -6.83878e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + -13.0236 *lens_ipow(dx, 2)*lens_ipow(lambda, 6) + 2.48505e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + 1.6843e-08 *lens_ipow(y, 6)*lens_ipow(dx, 4) + 1.1749e-07 *lens_ipow(x, 6)*lens_ipow(dy, 4)+0.0f;
const double dx01 =  + 1.25266 *dx*dy + 0.047815 *y*dx + 0.0347136 *x*y*lens_ipow(lambda, 2) + 1.16157 *x*dy*lens_ipow(lambda, 2) + -0.0844323 *x*y*lens_ipow(lambda, 3) + -2.82755 *x*dy*lens_ipow(lambda, 3) + 1.90426 *x*dy*lens_ipow(lambda, 4) + 0.0568314 *x*y*lens_ipow(lambda, 4) + -5.12909e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + 1.98804e-11 *lens_ipow(x, 5)*lens_ipow(y, 3) + 1.01058e-07 *x*lens_ipow(y, 5)*lens_ipow(dx, 4)+0.0f;
const double dx02 =  + 36.8509  + 1.25266 *y*dy + 8.91949 *lens_ipow(dy, 2) + 0.0239075 *lens_ipow(y, 2) + 9.26058 *x*dx*lambda + 0.196747 *lens_ipow(x, 2)*lambda + 0.00797067 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 124.095 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.279842 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + -1.7097e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + -26.0471 *x*dx*lens_ipow(lambda, 6) + -831.369 *lens_ipow(dx, 2)*lens_ipow(lambda, 8) + 6.73719e-08 *x*lens_ipow(y, 6)*lens_ipow(dx, 3)+0.0f;
const double dx03 =  + 1.25266 *y*dx + 17.839 *dx*dy + 34.0113 *x*dy*lens_ipow(lambda, 2) + 1.16157 *x*y*lens_ipow(lambda, 2) + -83.4772 *x*dy*lens_ipow(lambda, 3) + -2.82755 *x*y*lens_ipow(lambda, 3) + 1.90426 *x*y*lens_ipow(lambda, 4) + 56.6363 *x*dy*lens_ipow(lambda, 4) + -1.7097e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 6.71371e-08 *lens_ipow(x, 7)*lens_ipow(dy, 3)+0.0f;
const double dx04 =  + -0.00662178 *x + 4.63029 *x*lens_ipow(dx, 2) + 0.0023141 *lens_ipow(x, 3) + 0.196747 *lens_ipow(x, 2)*dx + 82.73 *lens_ipow(dx, 3)*lambda + 0.0347136 *x*lens_ipow(y, 2)*lambda + 34.0113 *x*lens_ipow(dy, 2)*lambda + 2.32314 *x*y*dy*lambda + -125.216 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.126649 *x*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -8.48264 *x*y*dy*lens_ipow(lambda, 2) + -0.00751705 *lens_ipow(x, 3)*lens_ipow(lambda, 2) + 7.61704 *x*y*dy*lens_ipow(lambda, 3) + -1.11937 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 3) + 0.113663 *x*lens_ipow(y, 2)*lens_ipow(lambda, 3) + 113.273 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -78.1414 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 5) + -2216.98 *lens_ipow(dx, 3)*lens_ipow(lambda, 7)+0.0f;
const double dx10 =  + 0.185141 *x*dy*lambda + 0.213198 *y*dx*lambda + 4.99446 *dx*dy*lambda + 0.00634648 *x*y*lambda + -4.72596 *dx*dy*lens_ipow(lambda, 2) + -0.00589987 *x*y*lens_ipow(lambda, 2) + -0.000158278 *lens_ipow(y, 2)*dx*dy + -0.199349 *y*dx*lens_ipow(lambda, 2) + -0.172187 *x*dy*lens_ipow(lambda, 2) + 3.67661e-10 *x*lens_ipow(y, 5) + -0.17766 *lens_ipow(x, 2)*lens_ipow(dx, 5)*lens_ipow(dy, 3) + -1.63216e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx*dy + -2.80775e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dy, 3) + 5.74599e-14 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const double dx11 =  + 0.768353  + -0.034862 *lambda + 0.159713 *y*dy + 2.09584 *lens_ipow(dy, 2) + 0.0257873 *lens_ipow(lambda, 2) + 0.00249867 *lens_ipow(y, 2) + 3.15117 *lens_ipow(dx, 2)*lambda + 0.213198 *x*dx*lambda + 0.00317324 *lens_ipow(x, 2)*lambda + -0.00294993 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -0.000316555 *x*y*dx*dy + 0.00582962 *y*lens_ipow(dy, 3) + -3.00936 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.199349 *x*dx*lens_ipow(lambda, 2) + 9.19151e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 1.38936e-07 *lens_ipow(y, 6)*lens_ipow(dx, 4) + -3.26431e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy + -9.35918e-10 *lens_ipow(x, 6)*y*lens_ipow(dy, 3) + 1.00555e-13 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx12 =  + 6.30234 *y*dx*lambda + 82.4255 *dx*dy*lambda + 0.213198 *x*y*lambda + 4.99446 *x*dy*lambda + -4.72596 *x*dy*lens_ipow(lambda, 2) + -0.000158278 *x*lens_ipow(y, 2)*dy + -6.01873 *y*dx*lens_ipow(lambda, 2) + -0.199349 *x*y*lens_ipow(lambda, 2) + -86.1341 *dx*dy*lens_ipow(lambda, 2) + -0.296101 *lens_ipow(x, 3)*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 7.9392e-08 *lens_ipow(y, 7)*lens_ipow(dx, 3) + -5.44052e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy+0.0f;
const double dx13 =  + 36.8421  + 0.0798566 *lens_ipow(y, 2) + 4.19167 *y*dy + 28.1488 *lens_ipow(dy, 2) + 41.2127 *lens_ipow(dx, 2)*lambda + 0.0925706 *lens_ipow(x, 2)*lambda + 4.99446 *x*dx*lambda + -4.72596 *x*dx*lens_ipow(lambda, 2) + -0.000158278 *x*lens_ipow(y, 2)*dx + 0.00874442 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0860934 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -43.0671 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.17766 *lens_ipow(x, 3)*lens_ipow(dx, 5)*lens_ipow(dy, 2) + -5.44052e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx + -1.40388e-09 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(dy, 2)+0.0f;
const double dx14 =  + -0.034862 *y + 0.0515746 *y*lambda + 3.15117 *y*lens_ipow(dx, 2) + 41.2127 *lens_ipow(dx, 2)*dy + 0.0925706 *lens_ipow(x, 2)*dy + 0.213198 *x*y*dx + 4.99446 *x*dx*dy + 0.00317324 *lens_ipow(x, 2)*y + -9.45192 *x*dx*dy*lambda + -0.00589987 *lens_ipow(x, 2)*y*lambda + -6.01873 *y*lens_ipow(dx, 2)*lambda + -0.398697 *x*y*dx*lambda + -0.172187 *lens_ipow(x, 2)*dy*lambda + -86.1341 *lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx20 =  + 0.00253777  + -0.0249451 *lambda + 0.00529829 *y*dy + 0.0159231 *x*dx + 0.0170704 *lens_ipow(lambda, 2) + 7.83965e-05 *lens_ipow(y, 2) + 0.000236837 *lens_ipow(x, 2) + 0.0866079 *lens_ipow(dy, 2) + 0.258693 *lens_ipow(dx, 2) + 1.35834e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0090868 *y*lens_ipow(dx, 2)*dy + 3.8313e-06 *lens_ipow(x, 3)*dx + -0.0141608 *lens_ipow(dx, 4) + 0.000129404 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.1329e-07 *lens_ipow(x, 4) + 4.74154e-08 *lens_ipow(y, 4) + 3.48807e-06 *lens_ipow(y, 3)*dy + -0.000541731 *x*y*dx*dy + 7.36848e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2)+0.0f;
const double dx21 =  + 0.180383 *dx*dy + 0.00529829 *x*dy + 0.000156793 *x*y + 0.00551507 *y*dx + 9.0556e-08 *lens_ipow(x, 3)*y + -0.0090868 *x*lens_ipow(dx, 2)*dy + -0.148411 *lens_ipow(dx, 3)*dy + 1.89662e-07 *x*lens_ipow(y, 3) + 1.04642e-05 *x*lens_ipow(y, 2)*dy + -0.0333878 *dx*lens_ipow(dy, 3) + -0.000270866 *lens_ipow(x, 2)*dx*dy + 0.00014737 *x*y*lens_ipow(dy, 2)+0.0f;
const double dx22 =  + 1.42311  + -1.16717 *lambda + 0.180383 *y*dy + 0.00796153 *lens_ipow(x, 2) + 9.81749 *lens_ipow(dx, 2) + 3.41453 *lens_ipow(dy, 2) + 0.517387 *x*dx + 0.00275754 *lens_ipow(y, 2) + 0.799455 *lens_ipow(lambda, 2) + -0.0181736 *x*y*dx*dy + 9.57825e-07 *lens_ipow(x, 4) + -0.0566432 *x*lens_ipow(dx, 3) + -0.445234 *y*lens_ipow(dx, 2)*dy + -0.0333878 *y*lens_ipow(dy, 3) + -0.000270866 *lens_ipow(x, 2)*y*dy+0.0f;
const double dx23 =  + 0.180383 *y*dx + 0.00529829 *x*y + 6.82906 *dx*dy + 0.173216 *x*dy + -0.0090868 *x*y*lens_ipow(dx, 2) + -0.148411 *y*lens_ipow(dx, 3) + 8.62693e-05 *lens_ipow(x, 3)*dy + 3.48807e-06 *x*lens_ipow(y, 3) + -0.100163 *y*dx*lens_ipow(dy, 2) + -0.000270866 *lens_ipow(x, 2)*y*dx + 0.00014737 *x*lens_ipow(y, 2)*dy+0.0f;
const double dx24 =  + -0.0249451 *x + -1.16717 *dx + 0.0341409 *x*lambda + 1.59891 *dx*lambda+0.0f;
const double dx30 =  + 0.176258 *dx*dy + 0.00538262 *y*dx + 0.000164673 *x*y + 0.0055883 *x*dy + 2.87459e-06 *lens_ipow(y, 3)*dx + 1.20889e-07 *x*lens_ipow(y, 3) + 0.00092651 *x*lens_ipow(dy, 3) + -4.47971e-08 *x*lens_ipow(y, 3)*lambda + -1.75256e-06 *lens_ipow(x, 4)*dx*dy*lambda + -4.19811e-08 *lens_ipow(x, 5)*dy*lambda+0.0f;
const double dx31 =  + 0.00230352  + -0.0246487 *lambda + 0.0876473 *lens_ipow(dx, 2) + 0.0163511 *y*dy + 0.268628 *lens_ipow(dy, 2) + 0.00538262 *x*dx + 0.0169958 *lens_ipow(lambda, 2) + 8.23366e-05 *lens_ipow(x, 2) + 0.000241445 *lens_ipow(y, 2) + 3.70607e-06 *lens_ipow(y, 3)*dy + 8.62376e-06 *x*lens_ipow(y, 2)*dx + 0.0091119 *y*lens_ipow(dx, 2)*dy + 1.81334e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0154199 *lens_ipow(dy, 4) + 0.000330452 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.11285e-07 *lens_ipow(y, 4) + 0.0936823 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -6.71957e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda+0.0f;
const double dx32 =  + 0.175295 *y*dx + 0.176258 *x*dy + 0.00538262 *x*y + 6.75086 *dx*dy + 2.87459e-06 *x*lens_ipow(y, 3) + 0.0091119 *lens_ipow(y, 2)*dx*dy + 0.000220302 *lens_ipow(y, 3)*dx + 0.187365 *y*dx*lens_ipow(dy, 2)*lambda + -3.50511e-07 *lens_ipow(x, 5)*dy*lambda+0.0f;
const double dx33 =  + 1.41271  + -1.1501 *lambda + 0.00817553 *lens_ipow(y, 2) + 0.537256 *y*dy + 0.176258 *x*dx + 3.37543 *lens_ipow(dx, 2) + 0.791858 *lens_ipow(lambda, 2) + 0.00279415 *lens_ipow(x, 2) + 10.2595 *lens_ipow(dy, 2) + 9.26518e-07 *lens_ipow(y, 4) + 0.00455595 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0616796 *y*lens_ipow(dy, 3) + 0.00138977 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.187365 *y*lens_ipow(dx, 2)*dy*lambda + -3.50511e-07 *lens_ipow(x, 5)*dx*lambda + -6.99685e-09 *lens_ipow(x, 6)*lambda+0.0f;
const double dx34 =  + -1.1501 *dy + -0.0246487 *y + 0.0339916 *y*lambda + 1.58372 *dy*lambda + 0.0936823 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -2.23986e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + -3.50511e-07 *lens_ipow(x, 5)*dx*dy + -6.99685e-09 *lens_ipow(x, 6)*dy+0.0f;
const double dx40 =  + -0.00045971 *dx + -0.0435586 *lens_ipow(dx, 3) + -9.61093e-07 *x*lens_ipow(y, 2) + -7.46289e-07 *lens_ipow(x, 3) + 0.00126753 *y*dx*dy + 3.18414e-06 *lens_ipow(x, 3)*lens_ipow(dy, 2)*lambda + -0.000244939 *x*y*lens_ipow(dy, 5) + -2.64022e-10 *lens_ipow(x, 6)*dx + -1.50611e-11 *lens_ipow(x, 3)*lens_ipow(y, 4) + 2.25628e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -6.0053e-12 *lens_ipow(x, 7) + -0.00600685 *y*lens_ipow(dx, 5)*dy + -0.189613 *y*lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx41 =  + -9.61093e-07 *lens_ipow(x, 2)*y + 0.00126753 *x*dx*dy + -0.000702896 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.0310213 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -8.99876e-06 *lens_ipow(y, 4)*dy + 0.00260136 *y*lens_ipow(dx, 4) + -5.28108e-08 *lens_ipow(y, 5) + -0.762585 *y*lens_ipow(dy, 4) + -8.21729 *lens_ipow(dy, 5) + -0.000122469 *lens_ipow(x, 2)*lens_ipow(dy, 5) + -1.50611e-11 *lens_ipow(x, 4)*lens_ipow(y, 3) + 2.25628e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -0.00600685 *x*lens_ipow(dx, 5)*dy + -0.189613 *x*lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda + 3.5092e-11 *lens_ipow(y, 7)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx42 =  + -0.00045971 *x + -6.17621 *lens_ipow(dx, 3) + -0.130676 *x*lens_ipow(dx, 2) + -2.90315 *dx*lens_ipow(dy, 2) + 0.00126753 *x*y*dy + 0.00520272 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -3.77174e-11 *lens_ipow(x, 7) + 7.52093e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -0.0300342 *x*y*lens_ipow(dx, 4)*dy + -0.56884 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 5)*lambda + 8.77299e-12 *lens_ipow(y, 8)*dx*lambda+0.0f;
const double dx43 =  + -2.90315 *lens_ipow(dx, 2)*dy + 0.00126753 *x*y*dx + -0.000351448 *lens_ipow(y, 4)*dy + -0.0310213 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -1.79975e-06 *lens_ipow(y, 5) + -477.608 *lens_ipow(dy, 5) + -1.52517 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -41.0865 *y*lens_ipow(dy, 4) + 1.59207e-06 *lens_ipow(x, 4)*dy*lambda + -0.000612347 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + 7.52093e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -0.00600685 *x*y*lens_ipow(dx, 5) + -0.948067 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx44 =  + 0.725129  + -1.99656 *lambda + 1.45094 *lens_ipow(lambda, 2) + 7.96036e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -0.189613 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 5) + 4.3865e-12 *lens_ipow(y, 8)*lens_ipow(dx, 2)+0.0f;
} break;
