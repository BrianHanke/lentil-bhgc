case nikon__retrofocus_wideangle__1971__28mm:
{
const double dx00 =  + -0.161152  + 0.0323375 *y*dy + 0.000792711 *lens_ipow(y, 2) + 0.000733166 *lens_ipow(x, 2) + 0.660224 *lens_ipow(dy, 2) + 5.80048 *lens_ipow(dx, 2)*lambda + 0.00729778 *lens_ipow(x, 2)*lambda + 0.479006 *x*dx*lambda + -0.264621 *lens_ipow(dx, 4) + -0.00753676 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -6.81187 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.00125844 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.000773233 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00232766 *x*y*dx*dy + -0.510172 *x*dx*lens_ipow(lambda, 2) + -6.38341e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 1.25196e-05 *lens_ipow(x, 5)*dx*lens_ipow(dy, 4) + 2.31018e-07 *lens_ipow(x, 6)*lens_ipow(dy, 4)+0.0f;
const double dx01 =  + 0.403724 *dx*dy + 0.0323375 *x*dy + 0.00158542 *x*y + 0.0382225 *y*dx + 0.00154647 *x*y*lens_ipow(dx, 2) + -0.180046 *dx*lens_ipow(dy, 3) + 0.0257739 *y*lens_ipow(dx, 3) + -0.00116383 *lens_ipow(x, 2)*dx*dy + -0.000127668 *x*y*lens_ipow(dy, 2)+0.0f;
const double dx02 =  + 23.7828  + 16.8335 *lambda + 0.403724 *y*dy + -5.93453 *lens_ipow(dy, 2) + 0.0191113 *lens_ipow(y, 2) + -22.8558 *lens_ipow(lambda, 2) + 11.601 *x*dx*lambda + 10.7284 *lens_ipow(lambda, 3) + 0.239503 *lens_ipow(x, 2)*lambda + -1.05848 *x*lens_ipow(dx, 3) + -62.2856 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -13.6237 *x*dx*lens_ipow(lambda, 2) + 0.00154647 *x*lens_ipow(y, 2)*dx + -0.180046 *y*lens_ipow(dy, 3) + 0.0386609 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00116383 *lens_ipow(x, 2)*y*dy + -0.255086 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 2.08661e-06 *lens_ipow(x, 6)*lens_ipow(dy, 4)+0.0f;
const double dx03 =  + 0.403724 *y*dx + 0.0323375 *x*y + -11.8691 *dx*dy + 1.32045 *x*dy + 0.000838963 *lens_ipow(x, 3)*dy + -0.540139 *y*dx*lens_ipow(dy, 2) + -0.00116383 *lens_ipow(x, 2)*y*dx + -0.000127668 *x*lens_ipow(y, 2)*dy + 8.34643e-06 *lens_ipow(x, 6)*dx*lens_ipow(dy, 3) + 1.3201e-07 *lens_ipow(x, 7)*lens_ipow(dy, 3)+0.0f;
const double dx04 =  + 16.8335 *dx + -45.7116 *dx*lambda + 5.80048 *x*lens_ipow(dx, 2) + 32.1853 *dx*lens_ipow(lambda, 2) + 0.00243259 *lens_ipow(x, 3) + 0.239503 *lens_ipow(x, 2)*dx + -41.5237 *lens_ipow(dx, 3)*lambda + -0.00502451 *lens_ipow(x, 3)*lambda + -13.6237 *x*lens_ipow(dx, 2)*lambda + -0.510172 *lens_ipow(x, 2)*dx*lambda+0.0f;
const double dx10 =  + 0.279602 *dx*dy + 0.0307115 *y*dx + 0.00154134 *x*y + 0.0349494 *x*dy + -0.193871 *lens_ipow(dx, 3)*dy + -0.00309834 *lens_ipow(y, 2)*dx*dy + -9.84889e-06 *lens_ipow(y, 3)*dx + -0.080952 *y*dx*lens_ipow(dy, 2) + -0.000133268 *x*y*lens_ipow(dx, 2) + 0.0719731 *x*lens_ipow(dy, 3) + 0.00226495 *x*y*lens_ipow(dy, 2)+0.0f;
const double dx11 =  + -0.155048  + -0.00940921 *lambda + 0.614081 *lens_ipow(dx, 2) + 0.096042 *y*dy + 0.8849 *lens_ipow(dy, 2) + 0.0307115 *x*dx + 0.000770668 *lens_ipow(x, 2) + 0.00230807 *lens_ipow(y, 2) + -0.00619668 *x*y*dx*dy + -2.95467e-05 *x*lens_ipow(y, 2)*dx + -0.080952 *x*dx*lens_ipow(dy, 2) + 0.014599 *y*lens_ipow(dy, 3) + -6.66341e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00211359 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.00863 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00113247 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.752275 *lens_ipow(dy, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx12 =  + 1.22816 *y*dx + 0.279602 *x*dy + 0.0307115 *x*y + -18.4057 *dx*dy + -0.581613 *x*lens_ipow(dx, 2)*dy + -0.00309834 *x*lens_ipow(y, 2)*dy + -9.84889e-06 *x*lens_ipow(y, 3) + -0.080952 *x*y*lens_ipow(dy, 2) + -0.000133268 *lens_ipow(x, 2)*y*dx + 0.00140906 *lens_ipow(y, 3)*dx + -2.01727 *y*dx*lens_ipow(dy, 2)+0.0f;
const double dx13 =  + 24.1702  + 16.146 *lambda + 0.048021 *lens_ipow(y, 2) + 1.7698 *y*dy + 0.279602 *x*dx + -9.20285 *lens_ipow(dx, 2) + -22.9382 *lens_ipow(lambda, 2) + 0.0174747 *lens_ipow(x, 2) + -28.2383 *lens_ipow(dy, 2) + 11.1695 *lens_ipow(lambda, 3) + -0.193871 *x*lens_ipow(dx, 3) + -0.00309834 *x*lens_ipow(y, 2)*dx + -0.161904 *x*y*dx*dy + 0.0218986 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -2.01727 *y*lens_ipow(dx, 2)*dy + 0.10796 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00226495 *lens_ipow(x, 2)*y*dy + 159.596 *lens_ipow(dy, 4)*lens_ipow(lambda, 3) + 3.0091 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx14 =  + 16.146 *dy + -0.00940921 *y + -45.8765 *dy*lambda + 33.5085 *dy*lens_ipow(lambda, 2) + 95.7578 *lens_ipow(dy, 5)*lens_ipow(lambda, 2) + 2.25682 *y*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx20 =  + -0.0320616  + 0.0066317 *lambda + -0.000973395 *y*dy + -0.004598 *lens_ipow(lambda, 2) + -1.10475e-05 *lens_ipow(y, 2) + -0.0173884 *lens_ipow(dy, 2) + -0.00011213 *lens_ipow(x, 2)*lambda + -0.00719139 *x*dx*lambda + -2.6389e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00182855 *y*lens_ipow(dx, 2)*dy + 0.000107994 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.00670682 *x*dx*lens_ipow(lambda, 2) + -3.30216e-06 *lens_ipow(x, 3)*dx*lambda + -0.00558445 *lens_ipow(dy, 4)*lambda + -4.18913e-08 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -3.83529e-07 *lens_ipow(x, 4)*lens_ipow(lambda, 2) + 3.73531e-07 *lens_ipow(x, 4)*lens_ipow(lambda, 3) + -0.000808357 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3)+0.0f;
const double dx21 =  + -0.000973395 *x*dy + -2.20949e-05 *x*y + 2.88823e-05 *y*dx + -1.75927e-08 *lens_ipow(x, 3)*y + -0.00182855 *x*lens_ipow(dx, 2)*dy + 2.12106e-06 *lens_ipow(y, 3)*dx + 8.42633e-05 *lens_ipow(y, 2)*dx*dy + 0.000805459 *y*lens_ipow(dx, 3) + -0.000808357 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3)+0.0f;
const double dx22 =  + -1.03413  + -0.180573 *lens_ipow(dy, 2) + 1.44411e-05 *lens_ipow(y, 2) + 3.41632 *lens_ipow(dx, 2)*lambda + -0.0035957 *lens_ipow(x, 2)*lambda + -0.00365711 *x*y*dx*dy + 5.30265e-07 *lens_ipow(y, 4) + 2.80878e-05 *lens_ipow(y, 3)*dy + 0.00120819 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00335341 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 5.69898 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -8.25539e-07 *lens_ipow(x, 4)*lambda + -4.75709 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.00161671 *x*y*dx*dy*lens_ipow(lambda, 3) + 9.85241 *lens_ipow(dx, 4)*lens_ipow(lambda, 6)+0.0f;
const double dx23 =  + -0.000973395 *x*y + -0.361146 *dx*dy + -0.0347768 *x*dy + -0.00182855 *x*y*lens_ipow(dx, 2) + 2.80878e-05 *lens_ipow(y, 3)*dx + 3.79932 *lens_ipow(dx, 3)*dy*lambda + -0.0223378 *x*lens_ipow(dy, 3)*lambda + -1.67565e-08 *lens_ipow(x, 5)*dy + -0.000808357 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx24 =  + 0.0066317 *x + -0.00919599 *x*lambda + 1.13877 *lens_ipow(dx, 3) + -3.73767e-05 *lens_ipow(x, 3) + -0.0035957 *lens_ipow(x, 2)*dx + 7.1996e-05 *lens_ipow(x, 3)*lambda + 0.00670682 *lens_ipow(x, 2)*dx*lambda + 1.89966 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -8.25539e-07 *lens_ipow(x, 4)*dx + -0.00558445 *x*lens_ipow(dy, 4) + -6.34279 *lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -1.53412e-07 *lens_ipow(x, 5)*lambda + 2.24118e-07 *lens_ipow(x, 5)*lens_ipow(lambda, 2) + -0.00242507 *x*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 11.8229 *lens_ipow(dx, 5)*lens_ipow(lambda, 5)+0.0f;
const double dx30 =  + 0.0700065 *dx*dy + 0.0015321 *x*dy + -0.00288203 *x*dy*lambda + -0.00034959 *y*dx*lambda + -0.110901 *dx*dy*lens_ipow(lambda, 2) + -6.65439e-05 *x*y*lens_ipow(lambda, 2) + -0.00293124 *y*dx*lens_ipow(dy, 2) + -0.00251561 *y*dx*lens_ipow(lambda, 2) + -0.000137416 *x*y*lens_ipow(dy, 2)*lambda + 6.03136e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 0.000232527 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -3.58744e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + -3.74473e-13 *lens_ipow(y, 8)*dx*dy+0.0f;
const double dx31 =  + -0.0307774  + 0.00174162 *lambda + -3.06248e-05 *lens_ipow(y, 2) + -0.00698524 *y*dy*lambda + -0.00034959 *x*dx*lambda + -3.32719e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -1.48021e-06 *lens_ipow(y, 3)*dy + 0.00612929 *y*dy*lens_ipow(lambda, 2) + -0.00293124 *x*dx*lens_ipow(dy, 2) + -0.0614765 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.00251561 *x*dx*lens_ipow(lambda, 2) + -0.0640027 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -6.8708e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -2.7658e-07 *lens_ipow(y, 4)*lens_ipow(lambda, 2) + 6.03136e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 0.000116264 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 4.15017e-07 *lens_ipow(y, 4)*lens_ipow(lambda, 4) + -5.97907e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + -2.99578e-12 *x*lens_ipow(y, 7)*dx*dy+0.0f;
const double dx32 =  + 0.0700065 *x*dy + 3.17229 *dx*dy + -0.00034959 *x*y*lambda + -0.110901 *x*dy*lens_ipow(lambda, 2) + -0.00293124 *x*y*lens_ipow(dy, 2) + -0.122953 *y*dx*lens_ipow(lambda, 2) + -0.00251561 *x*y*lens_ipow(lambda, 2) + -0.128005 *y*dx*lens_ipow(dy, 2) + -5.27823 *dx*dy*lens_ipow(lambda, 3) + -1.19581e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dy, 2) + -3.74473e-13 *x*lens_ipow(y, 8)*dy+0.0f;
const double dx33 =  + -1.03556  + 0.0700065 *x*dx + 1.58614 *lens_ipow(dx, 2) + 0.000766049 *lens_ipow(x, 2) + -0.00144102 *lens_ipow(x, 2)*lambda + 3.31762 *lens_ipow(dy, 2)*lambda + -0.00349262 *lens_ipow(y, 2)*lambda + -0.110901 *x*dx*lens_ipow(lambda, 2) + -3.70051e-07 *lens_ipow(y, 4) + 0.00306464 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.00586247 *x*y*dx*dy + -0.128005 *y*lens_ipow(dx, 2)*dy + -0.000137416 *lens_ipow(x, 2)*y*dy*lambda + -2.63912 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -3.5583 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 1.50784e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + 0.000232527 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 4) + -2.39163e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy + -3.74473e-13 *x*lens_ipow(y, 8)*dx+0.0f;
const double dx34 =  + 0.00174162 *y + -0.00144102 *lens_ipow(x, 2)*dy + 1.10587 *lens_ipow(dy, 3) + -0.00349262 *lens_ipow(y, 2)*dy + -0.00034959 *x*y*dx + -0.221802 *x*dx*dy*lambda + -6.65439e-05 *lens_ipow(x, 2)*y*lambda + 0.00612929 *lens_ipow(y, 2)*dy*lambda + -0.122953 *y*lens_ipow(dx, 2)*lambda + -0.00503122 *x*y*dx*lambda + -6.8708e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -7.91735 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -4.7444 *lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -1.10632e-07 *lens_ipow(y, 5)*lambda + 0.000465055 *lens_ipow(x, 2)*y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 3.32014e-07 *lens_ipow(y, 5)*lens_ipow(lambda, 3)+0.0f;
const double dx40 =  + -0.000163813 *dx + -0.180237 *lens_ipow(dx, 3) + -4.32673e-07 *x*lens_ipow(y, 2) + -0.0104756 *x*lens_ipow(dx, 2) + -0.000247738 *lens_ipow(x, 2)*dx + -0.029477 *dx*lens_ipow(dy, 2) + -2.40138e-06 *lens_ipow(x, 3) + -9.04551e-05 *lens_ipow(y, 2)*lens_ipow(dx, 5) + -0.000263205 *x*y*lens_ipow(dy, 5) + 0.00311719 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 4) + 1.02042e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*dy + -4.57131e-14 *lens_ipow(x, 3)*lens_ipow(y, 6) + 1.99512 *dx*lens_ipow(dy, 8)*lambda+0.0f;
const double dx41 =  + -0.00201505 *dy + -4.43975e-05 *y + -0.0299405 *lens_ipow(dy, 3) + -4.32673e-07 *lens_ipow(x, 2)*y + -4.09744e-07 *lens_ipow(y, 3) + -0.0296407 *lens_ipow(dx, 2)*dy + -0.00018091 *x*y*lens_ipow(dx, 5) + -0.000131603 *lens_ipow(x, 2)*lens_ipow(dy, 5) + 0.00623438 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 4) + 1.7007e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy + -6.85697e-14 *lens_ipow(x, 4)*lens_ipow(y, 5) + 2.02085 *lens_ipow(dx, 8)*dy*lambda+0.0f;
const double dx42 =  + -0.000163813 *x + -11.5601 *lens_ipow(dx, 3) + -0.540711 *x*lens_ipow(dx, 2) + -4.81061 *dx*lens_ipow(dy, 2) + -0.0104756 *lens_ipow(x, 2)*dx + -0.0592813 *y*dx*dy + -8.25795e-05 *lens_ipow(x, 3) + -0.029477 *x*lens_ipow(dy, 2) + -0.000452276 *x*lens_ipow(y, 2)*lens_ipow(dx, 4) + 0.00935157 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 3.40141e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*dy + 1.99512 *x*lens_ipow(dy, 8)*lambda + 16.1668 *y*lens_ipow(dx, 7)*dy*lambda+0.0f;
const double dx43 =  + -0.00201505 *y + -0.0842346 *dy + -0.0898215 *y*lens_ipow(dy, 2) + -4.81061 *lens_ipow(dx, 2)*dy + -4.84285 *lens_ipow(dy, 3) + -0.0296407 *y*lens_ipow(dx, 2) + -0.058954 *x*dx*dy + -0.000658013 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + -7.40414 *lens_ipow(dy, 7) + 0.0124688 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 3.40141e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx + 15.961 *x*dx*lens_ipow(dy, 7)*lambda + 2.02085 *y*lens_ipow(dx, 8)*lambda+0.0f;
const double dx44 =  + 2.05311  + -8.88686 *lambda + 13.5907 *lens_ipow(lambda, 2) + -7.15685 *lens_ipow(lambda, 3) + 1.99512 *x*dx*lens_ipow(dy, 8) + 2.02085 *y*lens_ipow(dx, 8)*dy+0.0f;
} break;
