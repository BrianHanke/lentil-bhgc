case asahi__takumar__1970__50mm:
{
const double dx00 =  + 0.574039  + 0.0617709 *lambda + -0.0427229 *lens_ipow(lambda, 2) + 0.685393 *lens_ipow(dy, 2) + 1.51615 *lens_ipow(dx, 2) + 0.0296789 *y*dy + 0.000238686 *lens_ipow(y, 2) + 0.0743485 *x*dx + 0.00061502 *lens_ipow(x, 2) + 7.3973 *lens_ipow(dx, 4) + 0.538225 *x*lens_ipow(dx, 3) + 0.0146276 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -9.58399e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.000178481 *lens_ipow(x, 3)*dx + 7.46604e-07 *lens_ipow(x, 4) + 0.134183 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.00170293 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -1.6928e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -3.61893e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 1.37962e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx01 =  + 1.14759 *dx*dy + 0.026764 *y*dx + 0.0296789 *x*dy + 0.000477372 *x*y + -6.38932e-08 *lens_ipow(x, 3)*y + 0.134183 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -8.46401e-07 *lens_ipow(x, 4)*y*dx*lens_ipow(dy, 2) + -2.7142e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + 1.83949e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx02 =  + 51.3922  + 3.78005 *lambda + -2.56761 *lens_ipow(lambda, 2) + 10.1535 *lens_ipow(dy, 2) + 12.1705 *lens_ipow(dx, 2) + 1.14759 *y*dy + 0.013382 *lens_ipow(y, 2) + 3.03229 *x*dx + 0.0371742 *lens_ipow(x, 2) + 418.406 *lens_ipow(dx, 4) + 29.5892 *x*lens_ipow(dx, 3) + 0.807337 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00975172 *lens_ipow(x, 3)*dx + 4.46202e-05 *lens_ipow(x, 4) + 0.268367 *x*y*dx*lens_ipow(dy, 3) + -4.23201e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -9.04733e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 9.19744e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lambda+0.0f;
const double dx03 =  + 20.307 *dx*dy + 1.14759 *y*dx + 1.37079 *x*dy + 0.0296789 *x*y + 0.40255 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00227058 *lens_ipow(x, 3)*lens_ipow(dy, 3) + -8.46401e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + -9.04733e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx+0.0f;
const double dx04 =  + 3.78005 *dx + 0.0617709 *x + -5.13522 *dx*lambda + -0.0854458 *x*lambda + 4.59872e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 2)+0.0f;
const double dx10 =  + 1.16759 *dx*dy + 0.0291475 *y*dx + 0.0269058 *x*dy + 0.000466503 *x*y + 3.78154e-06 *lens_ipow(y, 3)*dx + 0.0101463 *x*lens_ipow(dx, 2)*dy + -1.33916e-06 *lens_ipow(y, 4)*dx*dy + -0.000245363 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -6.6908e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 2.66985e-06 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + 0.678603 *y*dx*lens_ipow(dy, 4)*lambda + -0.00026519 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lambda + 98.4147 *dx*lens_ipow(dy, 7)*lambda+0.0f;
const double dx11 =  + 0.574116  + 0.0590391 *lambda + -0.040445 *lens_ipow(lambda, 2) + 1.84056 *lens_ipow(dy, 2) + 0.658403 *lens_ipow(dx, 2) + 0.0863978 *y*dy + 0.000702577 *lens_ipow(y, 2) + 0.0291475 *x*dx + 0.000233251 *lens_ipow(x, 2) + 0.000643047 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.13446e-05 *x*lens_ipow(y, 2)*dx + -5.35662e-06 *x*lens_ipow(y, 3)*dx*dy + -0.000245363 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -4.46053e-06 *lens_ipow(x, 3)*y*dx*dy + 6.67463e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 0.678603 *x*dx*lens_ipow(dy, 4)*lambda + -0.000795571 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda + 0.00231025 *lens_ipow(y, 3)*lens_ipow(dx, 4)*dy + 1.88187e-05 *lens_ipow(y, 4)*lens_ipow(dx, 4)+0.0f;
const double dx12 =  + 20.3757 *dx*dy + 1.31681 *y*dx + 1.16759 *x*dy + 0.0291475 *x*y + 0.000428698 *lens_ipow(y, 3)*dx + 3.78154e-06 *x*lens_ipow(y, 3) + 0.0101463 *lens_ipow(x, 2)*dx*dy + -1.33916e-06 *x*lens_ipow(y, 4)*dy + -0.000245363 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -2.23027e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 0.678603 *x*y*lens_ipow(dy, 4)*lambda + -0.00026519 *x*lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + 0.00231025 *lens_ipow(y, 4)*lens_ipow(dx, 3)*dy + 1.50549e-05 *lens_ipow(y, 5)*lens_ipow(dx, 3) + 98.4147 *x*lens_ipow(dy, 7)*lambda+0.0f;
const double dx13 =  + 51.3364  + 3.66341 *lambda + -2.4795 *lens_ipow(lambda, 2) + 31.1334 *lens_ipow(dy, 2) + 10.1878 *lens_ipow(dx, 2) + 3.68112 *y*dy + 0.0431989 *lens_ipow(y, 2) + 1.16759 *x*dx + 0.0134529 *lens_ipow(x, 2) + 0.00507316 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -1.33916e-06 *x*lens_ipow(y, 4)*dx + -0.000122682 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.23027e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 1.33493e-06 *lens_ipow(x, 4)*y*dy + 2.71441 *x*y*dx*lens_ipow(dy, 3)*lambda + -0.000530381 *x*lens_ipow(y, 3)*dx*dy*lambda + 0.000577562 *lens_ipow(y, 4)*lens_ipow(dx, 4) + 688.903 *x*dx*lens_ipow(dy, 6)*lambda+0.0f;
const double dx14 =  + 3.66341 *dy + 0.0590391 *y + -4.95901 *dy*lambda + -0.0808899 *y*lambda + 0.678603 *x*y*dx*lens_ipow(dy, 4) + -0.00026519 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 98.4147 *x*dx*lens_ipow(dy, 7)+0.0f;
const double dx20 =  + -0.00617084  + -0.00362568 *lambda + 0.0252478 *lens_ipow(dy, 2) + 0.0992851 *lens_ipow(dx, 2) + 0.001412 *y*dy + 1.39986e-05 *lens_ipow(y, 2) + 0.00511059 *x*dx + 4.56785e-05 *lens_ipow(x, 2) + -0.0447044 *lens_ipow(dx, 2)*lambda + -0.00154521 *x*dx*lambda + 0.0030781 *lens_ipow(lambda, 4) + -8.7189e-05 *x*y*dx*dy + -1.16016e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 2.30449e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -7.58953e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -7.22278e-07 *lens_ipow(x, 3)*dx + -8.23898e-07 *x*lens_ipow(y, 2)*dx*lambda+0.0f;
const double dx21 =  + 0.0496957 *dx*dy + 0.00139802 *y*dx + 0.001412 *x*dy + 2.79972e-05 *x*y + 0.00313617 *y*dx*lens_ipow(dy, 2) + 0.000985616 *y*lens_ipow(dx, 3) + -4.35945e-05 *lens_ipow(x, 2)*dx*dy + 0.0624125 *dx*lens_ipow(dy, 3)*lambda + -8.23898e-07 *lens_ipow(x, 2)*y*dx*lambda+0.0f;
const double dx22 =  + 1.26969  + -0.848284 *lambda + 0.611969 *lens_ipow(lambda, 2) + 1.00431 *lens_ipow(dy, 2) + 4.81853 *lens_ipow(dx, 2) + 0.0496957 *y*dy + 0.000699009 *lens_ipow(y, 2) + 0.19857 *x*dx + 0.00255529 *lens_ipow(x, 2) + -3.40968 *lens_ipow(dx, 2)*lambda + -0.0894089 *x*dx*lambda + -0.000772605 *lens_ipow(x, 2)*lambda + 0.00156808 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00147842 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -4.35945e-05 *lens_ipow(x, 2)*y*dy + -5.05969e-05 *lens_ipow(x, 3)*dx + -1.8057e-07 *lens_ipow(x, 4) + 0.0624125 *y*lens_ipow(dy, 3)*lambda + -4.11949e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda+0.0f;
const double dx23 =  + 2.00862 *dx*dy + 0.0496957 *y*dx + 0.0504955 *x*dy + 0.001412 *x*y + 0.00313617 *lens_ipow(y, 2)*dx*dy + -4.35945e-05 *lens_ipow(x, 2)*y*dx + 1.53633e-05 *lens_ipow(x, 3)*dy + 0.187237 *y*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx24 =  + -0.848284 *dx + -0.00362568 *x + 1.22394 *dx*lambda + -1.13656 *lens_ipow(dx, 3) + -0.0447044 *x*lens_ipow(dx, 2) + -0.000772605 *lens_ipow(x, 2)*dx + 0.0123124 *x*lens_ipow(lambda, 3) + -7.73442e-06 *lens_ipow(x, 3)*lambda + 0.0624125 *y*dx*lens_ipow(dy, 3) + -4.11949e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx+0.0f;
const double dx30 =  + 0.0499707 *dx*dy + 0.00141304 *y*dx + 0.00140413 *x*dy + 2.80527e-05 *x*y + -4.52788e-05 *lens_ipow(y, 2)*dx*dy + 0.000991641 *x*lens_ipow(dy, 3) + 0.00313513 *x*lens_ipow(dx, 2)*dy + 0.0609364 *lens_ipow(dx, 3)*dy*lambda + -8.77463e-07 *x*lens_ipow(y, 2)*dy*lambda+0.0f;
const double dx31 =  + -0.00613766  + -0.00372592 *lambda + 0.100197 *lens_ipow(dy, 2) + 0.025249 *lens_ipow(dx, 2) + 0.00511645 *y*dy + 4.56344e-05 *lens_ipow(y, 2) + 0.00141304 *x*dx + 1.40264e-05 *lens_ipow(x, 2) + -0.0453961 *lens_ipow(dy, 2)*lambda + -0.00150364 *y*dy*lambda + 0.00325564 *lens_ipow(lambda, 4) + -1.12583e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -7.36378e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 2.60243e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -7.53348e-07 *lens_ipow(y, 3)*dy + -9.05576e-05 *x*y*dx*dy + -8.77463e-07 *lens_ipow(x, 2)*y*dy*lambda+0.0f;
const double dx32 =  + 2.02463 *dx*dy + 0.0504979 *y*dx + 0.0499707 *x*dy + 0.00141304 *x*y + 1.73495e-05 *lens_ipow(y, 3)*dx + -4.52788e-05 *x*lens_ipow(y, 2)*dy + 0.00313513 *lens_ipow(x, 2)*dx*dy + 0.182809 *x*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx33 =  + 1.27189  + -0.860125 *lambda + 0.623224 *lens_ipow(lambda, 2) + 4.95284 *lens_ipow(dy, 2) + 1.01231 *lens_ipow(dx, 2) + 0.200394 *y*dy + 0.00255822 *lens_ipow(y, 2) + 0.0499707 *x*dx + 0.000702066 *lens_ipow(x, 2) + -3.57905 *lens_ipow(dy, 2)*lambda + -0.0907922 *y*dy*lambda + -0.000751819 *lens_ipow(y, 2)*lambda + -4.90919e-05 *lens_ipow(y, 3)*dy + -1.88337e-07 *lens_ipow(y, 4) + -4.52788e-05 *x*lens_ipow(y, 2)*dx + 0.00148746 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00156756 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.0609364 *x*lens_ipow(dx, 3)*lambda + -4.38731e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda+0.0f;
const double dx34 =  + -0.860125 *dy + -0.00372592 *y + 1.24645 *dy*lambda + -1.19302 *lens_ipow(dy, 3) + -0.0453961 *y*lens_ipow(dy, 2) + -0.000751819 *lens_ipow(y, 2)*dy + 0.0130226 *y*lens_ipow(lambda, 3) + -7.50554e-06 *lens_ipow(y, 3)*lambda + 0.0609364 *x*lens_ipow(dx, 3)*dy + -4.38731e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy+0.0f;
const double dx40 =  + -0.000989914 *dx + -2.01321e-05 *x + -0.00503696 *lens_ipow(dx, 3) + -0.000197806 *y*dx*dy + -6.1112e-06 *lens_ipow(y, 2)*dx + -8.77293e-06 *x*y*dy + -2.19784e-07 *x*lens_ipow(y, 2) + -0.000122627 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -7.99244e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -1.63215e-07 *lens_ipow(x, 4)*dx + -1.17358e-09 *lens_ipow(x, 5)+0.0f;
const double dx41 =  + -0.000244572 *dy + -0.0286949 *lens_ipow(dy, 3) + -0.00609337 *lens_ipow(dx, 2)*dy + -0.00154342 *y*lens_ipow(dy, 2) + -0.000209493 *y*lens_ipow(dx, 2) + -3.66933e-05 *lens_ipow(y, 2)*dy + -3.43372e-07 *lens_ipow(y, 3) + -0.000197806 *x*dx*dy + -1.22224e-05 *x*y*dx + -4.38647e-06 *lens_ipow(x, 2)*dy + -2.19784e-07 *lens_ipow(x, 2)*y+0.0f;
const double dx42 =  + -0.0511104 *dx + -0.000989914 *x + -1.29787 *dx*lens_ipow(dy, 2) + -1.78699 *lens_ipow(dx, 3) + -0.0121867 *y*dx*dy + -0.000209493 *lens_ipow(y, 2)*dx + -0.0151109 *x*lens_ipow(dx, 2) + -0.000197806 *x*y*dy + -6.1112e-06 *x*lens_ipow(y, 2) + -0.000122627 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -3.99622e-06 *lens_ipow(x, 4)*dx + -3.26429e-08 *lens_ipow(x, 5)+0.0f;
const double dx43 =  + -0.0202229 *dy + -0.000244572 *y + -2.94569 *lens_ipow(dy, 3) + -1.29787 *lens_ipow(dx, 2)*dy + -0.0860847 *y*lens_ipow(dy, 2) + -0.00609337 *y*lens_ipow(dx, 2) + -0.00154342 *lens_ipow(y, 2)*dy + -1.22311e-05 *lens_ipow(y, 3) + -0.000197806 *x*y*dx + -4.38647e-06 *lens_ipow(x, 2)*y+0.0f;
const double dx44 =  + 1.63057  + -6.79516 *lambda + 10.0054 *lens_ipow(lambda, 2) + -5.08036 *lens_ipow(lambda, 3)+0.0f;
} break;
