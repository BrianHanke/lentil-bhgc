case asahi__takumar__1970__50mm:
{
const double dx00 =  + -0.0732961  + -0.00765776 *lambda + 0.283207 *lens_ipow(dy, 2) + 0.0232571 *y*dy + 0.00028254 *lens_ipow(y, 2) + 0.0430035 *x*dx + 0.000616124 *lens_ipow(x, 2) + 3.1137 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 19.7027 *lens_ipow(dx, 4) + 0.0236672 *y*lens_ipow(dx, 2)*dy + 0.128539 *x*dx*lens_ipow(dy, 2) + 1.26136 *x*lens_ipow(dx, 3) + 0.00182457 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.0300174 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 1.32868e-05 *lens_ipow(x, 2)*y*dy + 0.000333488 *lens_ipow(x, 3)*dx + 1.4235e-06 *lens_ipow(x, 4) + -2.81982e-08 *x*lens_ipow(y, 4)*dx*lambda+0.0f;
const double dx01 =  + 0.528304 *dx*dy + 0.0233177 *y*dx + 0.0232571 *x*dy + 0.00056508 *x*y + -0.000684874 *lens_ipow(y, 2)*dx*dy + 0.0236672 *x*lens_ipow(dx, 2)*dy + 4.42895e-06 *lens_ipow(x, 3)*dy + -5.63963e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lambda+0.0f;
const double dx02 =  + 48.7164  + 3.78481 *lambda + -2.8578 *lens_ipow(lambda, 2) + -11.4983 *lens_ipow(dy, 2) + -81.8761 *lens_ipow(dx, 2) + 0.528304 *y*dy + 0.0116589 *lens_ipow(y, 2) + 0.0215017 *lens_ipow(x, 2) + 114.332 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1232.12 *lens_ipow(dx, 4) + -0.000228291 *lens_ipow(y, 3)*dy + 6.2274 *x*dx*lens_ipow(dy, 2) + 78.8109 *x*lens_ipow(dx, 3) + 0.0473344 *x*y*dx*dy + 0.0642696 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.89203 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.0200116 *lens_ipow(x, 3)*dx + 8.3372e-05 *lens_ipow(x, 4) + -1.40991e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda+0.0f;
const double dx03 =  + -22.9966 *dx*dy + 0.528304 *y*dx + 0.566415 *x*dy + 0.0232571 *x*y + 76.2213 *lens_ipow(dx, 3)*dy + -0.000228291 *lens_ipow(y, 3)*dx + 6.2274 *x*lens_ipow(dx, 2)*dy + 0.0236672 *x*y*lens_ipow(dx, 2) + 0.128539 *lens_ipow(x, 2)*dx*dy + 0.00121638 *lens_ipow(x, 3)*dy + 4.42895e-06 *lens_ipow(x, 3)*y+0.0f;
const double dx04 =  + 3.78481 *dx + -0.00765776 *x + -5.71559 *dx*lambda + -1.40991e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx+0.0f;
const double dx10 =  + 0.530652 *dx*dy + 0.0232235 *y*dx + 0.0233677 *x*dy + 0.00056422 *x*y + 0.0248479 *y*dx*lens_ipow(dy, 2) + 4.55976e-06 *lens_ipow(y, 3)*dx + -0.000691277 *lens_ipow(x, 2)*dx*dy + -6.57262e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda+0.0f;
const double dx11 =  + -0.0731029  + -0.00775688 *lambda + 0.280248 *lens_ipow(dx, 2) + 0.0432099 *y*dy + 0.000614634 *lens_ipow(y, 2) + 0.0232235 *x*dx + 0.00028211 *lens_ipow(x, 2) + 19.773 *lens_ipow(dy, 4) + 3.21524 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.25552 *y*lens_ipow(dy, 3) + 0.132196 *y*lens_ipow(dx, 2)*dy + 0.0298178 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00189137 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000331294 *lens_ipow(y, 3)*dy + 1.42502e-06 *lens_ipow(y, 4) + 0.0248479 *x*dx*lens_ipow(dy, 2) + 1.36793e-05 *x*lens_ipow(y, 2)*dx + -3.28631e-08 *lens_ipow(x, 4)*y*dy*lambda+0.0f;
const double dx12 =  + -22.9097 *dx*dy + 0.560496 *y*dx + 0.530652 *x*dy + 0.0232235 *x*y + 76.2414 *dx*lens_ipow(dy, 3) + 6.43049 *y*dx*lens_ipow(dy, 2) + 0.132196 *lens_ipow(y, 2)*dx*dy + 0.00126091 *lens_ipow(y, 3)*dx + 0.0248479 *x*y*lens_ipow(dy, 2) + 4.55976e-06 *x*lens_ipow(y, 3) + -0.000230426 *lens_ipow(x, 3)*dy+0.0f;
const double dx13 =  + 48.746  + 3.68335 *lambda + -2.78464 *lens_ipow(lambda, 2) + -82.2868 *lens_ipow(dy, 2) + -11.4548 *lens_ipow(dx, 2) + 0.0216049 *lens_ipow(y, 2) + 0.530652 *x*dx + 0.0116839 *lens_ipow(x, 2) + 1256.1 *lens_ipow(dy, 4) + 114.362 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 79.092 *y*lens_ipow(dy, 3) + 6.43049 *y*lens_ipow(dx, 2)*dy + 1.88328 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.066098 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.0198785 *lens_ipow(y, 3)*dy + 8.28235e-05 *lens_ipow(y, 4) + 0.0496959 *x*y*dx*dy + -0.000230426 *lens_ipow(x, 3)*dx + -1.64315e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda+0.0f;
const double dx14 =  + 3.68335 *dy + -0.00775688 *y + -5.56928 *dy*lambda + -1.64315e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy+0.0f;
const double dx20 =  + -0.0197239  + 2.87582e-06 *lens_ipow(y, 2) + 4.52422e-06 *lens_ipow(x, 2) + 0.00540682 *lens_ipow(dy, 2)*lambda + 0.0302485 *lens_ipow(dx, 2)*lambda + 9.30597e-05 *y*dy*lambda + 0.000388454 *x*dx*lambda + 9.65541e-06 *lens_ipow(x, 2)*lambda + -0.02759 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -3.28446e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.180281 *lens_ipow(dx, 4)*lambda + 2.49843e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 0.0194377 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 6.00343e-10 *x*lens_ipow(y, 4)*dx + -1.14731e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 0.000535504 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.211014 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -6.70439e-08 *lens_ipow(x, 4)*lens_ipow(lambda, 4)+0.0f;
const double dx21 =  + 0.0070427 *dx*dy + 0.000102289 *y*dx + 5.75164e-06 *x*y + 9.30597e-05 *x*dy*lambda + -2.18964e-09 *lens_ipow(x, 3)*y + -0.016527 *dx*lens_ipow(dy, 3)*lambda + 0.00193713 *y*lens_ipow(dx, 3)*lambda + 4.99685e-05 *x*y*lens_ipow(dx, 2)*lambda + 1.20069e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -1.14731e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy+0.0f;
const double dx22 =  + -0.229348  + 0.271302 *lens_ipow(dy, 2) + 0.0070427 *y*dy + 5.11444e-05 *lens_ipow(y, 2) + 2.77879 *lens_ipow(dx, 2)*lambda + 0.0604969 *x*dx*lambda + 0.000194227 *lens_ipow(x, 2)*lambda + -2.81863 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 5.8439 *lens_ipow(dx, 4) + -0.0551801 *x*dx*lens_ipow(lambda, 2) + -0.016527 *y*lens_ipow(dy, 3)*lambda + 0.0029057 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 0.721124 *x*lens_ipow(dx, 3)*lambda + 4.99685e-05 *x*lens_ipow(y, 2)*dx*lambda + 0.0291565 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 3.00171e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.000357003 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 3) + -0.422029 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -30.0509 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx23 =  + 0.542604 *dx*dy + 0.0070427 *y*dx + 0.0108136 *x*dy*lambda + 9.30597e-05 *x*y*lambda + -0.0495811 *y*dx*lens_ipow(dy, 2)*lambda + -3.82436e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.422029 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4) + -20.034 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 5)+0.0f;
const double dx24 =  + 0.926264 *lens_ipow(dx, 3) + 0.00540682 *x*lens_ipow(dy, 2) + 0.0302485 *x*lens_ipow(dx, 2) + 9.30597e-05 *x*y*dy + 0.000194227 *lens_ipow(x, 2)*dx + 3.21847e-06 *lens_ipow(x, 3) + -1.87908 *lens_ipow(dx, 3)*lambda + -0.0551801 *x*lens_ipow(dx, 2)*lambda + -0.016527 *y*dx*lens_ipow(dy, 3) + 0.000968566 *lens_ipow(y, 2)*lens_ipow(dx, 3) + 0.180281 *x*lens_ipow(dx, 4) + 2.49843e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.0194377 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lambda + 0.000535504 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.844058 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -5.36351e-08 *lens_ipow(x, 5)*lens_ipow(lambda, 3) + -50.0849 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx30 =  + 0.00861913 *dx*dy + 0.000113334 *x*dy + 6.55615e-06 *x*y + 0.000317406 *y*dx*lambda + -0.011292 *lens_ipow(dx, 3)*dy + -0.000267398 *y*dx*lens_ipow(lambda, 2) + -1.56455e-07 *lens_ipow(y, 3)*dx + 0.000920192 *x*lens_ipow(dy, 3) + 1.98573e-05 *x*y*lens_ipow(dy, 2) + -3.88569e-09 *x*lens_ipow(y, 3) + -2.72251e-07 *lens_ipow(x, 2)*y*dx + -3.85901e-09 *lens_ipow(x, 3)*y+0.0f;
const double dx31 =  + -0.0199055  + 0.000304997 *lambda + 0.0121439 *lens_ipow(dy, 2) + 0.000315352 *y*dy + 9.54491e-06 *lens_ipow(y, 2) + 3.27808e-06 *lens_ipow(x, 2) + 0.010073 *lens_ipow(dx, 2)*lambda + 0.000317406 *x*dx*lambda + 0.000845391 *y*lens_ipow(dx, 2)*dy + -0.000267398 *x*dx*lens_ipow(lambda, 2) + -4.69365e-07 *x*lens_ipow(y, 2)*dx + 9.92867e-06 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -5.82853e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + -9.07503e-08 *lens_ipow(x, 3)*dx + -9.64752e-10 *lens_ipow(x, 4) + -0.0109555 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -1.58189e-06 *lens_ipow(y, 3)*dy*lambda + 0.00335945 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -4.69844e-11 *lens_ipow(y, 6)*lambda+0.0f;
const double dx32 =  + 0.553055 *dx*dy + 0.00861913 *x*dy + 0.0201459 *y*dx*lambda + 0.000317406 *x*y*lambda + 0.000845391 *lens_ipow(y, 2)*dx*dy + -0.033876 *x*lens_ipow(dx, 2)*dy + -0.000267398 *x*y*lens_ipow(lambda, 2) + -1.56455e-07 *x*lens_ipow(y, 3) + -9.07503e-08 *lens_ipow(x, 3)*y + -0.0219111 *y*dx*lens_ipow(lambda, 3)+0.0f;
const double dx33 =  + -0.235247  + 0.00853415 *lambda + 0.944901 *lens_ipow(dy, 2) + 0.276528 *lens_ipow(dx, 2) + 0.0242877 *y*dy + 0.000157676 *lens_ipow(y, 2) + 0.00861913 *x*dx + 5.6667e-05 *lens_ipow(x, 2) + 0.000422696 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.011292 *x*lens_ipow(dx, 3) + 0.00138029 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.98573e-05 *lens_ipow(x, 2)*y*dy + -3.95473e-07 *lens_ipow(y, 4)*lambda + 0.00503917 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -10.4188 *lens_ipow(dy, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx34 =  + 0.00853415 *dy + 0.000304997 *y + 0.010073 *y*lens_ipow(dx, 2) + 0.000317406 *x*y*dx + -0.000534797 *x*y*dx*lambda + -0.0328666 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -3.95473e-07 *lens_ipow(y, 4)*dy + 0.00335945 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda + -6.2513 *lens_ipow(dy, 5)*lens_ipow(lambda, 2) + -6.71206e-12 *lens_ipow(y, 7)+0.0f;
const double dx40 =  + 0.000278044 *dx + 5.76342e-06 *x + -0.0340015 *dx*lens_ipow(dy, 2) + -0.0377928 *lens_ipow(dx, 3) + -0.00112091 *y*dx*dy + -1.12695e-05 *lens_ipow(y, 2)*dx + -0.000577183 *x*lens_ipow(dy, 2) + -0.00189045 *x*lens_ipow(dx, 2) + -2.25007e-05 *x*y*dy + -2.71342e-07 *x*lens_ipow(y, 2) + -3.70333e-05 *lens_ipow(x, 2)*dx + -2.92317e-07 *lens_ipow(x, 3) + 0.000973169 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 4)+0.0f;
const double dx41 =  + -0.0290539 *lens_ipow(dy, 3) + -0.0335802 *lens_ipow(dx, 2)*dy + -0.0014633 *y*lens_ipow(dy, 2) + -0.00057194 *y*lens_ipow(dx, 2) + -2.94417e-05 *lens_ipow(y, 2)*dy + -2.37252e-07 *lens_ipow(y, 3) + -0.00112091 *x*dx*dy + -2.25391e-05 *x*y*dx + -1.12503e-05 *lens_ipow(x, 2)*dy + -2.71342e-07 *lens_ipow(x, 2)*y + 0.00194634 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 4)+0.0f;
const double dx42 =  + 0.0179239 *dx + 0.000278044 *x + -2.94127 *dx*lens_ipow(dy, 2) + -3.24105 *lens_ipow(dx, 3) + -0.0671603 *y*dx*dy + -0.00057194 *lens_ipow(y, 2)*dx + -0.0340015 *x*lens_ipow(dy, 2) + -0.113378 *x*lens_ipow(dx, 2) + -0.00112091 *x*y*dy + -1.12695e-05 *x*lens_ipow(y, 2) + -0.00189045 *lens_ipow(x, 2)*dx + -1.23444e-05 *lens_ipow(x, 3) + 0.00291951 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4)+0.0f;
const double dx43 =  + -2.63276 *lens_ipow(dy, 3) + -2.94127 *lens_ipow(dx, 2)*dy + -0.0871617 *y*lens_ipow(dy, 2) + -0.0335802 *y*lens_ipow(dx, 2) + -0.0014633 *lens_ipow(y, 2)*dy + -9.8139e-06 *lens_ipow(y, 3) + -0.0680029 *x*dx*dy + -0.00112091 *x*y*dx + -0.000577183 *lens_ipow(x, 2)*dy + -1.12503e-05 *lens_ipow(x, 2)*y + 0.00389267 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx44 =  + 1.91412  + -6.66479 *lambda + 30.4528 *lens_ipow(lambda, 3) + -47.9989 *lens_ipow(lambda, 4) + 23.0409 *lens_ipow(lambda, 5)+0.0f;
} break;
