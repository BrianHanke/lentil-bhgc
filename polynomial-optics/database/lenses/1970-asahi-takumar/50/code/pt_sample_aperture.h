case asahi__takumar__1970__50mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 51.3922 *begin_dx + 0.574039 *begin_x + 3.78005 *begin_dx*begin_lambda + 0.0617709 *begin_x*begin_lambda + -2.56761 *begin_dx*lens_ipow(begin_lambda, 2) + 10.1535 *begin_dx*lens_ipow(begin_dy, 2) + 4.05684 *lens_ipow(begin_dx, 3) + 1.14759 *begin_y*begin_dx*begin_dy + 0.013382 *lens_ipow(begin_y, 2)*begin_dx + -0.0427229 *begin_x*lens_ipow(begin_lambda, 2) + 0.685393 *begin_x*lens_ipow(begin_dy, 2) + 1.51615 *begin_x*lens_ipow(begin_dx, 2) + 0.0296789 *begin_x*begin_y*begin_dy + 0.000238686 *begin_x*lens_ipow(begin_y, 2) + 0.0371742 *lens_ipow(begin_x, 2)*begin_dx + 0.000205007 *lens_ipow(begin_x, 3) + 83.6811 *lens_ipow(begin_dx, 5) + 7.3973 *begin_x*lens_ipow(begin_dx, 4) + 0.269112 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + 0.00487586 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + -3.19466e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 4.46202e-05 *lens_ipow(begin_x, 4)*begin_dx + 1.49321e-07 *lens_ipow(begin_x, 5) + 0.134183 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 0.000567645 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 4) + -4.23201e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + -9.04733e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + 4.59872e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*begin_lambda;
  pred_y =  + 51.3364 *begin_dy + 0.574116 *begin_y + 3.66341 *begin_dy*begin_lambda + 0.0590391 *begin_y*begin_lambda + -2.4795 *begin_dy*lens_ipow(begin_lambda, 2) + 10.3778 *lens_ipow(begin_dy, 3) + 10.1878 *lens_ipow(begin_dx, 2)*begin_dy + -0.040445 *begin_y*lens_ipow(begin_lambda, 2) + 1.84056 *begin_y*lens_ipow(begin_dy, 2) + 0.658403 *begin_y*lens_ipow(begin_dx, 2) + 0.0431989 *lens_ipow(begin_y, 2)*begin_dy + 0.000234192 *lens_ipow(begin_y, 3) + 1.16759 *begin_x*begin_dx*begin_dy + 0.0291475 *begin_x*begin_y*begin_dx + 0.0134529 *lens_ipow(begin_x, 2)*begin_dy + 0.000233251 *lens_ipow(begin_x, 2)*begin_y + 0.000214349 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 3.78154e-06 *begin_x*lens_ipow(begin_y, 3)*begin_dx + 0.00507316 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + -1.33916e-06 *begin_x*lens_ipow(begin_y, 4)*begin_dx*begin_dy + -0.000122682 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + -2.23027e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 6.67463e-07 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dy, 2) + 0.678603 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 4)*begin_lambda + -0.00026519 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 0.000577562 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 4)*begin_dy + 3.76374e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 4) + 98.4147 *begin_x*begin_dx*lens_ipow(begin_dy, 7)*begin_lambda;
  pred_dx =  + 1.26969 *begin_dx + -0.00617084 *begin_x + -0.848284 *begin_dx*begin_lambda + -0.00362568 *begin_x*begin_lambda + 0.611969 *begin_dx*lens_ipow(begin_lambda, 2) + 1.00431 *begin_dx*lens_ipow(begin_dy, 2) + 1.60618 *lens_ipow(begin_dx, 3) + 0.0496957 *begin_y*begin_dx*begin_dy + 0.000699009 *lens_ipow(begin_y, 2)*begin_dx + 0.0252478 *begin_x*lens_ipow(begin_dy, 2) + 0.0992851 *begin_x*lens_ipow(begin_dx, 2) + 0.001412 *begin_x*begin_y*begin_dy + 1.39986e-05 *begin_x*lens_ipow(begin_y, 2) + 0.00255529 *lens_ipow(begin_x, 2)*begin_dx + 1.52262e-05 *lens_ipow(begin_x, 3) + -1.13656 *lens_ipow(begin_dx, 3)*begin_lambda + -0.0447044 *begin_x*lens_ipow(begin_dx, 2)*begin_lambda + -0.000772605 *lens_ipow(begin_x, 2)*begin_dx*begin_lambda + 0.00156808 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.000492808 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + 0.0030781 *begin_x*lens_ipow(begin_lambda, 4) + -4.35945e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + -3.86721e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_lambda, 2) + 7.68163e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + -2.52984e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + -1.8057e-07 *lens_ipow(begin_x, 4)*begin_dx + 0.0624125 *begin_y*begin_dx*lens_ipow(begin_dy, 3)*begin_lambda + -4.11949e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_lambda;
  pred_dy =  + 1.27189 *begin_dy + -0.00613766 *begin_y + -0.860125 *begin_dy*begin_lambda + -0.00372592 *begin_y*begin_lambda + 0.623224 *begin_dy*lens_ipow(begin_lambda, 2) + 1.65095 *lens_ipow(begin_dy, 3) + 1.01231 *lens_ipow(begin_dx, 2)*begin_dy + 0.100197 *begin_y*lens_ipow(begin_dy, 2) + 0.025249 *begin_y*lens_ipow(begin_dx, 2) + 0.00255822 *lens_ipow(begin_y, 2)*begin_dy + 1.52115e-05 *lens_ipow(begin_y, 3) + 0.0499707 *begin_x*begin_dx*begin_dy + 0.00141304 *begin_x*begin_y*begin_dx + 0.000702066 *lens_ipow(begin_x, 2)*begin_dy + 1.40264e-05 *lens_ipow(begin_x, 2)*begin_y + -1.19302 *lens_ipow(begin_dy, 3)*begin_lambda + -0.0453961 *begin_y*lens_ipow(begin_dy, 2)*begin_lambda + -0.000751819 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 0.00325564 *begin_y*lens_ipow(begin_lambda, 4) + -3.75277e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 2) + -2.45459e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 8.67476e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -1.88337e-07 *lens_ipow(begin_y, 4)*begin_dy + -4.52788e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.00049582 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 0.00156756 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + 0.0609364 *begin_x*lens_ipow(begin_dx, 3)*begin_dy*begin_lambda + -4.38731e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy*begin_lambda;
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 51.3922  + 3.78005 *begin_lambda + -2.56761 *lens_ipow(begin_lambda, 2) + 10.1535 *lens_ipow(begin_dy, 2) + 12.1705 *lens_ipow(begin_dx, 2) + 1.14759 *begin_y*begin_dy + 0.013382 *lens_ipow(begin_y, 2) + 3.03229 *begin_x*begin_dx + 0.0371742 *lens_ipow(begin_x, 2) + 418.406 *lens_ipow(begin_dx, 4) + 29.5892 *begin_x*lens_ipow(begin_dx, 3) + 0.807337 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 0.00975172 *lens_ipow(begin_x, 3)*begin_dx + 4.46202e-05 *lens_ipow(begin_x, 4) + 0.268367 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 3) + -4.23201e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -9.04733e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dy + 9.19744e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx*begin_lambda+0.0f;
  dx1_domega0(0, 1) =  + 20.307 *begin_dx*begin_dy + 1.14759 *begin_y*begin_dx + 1.37079 *begin_x*begin_dy + 0.0296789 *begin_x*begin_y + 0.40255 *begin_x*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.00227058 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 3) + -8.46401e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -9.04733e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx+0.0f;
  dx1_domega0(1, 0) =  + 20.3757 *begin_dx*begin_dy + 1.31681 *begin_y*begin_dx + 1.16759 *begin_x*begin_dy + 0.0291475 *begin_x*begin_y + 0.000428698 *lens_ipow(begin_y, 3)*begin_dx + 3.78154e-06 *begin_x*lens_ipow(begin_y, 3) + 0.0101463 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -1.33916e-06 *begin_x*lens_ipow(begin_y, 4)*begin_dy + -0.000245363 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -2.23027e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dy + 0.678603 *begin_x*begin_y*lens_ipow(begin_dy, 4)*begin_lambda + -0.00026519 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2)*begin_lambda + 0.00231025 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3)*begin_dy + 1.50549e-05 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 3) + 98.4147 *begin_x*lens_ipow(begin_dy, 7)*begin_lambda+0.0f;
  dx1_domega0(1, 1) =  + 51.3364  + 3.66341 *begin_lambda + -2.4795 *lens_ipow(begin_lambda, 2) + 31.1334 *lens_ipow(begin_dy, 2) + 10.1878 *lens_ipow(begin_dx, 2) + 3.68112 *begin_y*begin_dy + 0.0431989 *lens_ipow(begin_y, 2) + 1.16759 *begin_x*begin_dx + 0.0134529 *lens_ipow(begin_x, 2) + 0.00507316 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + -1.33916e-06 *begin_x*lens_ipow(begin_y, 4)*begin_dx + -0.000122682 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -2.23027e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx + 1.33493e-06 *lens_ipow(begin_x, 4)*begin_y*begin_dy + 2.71441 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 3)*begin_lambda + -0.000530381 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda + 0.000577562 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 4) + 688.903 *begin_x*begin_dx*lens_ipow(begin_dy, 6)*begin_lambda+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
