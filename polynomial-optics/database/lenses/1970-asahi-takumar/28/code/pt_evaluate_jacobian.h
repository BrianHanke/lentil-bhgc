case asahi__takumar__1970__28mm:
{
const double dx00 =  + -0.0787885  + -0.00673323 *lambda + 0.370001 *lens_ipow(dy, 2) + 0.885486 *lens_ipow(dx, 2) + 0.0440776 *y*dy + 0.000923606 *lens_ipow(y, 2) + 0.132056 *x*dx + 0.00278839 *lens_ipow(x, 2) + 0.000234423 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -3.63586e-05 *lens_ipow(x, 3)*y*dx*dy + 1.43888e-05 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -0.00561359 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lambda + -3.21295e-08 *x*lens_ipow(y, 5)*dx*dy + 2.27211e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 1.01813e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2) + -2.69845e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 1.6123e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dy, 2)+0.0f;
const double dx01 =  + 0.511827 *dx*dy + 0.0422257 *y*dx + 0.0440776 *x*dy + 0.00184721 *x*y + 0.0370552 *y*dx*lens_ipow(dy, 2) + -9.08966e-06 *lens_ipow(x, 4)*dx*dy + -0.0112272 *x*y*lens_ipow(dx, 4)*lambda + -8.03238e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy + 1.51474e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 1.3575e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2) + -2.02384e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + 6.44919e-08 *lens_ipow(x, 5)*y*lens_ipow(dy, 2)+0.0f;
const double dx02 =  + 27.6047  + 0.301944 *lambda + -5.30653 *lens_ipow(dy, 2) + -15.1973 *lens_ipow(dx, 2) + 0.511827 *y*dy + 0.0211129 *lens_ipow(y, 2) + 1.77097 *x*dx + 0.066028 *lens_ipow(x, 2) + 0.0185276 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000175817 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -9.08966e-06 *lens_ipow(x, 4)*y*dy + -0.0224544 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + -1.60648e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy + 1.51474e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + 6.78752e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + -6.74613e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy+0.0f;
const double dx03 =  + -10.6131 *dx*dy + 0.511827 *y*dx + 0.740002 *x*dy + 0.0440776 *x*y + 0.0370552 *lens_ipow(y, 2)*dx*dy + -9.08966e-06 *lens_ipow(x, 4)*y*dx + 5.75553e-06 *lens_ipow(x, 5)*dy + -1.60648e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx + -6.74613e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 6.44919e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*dy+0.0f;
const double dx04 =  + 0.301944 *dx + -0.00673323 *x + -0.00561359 *x*lens_ipow(y, 2)*lens_ipow(dx, 4) + 1.51474e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx10 =  + 0.488387 *dx*dy + 0.043765 *y*dx + 0.0421854 *x*dy + 0.00184683 *x*y + -0.000138202 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -1.00617e-05 *lens_ipow(y, 4)*dx*dy + 0.000535162 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 1.12718e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 0.000225443 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -2.01209e-07 *x*lens_ipow(y, 4)*dy*lambda+0.0f;
const double dx11 =  + -0.0789689  + -0.00657108 *lambda + 0.888166 *lens_ipow(dy, 2) + 0.354009 *lens_ipow(dx, 2) + 0.130558 *y*dy + 0.0027871 *lens_ipow(y, 2) + 0.043765 *x*dx + 0.000923415 *lens_ipow(x, 2) + -0.00105623 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 1.77037e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -0.000414605 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + -4.0247e-05 *x*lens_ipow(y, 3)*dx*dy + 0.000535162 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 1.12718e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -4.02418e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + 4.94845e-07 *lens_ipow(y, 5)*lens_ipow(dy, 3)+0.0f;
const double dx12 =  + -10.5037 *dx*dy + 0.708018 *y*dx + 0.488387 *x*dy + 0.043765 *x*y + 7.08149e-06 *lens_ipow(y, 5)*dx + -0.000414605 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + -1.00617e-05 *x*lens_ipow(y, 4)*dy + 0.000535162 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 3.75726e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.000112722 *lens_ipow(x, 4)*dx*dy+0.0f;
const double dx13 =  + 27.2138  + 1.74778 *lambda + -1.30978 *lens_ipow(lambda, 2) + -14.5792 *lens_ipow(dy, 2) + -5.25186 *lens_ipow(dx, 2) + 1.77633 *y*dy + 0.065279 *lens_ipow(y, 2) + 0.488387 *x*dx + 0.0210927 *lens_ipow(x, 2) + -0.000704153 *lens_ipow(y, 3)*dy + -1.00617e-05 *x*lens_ipow(y, 4)*dx + 0.000267581 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 5.63608e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -1.00604e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + 2.47422e-07 *lens_ipow(y, 6)*lens_ipow(dy, 2)+0.0f;
const double dx14 =  + 1.74778 *dy + -0.00657108 *y + -2.61955 *dy*lambda + -1.00604e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy+0.0f;
const double dx20 =  + -0.035405  + 0.000318886 *lambda + 0.00569662 *lens_ipow(dy, 2) + 0.0205933 *lens_ipow(dx, 2) + 0.000213389 *y*dy + 1.75372e-05 *lens_ipow(y, 2) + 0.000827688 *x*dx + 5.22065e-05 *lens_ipow(x, 2) + -8.5934e-07 *lens_ipow(y, 3)*dy + -1.52291e-08 *lens_ipow(y, 4) + -4.17526e-06 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -1.32955e-08 *lens_ipow(x, 5)*dx + -2.95347e-10 *lens_ipow(x, 6) + -0.0730298 *lens_ipow(dx, 6)*lambda + -4.66425e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lambda + 2.00709e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + -0.859484 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx21 =  + 0.0134198 *dx*dy + 0.000410783 *y*dx + 0.000213389 *x*dy + 3.50745e-05 *x*y + -2.57802e-06 *x*lens_ipow(y, 2)*dy + -6.09165e-08 *x*lens_ipow(y, 3) + -0.030078 *dx*lens_ipow(dy, 3)*lambda + 1.17845e-05 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -1.25258e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -1.55475e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy*lambda + 1.00355e-08 *lens_ipow(x, 4)*y*dx*lambda+0.0f;
const double dx22 =  + -0.231266  + 0.295927 *lens_ipow(dy, 2) + 0.965973 *lens_ipow(dx, 2) + 0.0134198 *y*dy + 0.000205392 *lens_ipow(y, 2) + 0.0411866 *x*dx + 0.000413844 *lens_ipow(x, 2) + -0.030078 *y*lens_ipow(dy, 3)*lambda + 8.8384e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -8.35052e-06 *x*lens_ipow(y, 3)*dx*dy + -2.21591e-09 *lens_ipow(x, 6) + -0.438179 *x*lens_ipow(dx, 5)*lambda + -3.1095e-05 *lens_ipow(x, 3)*y*dx*dy*lambda + 5.01773e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + -3.43794 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + 0.591853 *dx*dy + 0.0134198 *y*dx + 0.0113932 *x*dy + 0.000213389 *x*y + -8.5934e-07 *x*lens_ipow(y, 3) + -0.0902341 *y*dx*lens_ipow(dy, 2)*lambda + -4.17526e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + -1.55475e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lambda + -1.71897 *x*lens_ipow(dx, 4)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx24 =  + 0.000318886 *x + -0.030078 *y*dx*lens_ipow(dy, 3) + -0.0730298 *x*lens_ipow(dx, 6) + -1.55475e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*dy + 5.01773e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx + -1.71897 *x*lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx30 =  + 0.004657 *dx*dy + 2.83666e-05 *x*y + 0.0347067 *dx*lens_ipow(dy, 3) + -7.9326e-07 *lens_ipow(y, 3)*dx + 0.00380829 *x*lens_ipow(dy, 3) + 0.00379985 *x*lens_ipow(dx, 2)*dy + 0.000103683 *x*y*lens_ipow(dy, 2) + -4.54771e-08 *x*lens_ipow(y, 3) + 0.000239603 *lens_ipow(x, 2)*dx*dy + 4.57134e-06 *lens_ipow(x, 3)*dy + -5.24086e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)+0.0f;
const double dx31 =  + -0.0353581  + 0.000372305 *lambda + 0.0170548 *lens_ipow(dy, 2) + 0.00242289 *lens_ipow(dx, 2) + 0.000628614 *y*dy + 4.9609e-05 *lens_ipow(y, 2) + 1.41833e-05 *lens_ipow(x, 2) + -2.37978e-06 *x*lens_ipow(y, 2)*dx + 5.18416e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -6.82157e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0219504 *lens_ipow(dy, 4)*lambda + -0.0591546 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -1.30599e-08 *lens_ipow(y, 5)*dy + -2.89313e-10 *lens_ipow(y, 6) + -1.74695e-06 *lens_ipow(x, 3)*lens_ipow(dx, 3)+0.0f;
const double dx32 =  + 0.302687 *dx*dy + 0.00484578 *y*dx + 0.004657 *x*dy + 0.0347067 *x*lens_ipow(dy, 3) + -7.9326e-07 *x*lens_ipow(y, 3) + 0.00379985 *lens_ipow(x, 2)*dx*dy + 7.98676e-05 *lens_ipow(x, 3)*dy + -0.118309 *y*dx*lens_ipow(dy, 2)*lambda + -5.24086e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)+0.0f;
const double dx33 =  + -0.227173  + 0.737824 *lens_ipow(dy, 2) + 0.151344 *lens_ipow(dx, 2) + 0.0341095 *y*dy + 0.000314307 *lens_ipow(y, 2) + 0.004657 *x*dx + 0.10412 *x*dx*lens_ipow(dy, 2) + 0.00571243 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00189992 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000103683 *lens_ipow(x, 2)*y*dy + 7.98676e-05 *lens_ipow(x, 3)*dx + 1.14283e-06 *lens_ipow(x, 4) + -0.0878017 *y*lens_ipow(dy, 3)*lambda + -0.118309 *y*lens_ipow(dx, 2)*dy*lambda + -2.17665e-09 *lens_ipow(y, 6)+0.0f;
const double dx34 =  + 0.000372305 *y + -0.0219504 *y*lens_ipow(dy, 4) + -0.0591546 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx40 =  + -0.00189247 *dx + -5.30252e-05 *x + 0.000225346 *y*dx*dy + 0.000238187 *x*lens_ipow(dy, 2) + -5.67003e-07 *x*lens_ipow(y, 2) + -3.18601e-05 *lens_ipow(x, 2)*dx + -1.23911e-06 *lens_ipow(x, 3) + -7.90105e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.15278e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -5.04871e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)+0.0f;
const double dx41 =  + -0.00241047 *dy + -8.94162e-05 *y + 0.000226923 *y*lens_ipow(dx, 2) + 0.000225346 *x*dx*dy + -5.67003e-07 *lens_ipow(x, 2)*y + -1.8971e-07 *lens_ipow(y, 4)*dy + -6.15866e-09 *lens_ipow(y, 5) + -7.90105e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.15278e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -5.04871e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)+0.0f;
const double dx42 =  + -0.0543304 *dx + -0.00189247 *x + -1.18737 *dx*lens_ipow(dy, 2) + -1.08597 *lens_ipow(dx, 3) + 0.000226923 *lens_ipow(y, 2)*dx + 0.000225346 *x*y*dy + -1.062e-05 *lens_ipow(x, 3) + -7.90105e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 3.84259e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy+0.0f;
const double dx43 =  + -0.0867148 *dy + -0.00241047 *y + -1.18737 *lens_ipow(dx, 2)*dy + 0.000225346 *x*y*dx + 0.000238187 *lens_ipow(x, 2)*dy + -6.9115 *lens_ipow(dy, 5) + -3.7942e-08 *lens_ipow(y, 5) + -7.90105e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 3.84259e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx+0.0f;
const double dx44 =  + 2.00847  + -8.73776 *lambda + 13.4187 *lens_ipow(lambda, 2) + -7.0911 *lens_ipow(lambda, 3)+0.0f;
} break;
