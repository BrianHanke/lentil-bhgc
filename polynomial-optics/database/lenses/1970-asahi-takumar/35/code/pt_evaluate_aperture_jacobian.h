case asahi__takumar__1970__35mm:
{
const double dx00 =  + 0.585227  + 0.0149211 *lambda + 0.66148 *lens_ipow(dy, 2) + 1.86233 *lens_ipow(dx, 2) + 0.0417592 *y*dy + 0.000476698 *lens_ipow(y, 2) + 0.124553 *x*dx + 0.00148029 *lens_ipow(x, 2) + 0.000155639 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.000679485 *x*y*dx*dy + 3.2357e-05 *lens_ipow(x, 2)*y*dy + -3.06414e-07 *lens_ipow(x, 4) + 0.00240794 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 1.36092e-08 *lens_ipow(y, 5)*dy + 0.00181347 *lens_ipow(y, 2)*lens_ipow(dy, 4)*lambda + 0.0165773 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + -2.77953e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + -0.0452142 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -1.57784e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx01 =  + 1.16927 *dx*dy + 0.0388108 *y*dx + 0.0417592 *x*dy + 0.000953396 *x*y + 0.000311277 *x*y*lens_ipow(dx, 2) + -0.000339743 *lens_ipow(x, 2)*dx*dy + 1.07857e-05 *lens_ipow(x, 3)*dy + 6.80462e-08 *x*lens_ipow(y, 4)*dy + -0.0149522 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy*lambda + -0.000345801 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lambda + 0.00362694 *x*y*lens_ipow(dy, 4)*lambda + -6.20374 *dx*lens_ipow(dy, 7) + -2.08465e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + -7.88922e-07 *lens_ipow(x, 4)*y*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx02 =  + 36.4268  + 0.656534 *lambda + 7.4444 *lens_ipow(dy, 2) + 23.0987 *lens_ipow(dx, 2) + 1.16927 *y*dy + 0.0194054 *lens_ipow(y, 2) + 3.72467 *x*dx + 0.0622766 *lens_ipow(x, 2) + 0.000311277 *x*lens_ipow(y, 2)*dx + -0.000339743 *lens_ipow(x, 2)*y*dy + -0.0149522 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lambda + -0.00025935 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda + -6.20374 *y*lens_ipow(dy, 7) + -6.94883e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + -3.94461e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx03 =  + 14.8888 *dx*dy + 1.16927 *y*dx + 1.32296 *x*dy + 0.0417592 *x*y + -0.000339743 *lens_ipow(x, 2)*y*dx + 1.07857e-05 *lens_ipow(x, 3)*y + 0.00160529 *lens_ipow(x, 3)*dy*lambda + 1.36092e-08 *x*lens_ipow(y, 5) + -0.00498406 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lambda + 0.00725388 *x*lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda + 0.0221031 *lens_ipow(x, 3)*lens_ipow(dy, 3)*lambda + -43.4262 *y*dx*lens_ipow(dy, 6) + -6.94883e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + -0.0602856 *lens_ipow(x, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -7.88922e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy*lambda+0.0f;
const double dx04 =  + 0.656534 *dx + 0.0149211 *x + 0.000802646 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -0.00498406 *lens_ipow(y, 3)*lens_ipow(dx, 3)*dy + -8.64501e-05 *lens_ipow(y, 4)*lens_ipow(dx, 3) + 0.00181347 *x*lens_ipow(y, 2)*lens_ipow(dy, 4) + 0.00552577 *lens_ipow(x, 3)*lens_ipow(dy, 4) + -0.0452142 *lens_ipow(x, 3)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -3.94461e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)+0.0f;
const double dx10 =  + 1.18781 *dx*dy + 0.0415238 *y*dx + 0.0397337 *x*dy + 0.000959493 *x*y + -0.000477062 *lens_ipow(y, 2)*dx*dy + 1.82744e-05 *lens_ipow(y, 3)*dx + 0.000495238 *x*y*lens_ipow(dy, 2) + 0.00101902 *x*y*lens_ipow(dx, 2) + -0.000959848 *lens_ipow(x, 2)*dx*dy + 3.5781e-05 *lens_ipow(x, 2)*y*dx + -2.31266e-05 *lens_ipow(x, 3)*dy + -1.49987e-05 *lens_ipow(y, 3)*dx*lambda + -1.02098e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy+0.0f;
const double dx11 =  + 0.585801  + 0.0145999 *lambda + 1.84738 *lens_ipow(dy, 2) + 0.639896 *lens_ipow(dx, 2) + 0.124955 *y*dy + 0.00146725 *lens_ipow(y, 2) + 0.0415238 *x*dx + 0.000479747 *lens_ipow(x, 2) + -0.0018225 *y*dy*lambda + -2.97949e-07 *lens_ipow(y, 4) + -0.000954124 *x*y*dx*dy + 5.48233e-05 *x*lens_ipow(y, 2)*dx + 0.000247619 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.000509512 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 1.1927e-05 *lens_ipow(x, 3)*dx + 0.00578416 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -4.4996e-05 *x*lens_ipow(y, 2)*dx*lambda + -0.0102122 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -1.3613e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 0.00725127 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 6)+0.0f;
const double dx12 =  + 14.7341 *dx*dy + 1.27979 *y*dx + 1.18781 *x*dy + 0.0415238 *x*y + -0.000477062 *x*lens_ipow(y, 2)*dy + 1.82744e-05 *x*lens_ipow(y, 3) + 0.00101902 *lens_ipow(x, 2)*y*dx + -0.000319949 *lens_ipow(x, 3)*dy + 1.1927e-05 *lens_ipow(x, 3)*y + 0.00385611 *lens_ipow(y, 3)*dx*lambda + -1.49987e-05 *x*lens_ipow(y, 3)*lambda + -0.00680811 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 3) + -3.40325e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 0.00483418 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 6)+0.0f;
const double dx13 =  + 36.4154  + 0.687486 *lambda + 22.3313 *lens_ipow(dy, 2) + 7.36703 *lens_ipow(dx, 2) + 3.69476 *y*dy + 0.0624776 *lens_ipow(y, 2) + 1.18781 *x*dx + 0.0198668 *lens_ipow(x, 2) + -0.000911249 *lens_ipow(y, 2)*lambda + -0.000477062 *x*lens_ipow(y, 2)*dx + 0.000495238 *lens_ipow(x, 2)*y*dy + -0.000319949 *lens_ipow(x, 3)*dx + -5.78164e-06 *lens_ipow(x, 4) + -3.40325e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx+0.0f;
const double dx14 =  + 0.687486 *dy + 0.0145999 *y + -0.000911249 *lens_ipow(y, 2)*dy + 0.00192805 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -1.49987e-05 *x*lens_ipow(y, 3)*dx + -0.0102122 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.0145025 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx20 =  + -0.00755091  + -0.0111657 *lambda + 0.00746238 *lens_ipow(lambda, 2) + 0.0406487 *lens_ipow(dy, 2) + 0.00306476 *y*dy + 4.31746e-05 *lens_ipow(y, 2) + 0.00903448 *x*dx + 0.000128712 *lens_ipow(x, 2) + 0.611396 *lens_ipow(dx, 2)*lambda + -1.07671 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.00260103 *y*lens_ipow(dx, 2)*dy + 0.00466503 *x*lens_ipow(dx, 3) + 0.632503 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 2.44432e-05 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -1.36635e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + 2.93347e-06 *lens_ipow(x, 4)*lens_ipow(dy, 4) + 1.70947e-07 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*dy+0.0f;
const double dx21 =  + 0.0742707 *dx*dy + 0.00309427 *y*dx + 0.00306476 *x*dy + 8.63491e-05 *x*y + 0.00639904 *y*dx*lens_ipow(dy, 2) + -1.44822e-06 *lens_ipow(y, 3)*dx + 0.00260103 *x*lens_ipow(dx, 2)*dy + 0.0952564 *dx*lens_ipow(dy, 3)*lambda + 2.44432e-05 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -6.83176e-09 *lens_ipow(x, 4)*y*dx*lambda + 3.41894e-08 *lens_ipow(x, 5)*lens_ipow(dx, 2)*dy+0.0f;
const double dx22 =  + 1.19152  + -0.433378 *lambda + 1.08799 *lens_ipow(dy, 2) + 3.45728 *lens_ipow(dx, 2) + 0.0742707 *y*dy + 0.00154714 *lens_ipow(y, 2) + 0.00451724 *lens_ipow(x, 2) + 1.22279 *x*dx*lambda + 0.315707 *lens_ipow(lambda, 4) + -3.15717 *lens_ipow(dx, 4) + 0.00319952 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -3.62056e-07 *lens_ipow(y, 4) + -2.15341 *x*dx*lens_ipow(lambda, 2) + 0.00520206 *x*y*dx*dy + 0.00699754 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.0952564 *y*lens_ipow(dy, 3)*lambda + 1.26501 *x*dx*lens_ipow(lambda, 3) + 1.22216e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -3.41588e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + 6.83788e-08 *lens_ipow(x, 5)*y*dx*dy+0.0f;
const double dx23 =  + 2.17599 *dx*dy + 0.0742707 *y*dx + 0.0812974 *x*dy + 0.00306476 *x*y + 0.00639904 *lens_ipow(y, 2)*dx*dy + 0.00260103 *x*y*lens_ipow(dx, 2) + 0.285769 *y*dx*lens_ipow(dy, 2)*lambda + 2.44432e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 2.34677e-06 *lens_ipow(x, 5)*lens_ipow(dy, 3) + 3.41894e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)+0.0f;
const double dx24 =  + -0.433378 *dx + -0.0111657 *x + 0.0149248 *x*lambda + 0.611396 *x*lens_ipow(dx, 2) + 1.26283 *dx*lens_ipow(lambda, 3) + -2.15341 *x*lens_ipow(dx, 2)*lambda + 0.0952564 *y*dx*lens_ipow(dy, 3) + 1.89751 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -3.41588e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx+0.0f;
const double dx30 =  + 0.0735379 *dx*dy + 0.0029361 *y*dx + 0.0028273 *x*dy + 8.11222e-05 *x*y + -0.000140652 *lens_ipow(y, 2)*dx*dy + 0.00465075 *x*lens_ipow(dy, 3) + 0.00463393 *x*lens_ipow(dx, 2)*dy + 0.000113359 *x*y*lens_ipow(dy, 2) + 2.05778e-08 *x*lens_ipow(y, 3) + 0.000716104 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy*lambda + -5.11565e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.26946e-07 *lens_ipow(x, 5)*lens_ipow(dy, 3)*lambda + 1.03847e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx31 =  + -0.00882766  + -0.00488642 *lambda + 0.106927 *lens_ipow(dy, 2) + 0.0382379 *lens_ipow(dx, 2) + 0.00870706 *y*dy + 0.000125184 *lens_ipow(y, 2) + 0.0029361 *x*dx + 4.05611e-05 *lens_ipow(x, 2) + 0.00592634 *y*lens_ipow(dy, 3) + -0.000281304 *x*y*dx*dy + 5.66795e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 3.08666e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00414323 *lens_ipow(lambda, 5) + 0.0672419 *lens_ipow(dy, 4)*lambda + 3.73291e-07 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.00143221 *x*y*lens_ipow(dx, 3)*dy*lambda + -7.67347e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.07695e-07 *lens_ipow(x, 5)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx32 =  + 2.0255 *dx*dy + 0.0764758 *y*dx + 0.0735379 *x*dy + 0.0029361 *x*y + -0.000140652 *x*lens_ipow(y, 2)*dy + 0.00463393 *lens_ipow(x, 2)*dx*dy + 1.49316e-07 *lens_ipow(y, 5)*dx + 0.00214831 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lambda + -5.11565e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 6.23085e-07 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx33 =  + 1.30815  + -0.941321 *lambda + 0.655284 *lens_ipow(lambda, 2) + 2.88381 *lens_ipow(dy, 2) + 1.01275 *lens_ipow(dx, 2) + 0.213854 *y*dy + 0.00435353 *lens_ipow(y, 2) + 0.0735379 *x*dx + 0.00141365 *lens_ipow(x, 2) + 0.00888952 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000140652 *x*lens_ipow(y, 2)*dx + 0.00697613 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00231696 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000113359 *lens_ipow(x, 2)*y*dy + 0.268968 *y*lens_ipow(dy, 3)*lambda + 0.000716104 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + -5.11565e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -6.34731e-08 *lens_ipow(x, 6)*lens_ipow(dy, 2)*lambda + 4.1539e-07 *lens_ipow(x, 5)*y*lens_ipow(dx, 3)*dy+0.0f;
const double dx34 =  + -0.941321 *dy + -0.00488642 *y + 1.31057 *dy*lambda + 0.0207162 *y*lens_ipow(lambda, 4) + 0.0672419 *y*lens_ipow(dy, 4) + 0.000716104 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + -2.11577e-08 *lens_ipow(x, 6)*lens_ipow(dy, 3)+0.0f;
const double dx40 =  + -0.00153474 *dx + -3.88736e-05 *x + -0.000587374 *y*dx*dy + -2.22842e-05 *lens_ipow(y, 2)*dx + -0.000324968 *x*lens_ipow(dy, 2) + -4.59658e-05 *x*y*dy + -1.20841e-06 *x*lens_ipow(y, 2) + -0.000851796 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -5.34073e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -1.23909e-06 *lens_ipow(x, 4)*dx + -1.0759e-08 *lens_ipow(x, 5) + 0.229394 *lens_ipow(dx, 7) + -2.5248e-12 *lens_ipow(x, 3)*lens_ipow(y, 4)+0.0f;
const double dx41 =  + 1.58449e-05 *y*lambda + -0.0490779 *lens_ipow(dy, 3) + -0.00380888 *y*lens_ipow(dy, 2) + -0.000282374 *y*lens_ipow(dx, 2) + -0.000127415 *lens_ipow(y, 2)*dy + -1.64207e-06 *lens_ipow(y, 3) + -0.000587374 *x*dx*dy + -4.45684e-05 *x*y*dx + -2.29829e-05 *lens_ipow(x, 2)*dy + -1.20841e-06 *lens_ipow(x, 2)*y + -2.5248e-12 *lens_ipow(x, 4)*lens_ipow(y, 3)+0.0f;
const double dx42 =  + -0.0609777 *dx + -0.00153474 *x + -0.832733 *dx*lens_ipow(dy, 2) + -1.33317 *lens_ipow(dx, 3) + -0.000282374 *lens_ipow(y, 2)*dx + -0.000587374 *x*y*dy + -2.22842e-05 *x*lens_ipow(y, 2) + -0.000851796 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -2.67036e-05 *lens_ipow(x, 4)*dx + -2.47819e-07 *lens_ipow(x, 5) + 1.60576 *x*lens_ipow(dx, 6)+0.0f;
const double dx43 =  + -3.43106 *lens_ipow(dy, 3) + -0.832733 *lens_ipow(dx, 2)*dy + -0.147234 *y*lens_ipow(dy, 2) + -0.00380888 *lens_ipow(y, 2)*dy + -4.24716e-05 *lens_ipow(y, 3) + -0.000587374 *x*y*dx + -0.000324968 *lens_ipow(x, 2)*dy + -2.29829e-05 *lens_ipow(x, 2)*y+0.0f;
const double dx44 =  + 4.49793  + -28.1188 *lambda + 68.9475 *lens_ipow(lambda, 2) + 7.92243e-06 *lens_ipow(y, 2) + -76.8682 *lens_ipow(lambda, 3) + 32.5105 *lens_ipow(lambda, 4)+0.0f;
} break;
