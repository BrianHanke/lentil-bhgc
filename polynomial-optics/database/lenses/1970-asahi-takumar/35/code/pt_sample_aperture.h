case asahi__takumar__1970__35mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 36.4268 *begin_dx + 0.585227 *begin_x + 0.656534 *begin_dx*begin_lambda + 0.0149211 *begin_x*begin_lambda + 7.4444 *begin_dx*lens_ipow(begin_dy, 2) + 7.69957 *lens_ipow(begin_dx, 3) + 1.16927 *begin_y*begin_dx*begin_dy + 0.0194054 *lens_ipow(begin_y, 2)*begin_dx + 0.66148 *begin_x*lens_ipow(begin_dy, 2) + 1.86233 *begin_x*lens_ipow(begin_dx, 2) + 0.0417592 *begin_x*begin_y*begin_dy + 0.000476698 *begin_x*lens_ipow(begin_y, 2) + 0.0622766 *lens_ipow(begin_x, 2)*begin_dx + 0.000493428 *lens_ipow(begin_x, 3) + 0.000155639 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.000339743 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + 1.07857e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dy + -6.12827e-08 *lens_ipow(begin_x, 5) + 0.000802646 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2)*begin_lambda + 1.36092e-08 *begin_x*lens_ipow(begin_y, 5)*begin_dy + -0.00498406 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*begin_dy*begin_lambda + -8.64501e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3)*begin_lambda + 0.00181347 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4)*begin_lambda + 0.00552577 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 4)*begin_lambda + -6.20374 *begin_y*begin_dx*lens_ipow(begin_dy, 7) + -6.94883e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -0.0150714 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 3) + -3.94461e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda;
  pred_y =  + 36.4154 *begin_dy + 0.585801 *begin_y + 0.687486 *begin_dy*begin_lambda + 0.0145999 *begin_y*begin_lambda + 7.44378 *lens_ipow(begin_dy, 3) + 7.36703 *lens_ipow(begin_dx, 2)*begin_dy + 1.84738 *begin_y*lens_ipow(begin_dy, 2) + 0.639896 *begin_y*lens_ipow(begin_dx, 2) + 0.0624776 *lens_ipow(begin_y, 2)*begin_dy + 0.000489083 *lens_ipow(begin_y, 3) + 1.18781 *begin_x*begin_dx*begin_dy + 0.0415238 *begin_x*begin_y*begin_dx + 0.0198668 *lens_ipow(begin_x, 2)*begin_dy + 0.000479747 *lens_ipow(begin_x, 2)*begin_y + -0.000911249 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + -5.95897e-08 *lens_ipow(begin_y, 5) + -0.000477062 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 1.82744e-05 *begin_x*lens_ipow(begin_y, 3)*begin_dx + 0.000247619 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + 0.000509512 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2) + -0.000319949 *lens_ipow(begin_x, 3)*begin_dx*begin_dy + 1.1927e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dx + -5.78164e-06 *lens_ipow(begin_x, 4)*begin_dy + 0.00192805 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_lambda + -1.49987e-05 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_lambda + -0.00340406 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -3.40325e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx*begin_dy + 0.00241709 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6);
  pred_dx =  + 1.19152 *begin_dx + -0.00755091 *begin_x + -0.433378 *begin_dx*begin_lambda + -0.0111657 *begin_x*begin_lambda + 1.08799 *begin_dx*lens_ipow(begin_dy, 2) + 1.15243 *lens_ipow(begin_dx, 3) + 0.0742707 *begin_y*begin_dx*begin_dy + 0.00154714 *lens_ipow(begin_y, 2)*begin_dx + 0.00746238 *begin_x*lens_ipow(begin_lambda, 2) + 0.0406487 *begin_x*lens_ipow(begin_dy, 2) + 0.00306476 *begin_x*begin_y*begin_dy + 4.31746e-05 *begin_x*lens_ipow(begin_y, 2) + 0.00451724 *lens_ipow(begin_x, 2)*begin_dx + 4.29041e-05 *lens_ipow(begin_x, 3) + 0.611396 *begin_x*lens_ipow(begin_dx, 2)*begin_lambda + 0.315707 *begin_dx*lens_ipow(begin_lambda, 4) + -0.631435 *lens_ipow(begin_dx, 5) + 0.00319952 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + -3.62056e-07 *lens_ipow(begin_y, 4)*begin_dx + -1.07671 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + 0.00260103 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 0.00233251 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + 0.0952564 *begin_y*begin_dx*lens_ipow(begin_dy, 3)*begin_lambda + 0.632503 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + 1.22216e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + -3.41588e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 5.86693e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 4) + 3.41894e-08 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 2)*begin_dy;
  pred_dy =  + 1.30815 *begin_dy + -0.00882766 *begin_y + -0.941321 *begin_dy*begin_lambda + -0.00488642 *begin_y*begin_lambda + 0.655284 *begin_dy*lens_ipow(begin_lambda, 2) + 0.96127 *lens_ipow(begin_dy, 3) + 1.01275 *lens_ipow(begin_dx, 2)*begin_dy + 0.106927 *begin_y*lens_ipow(begin_dy, 2) + 0.0382379 *begin_y*lens_ipow(begin_dx, 2) + 0.00435353 *lens_ipow(begin_y, 2)*begin_dy + 4.1728e-05 *lens_ipow(begin_y, 3) + 0.0735379 *begin_x*begin_dx*begin_dy + 0.0029361 *begin_x*begin_y*begin_dx + 0.00141365 *lens_ipow(begin_x, 2)*begin_dy + 4.05611e-05 *lens_ipow(begin_x, 2)*begin_y + 0.00296317 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + -0.000140652 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.00232538 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 0.00231696 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + 5.66795e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + 1.02889e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 0.00414323 *begin_y*lens_ipow(begin_lambda, 5) + 0.0672419 *begin_y*lens_ipow(begin_dy, 4)*begin_lambda + 7.46582e-08 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + 0.000716104 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy*begin_lambda + -2.55782e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -2.11577e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dy, 3)*begin_lambda + 2.07695e-07 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2);
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 36.4268  + 0.656534 *begin_lambda + 7.4444 *lens_ipow(begin_dy, 2) + 23.0987 *lens_ipow(begin_dx, 2) + 1.16927 *begin_y*begin_dy + 0.0194054 *lens_ipow(begin_y, 2) + 3.72467 *begin_x*begin_dx + 0.0622766 *lens_ipow(begin_x, 2) + 0.000311277 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -0.000339743 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -0.0149522 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + -0.00025935 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*begin_lambda + -6.20374 *begin_y*lens_ipow(begin_dy, 7) + -6.94883e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dy + -3.94461e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*begin_lambda+0.0f;
  dx1_domega0(0, 1) =  + 14.8888 *begin_dx*begin_dy + 1.16927 *begin_y*begin_dx + 1.32296 *begin_x*begin_dy + 0.0417592 *begin_x*begin_y + -0.000339743 *lens_ipow(begin_x, 2)*begin_y*begin_dx + 1.07857e-05 *lens_ipow(begin_x, 3)*begin_y + 0.00160529 *lens_ipow(begin_x, 3)*begin_dy*begin_lambda + 1.36092e-08 *begin_x*lens_ipow(begin_y, 5) + -0.00498406 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*begin_lambda + 0.00725388 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3)*begin_lambda + 0.0221031 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 3)*begin_lambda + -43.4262 *begin_y*begin_dx*lens_ipow(begin_dy, 6) + -6.94883e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx + -0.0602856 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 3) + -7.88922e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx*begin_dy*begin_lambda+0.0f;
  dx1_domega0(1, 0) =  + 14.7341 *begin_dx*begin_dy + 1.27979 *begin_y*begin_dx + 1.18781 *begin_x*begin_dy + 0.0415238 *begin_x*begin_y + -0.000477062 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 1.82744e-05 *begin_x*lens_ipow(begin_y, 3) + 0.00101902 *lens_ipow(begin_x, 2)*begin_y*begin_dx + -0.000319949 *lens_ipow(begin_x, 3)*begin_dy + 1.1927e-05 *lens_ipow(begin_x, 3)*begin_y + 0.00385611 *lens_ipow(begin_y, 3)*begin_dx*begin_lambda + -1.49987e-05 *begin_x*lens_ipow(begin_y, 3)*begin_lambda + -0.00680811 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_lambda, 3) + -3.40325e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dy + 0.00483418 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_lambda, 6)+0.0f;
  dx1_domega0(1, 1) =  + 36.4154  + 0.687486 *begin_lambda + 22.3313 *lens_ipow(begin_dy, 2) + 7.36703 *lens_ipow(begin_dx, 2) + 3.69476 *begin_y*begin_dy + 0.0624776 *lens_ipow(begin_y, 2) + 1.18781 *begin_x*begin_dx + 0.0198668 *lens_ipow(begin_x, 2) + -0.000911249 *lens_ipow(begin_y, 2)*begin_lambda + -0.000477062 *begin_x*lens_ipow(begin_y, 2)*begin_dx + 0.000495238 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -0.000319949 *lens_ipow(begin_x, 3)*begin_dx + -5.78164e-06 *lens_ipow(begin_x, 4) + -3.40325e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
