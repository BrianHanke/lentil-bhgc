case kodak__petzval__1948__75mm:
{
const double dx00 =  + 0.792932  + -0.00104947 *lambda + 0.130534 *lens_ipow(dy, 2) + 0.581565 *lens_ipow(dx, 2) + 0.0103681 *y*dy + 9.52381e-05 *lens_ipow(y, 2) + 0.0304482 *x*dx + 0.000205444 *lens_ipow(x, 2) + 2.35378e-06 *lens_ipow(y, 3)*dy + 0.0783247 *x*lens_ipow(dx, 3) + 0.00656903 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000164753 *lens_ipow(x, 3)*dx + 1.24932e-06 *lens_ipow(x, 4) + 1.7381e-05 *lens_ipow(x, 2)*y*dy*lambda + 0.00766802 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -6.96857e-06 *x*lens_ipow(y, 3)*dx*dy + -1.79985e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.2892e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -0.455123 *x*dx*lens_ipow(dy, 4)*lambda + 0.00954172 *x*y*lens_ipow(dx, 3)*dy*lambda+0.0f;
const double dx01 =  + 0.53491 *dx*dy + 0.0146763 *y*dx + 0.0103681 *x*dy + 0.000190476 *x*y + 7.06135e-06 *x*lens_ipow(y, 2)*dy + -0.0146354 *y*dx*lens_ipow(dy, 2)*lambda + 5.79366e-06 *lens_ipow(x, 3)*dy*lambda + 0.015336 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.04529e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -1.1999e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 1.71894e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.00477086 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy*lambda+0.0f;
const double dx02 =  + 57.4823  + 0.943755 *lambda + -0.674657 *lens_ipow(lambda, 2) + 1.06447 *lens_ipow(dy, 2) + 0.53491 *y*dy + 0.00733815 *lens_ipow(y, 2) + 1.16313 *x*dx + 0.0152241 *lens_ipow(x, 2) + 0.117487 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00437935 *lens_ipow(x, 3)*dx + 4.11882e-05 *lens_ipow(x, 4) + -0.00731769 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.015336 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -3.48429e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.1999e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 2707.3 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda + -0.227561 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + 0.0143126 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx03 =  + 2.12894 *dx*dy + 0.53491 *y*dx + 0.261069 *x*dy + 0.0103681 *x*y + 2.35378e-06 *x*lens_ipow(y, 3) + -0.0146354 *lens_ipow(y, 2)*dx*dy*lambda + 5.79366e-06 *lens_ipow(x, 3)*y*lambda + 0.015336 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -3.48429e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 3609.73 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + -0.910245 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)*lambda + 0.00477086 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lambda+0.0f;
const double dx04 =  + 0.943755 *dx + -0.00104947 *x + -1.34931 *dx*lambda + -0.00731769 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 5.79366e-06 *lens_ipow(x, 3)*y*dy + 902.434 *lens_ipow(dx, 3)*lens_ipow(dy, 4) + -0.227561 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4) + 0.00477086 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*dy+0.0f;
const double dx10 =  + 0.546664 *dx*dy + 0.0109245 *y*dx + 0.0146431 *x*dy + 0.000207367 *x*y + 6.62162e-06 *x*lens_ipow(y, 2)*dy + -1.23662e-07 *lens_ipow(x, 3)*y + 3.12373e-06 *lens_ipow(y, 3)*dx*lambda + -0.323506 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.000197355 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 7.35688e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.0909246 *y*dx*lens_ipow(dy, 4)*lambda+0.0f;
const double dx11 =  + 0.791485  + 0.661312 *lens_ipow(dy, 2) + 0.135676 *lens_ipow(dx, 2) + 0.0353071 *y*dy + 0.000296702 *lens_ipow(y, 2) + 0.0109245 *x*dx + 0.000103683 *lens_ipow(x, 2) + 6.62162e-06 *lens_ipow(x, 2)*y*dy + -3.09155e-08 *lens_ipow(x, 4) + -1.75617 *lens_ipow(dy, 4)*lambda + -0.126583 *y*lens_ipow(dy, 3)*lambda + 6.78837e-05 *lens_ipow(y, 3)*dy*lambda + 9.37119e-06 *x*lens_ipow(y, 2)*dx*lambda + -0.323506 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.000197355 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 5.51766e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.315211 *y*lens_ipow(dx, 4)*dy*lambda + 2.84952e-09 *lens_ipow(y, 6)*lambda + -0.0909246 *x*dx*lens_ipow(dy, 4)*lambda + 1.57697e-10 *lens_ipow(y, 7)*dy+0.0f;
const double dx12 =  + 2.264 *dx*dy + 0.271351 *y*dx + 0.546664 *x*dy + 0.0109245 *x*y + 3.12373e-06 *x*lens_ipow(y, 3)*lambda + 1553.84 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -0.970518 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000197355 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -0.630422 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy*lambda + -0.0909246 *x*y*lens_ipow(dy, 4)*lambda+0.0f;
const double dx13 =  + 57.4524  + 0.976126 *lambda + -0.703138 *lens_ipow(lambda, 2) + 2.57371 *lens_ipow(dy, 2) + 1.132 *lens_ipow(dx, 2) + 1.32262 *y*dy + 0.0176535 *lens_ipow(y, 2) + 0.546664 *x*dx + 0.00732155 *lens_ipow(x, 2) + 3.31081e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -7.0247 *y*lens_ipow(dy, 3)*lambda + -0.189874 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 1.69709e-05 *lens_ipow(y, 4)*lambda + 1165.38 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.647012 *x*y*lens_ipow(dx, 3)*dy + 9.86773e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.157606 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lambda + -0.363698 *x*y*dx*lens_ipow(dy, 3)*lambda + 1.97121e-11 *lens_ipow(y, 8)+0.0f;
const double dx14 =  + 0.976126 *dy + -1.40628 *dy*lambda + -1.75617 *y*lens_ipow(dy, 4) + -0.0632915 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 1.69709e-05 *lens_ipow(y, 4)*dy + 3.12373e-06 *x*lens_ipow(y, 3)*dx + -0.157606 *lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + 4.07074e-10 *lens_ipow(y, 7) + -0.0909246 *x*y*dx*lens_ipow(dy, 4)+0.0f;
const double dx20 =  + -0.00932362  + 0.00460686 *lens_ipow(dy, 2) + 0.0131086 *lens_ipow(dx, 2) + 0.000447394 *y*dy + 4.06366e-06 *lens_ipow(y, 2) + 0.00110614 *x*dx + 9.42548e-06 *lens_ipow(x, 2) + 0.00170425 *x*lens_ipow(dx, 3) + 5.58793e-07 *x*lens_ipow(y, 2)*dx + 0.00017838 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 1.48123e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 5.17298e-06 *lens_ipow(x, 3)*dx + 4.44551e-08 *lens_ipow(x, 4) + -0.00111652 *y*lens_ipow(dx, 2)*dy*lambda + 9.12589e-07 *lens_ipow(x, 2)*y*dy*lambda + 1.50661e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.017467 *x*dx*lens_ipow(dy, 4)*lambda + -1.48026e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 3.40537e-13 *lens_ipow(x, 4)*lens_ipow(y, 4) + 7.49136e-12 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + -6.21249e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx21 =  + 0.0109092 *dx*dy + 0.000384949 *y*dx + 0.000447394 *x*dy + 8.12731e-06 *x*y + 5.58793e-07 *lens_ipow(x, 2)*y*dx + 9.87489e-09 *lens_ipow(x, 3)*y + -0.00111652 *x*lens_ipow(dx, 2)*dy*lambda + 3.04196e-07 *lens_ipow(x, 3)*dy*lambda + 1.50661e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -1.1102e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + 2.72429e-13 *lens_ipow(x, 5)*lens_ipow(y, 3) + 2.49712e-12 *lens_ipow(x, 6)*y*dx + -3.10625e-07 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx22 =  + 0.58303  + -0.00157178 *lambda + -0.206441 *lens_ipow(dy, 2) + -0.692865 *lens_ipow(dx, 2) + 0.0109092 *y*dy + 0.000192475 *lens_ipow(y, 2) + 0.0262172 *x*dx + 0.000553069 *lens_ipow(x, 2) + 0.00255637 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 2.79396e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00011892 *lens_ipow(x, 3)*dx + 1.29325e-06 *lens_ipow(x, 4) + -0.00223304 *x*y*dx*dy*lambda + -0.00873351 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + -3.70065e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 1.24856e-12 *lens_ipow(x, 6)*lens_ipow(y, 2) + 1674.54 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -4.65937e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx23 =  + -0.412882 *dx*dy + 0.0109092 *y*dx + 0.00921371 *x*dy + 0.000447394 *x*y + -0.00111652 *x*y*lens_ipow(dx, 2)*lambda + 3.04196e-07 *lens_ipow(x, 3)*y*lambda + 5.02203e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.0349341 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)*lambda + -3.70065e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 1339.63 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -3.10625e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy+0.0f;
const double dx24 =  + -0.00157178 *dx + -0.00111652 *x*y*lens_ipow(dx, 2)*dy + 3.04196e-07 *lens_ipow(x, 3)*y*dy + -0.00873351 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4) + 669.815 *lens_ipow(dx, 5)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx30 =  + 0.0111373 *dx*dy + 0.000444693 *y*dx + 0.000401971 *x*dy + 8.13496e-06 *x*y + 1.52016e-07 *lens_ipow(y, 3)*dx + 7.03803e-09 *x*lens_ipow(y, 3) + 0.0344169 *dx*lens_ipow(dy, 3)*lambda + 4.51013e-07 *x*lens_ipow(y, 2)*dy*lambda + -1.19047e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy + -2.5321e-07 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 9.76333e-15 *x*lens_ipow(y, 8)*dy + 7.80889e-16 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const double dx31 =  + -0.0093243  + 0.0138008 *lens_ipow(dy, 2) + 0.00444357 *lens_ipow(dx, 2) + 0.00114413 *y*dy + 9.70971e-06 *lens_ipow(y, 2) + 0.000444693 *x*dx + 4.06748e-06 *lens_ipow(x, 2) + 0.00165717 *y*lens_ipow(dy, 3) + 0.000169983 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 4.85237e-06 *lens_ipow(y, 3)*dy + 4.19774e-08 *lens_ipow(y, 4) + 4.56047e-07 *x*lens_ipow(y, 2)*dx + 1.0557e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00119685 *y*lens_ipow(dx, 2)*dy*lambda + 4.51013e-07 *lens_ipow(x, 2)*y*dy*lambda + 0.168739 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -1.58729e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + -5.0642e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 3.90533e-14 *lens_ipow(x, 2)*lens_ipow(y, 7)*dy + 1.36656e-15 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx32 =  + -0.415021 *dx*dy + 0.00888713 *y*dx + 0.0111373 *x*dy + 0.000444693 *x*y + 1.52016e-07 *x*lens_ipow(y, 3) + 3.17842 *dx*lens_ipow(dy, 3)*lambda + -0.00119685 *lens_ipow(y, 2)*dx*dy*lambda + 0.0344169 *x*lens_ipow(dy, 3)*lambda + 0.674955 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -3.96823e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + -2.5321e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*lens_ipow(dy, 3)+0.0f;
const double dx33 =  + 0.581617  + -0.586904 *lens_ipow(dy, 2) + -0.207511 *lens_ipow(dx, 2) + 0.0276017 *y*dy + 0.000572064 *lens_ipow(y, 2) + 0.0111373 *x*dx + 0.000200985 *lens_ipow(x, 2) + -0.129104 *lens_ipow(dy, 2)*lambda + 0.00248576 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000113322 *lens_ipow(y, 3)*dy + 1.21309e-06 *lens_ipow(y, 4) + 4.76763 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.000598426 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 0.103251 *x*dx*lens_ipow(dy, 2)*lambda + 2.25507e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.337477 *y*lens_ipow(dx, 4)*dy + -3.96823e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + -3.79815e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 4.88167e-15 *lens_ipow(x, 2)*lens_ipow(y, 8)+0.0f;
const double dx34 =  + -0.0430346 *lens_ipow(dy, 3) + 1.58921 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.000598426 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 0.0344169 *x*dx*lens_ipow(dy, 3) + 2.25507e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy+0.0f;
const double dx40 =  + -0.00167687 *y*dx*dy + -4.79066e-05 *lens_ipow(y, 2)*dx + -0.000658898 *x*lens_ipow(dy, 2) + -0.00165232 *x*lens_ipow(dx, 2) + -8.91564e-05 *x*y*dy + -1.94733e-06 *x*lens_ipow(y, 2) + -0.000119736 *lens_ipow(x, 2)*dx + -1.58634e-06 *lens_ipow(x, 3) + -6.56985e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -2.78206e-08 *x*lens_ipow(y, 4)*lens_ipow(dy, 2) + -1.24698e-09 *x*lens_ipow(y, 5)*dy + -1.29904e-11 *x*lens_ipow(y, 6) + -1.0729e-09 *lens_ipow(x, 6)*dx + -1.43841e-11 *lens_ipow(x, 7) + 7.55148e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 2.06164e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 2) + 8.4338e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx*dy + -2.05393e-13 *lens_ipow(x, 5)*lens_ipow(y, 4)+0.0f;
const double dx41 =  + 2.2785e-05 *y*lambda + -0.00195827 *y*lens_ipow(dy, 2) + -0.000737284 *y*lens_ipow(dx, 2) + -0.000123127 *lens_ipow(y, 2)*dy + -1.86229e-06 *lens_ipow(y, 3) + -0.00167687 *x*dx*dy + -9.58132e-05 *x*y*dx + -4.45782e-05 *lens_ipow(x, 2)*dy + -1.94733e-06 *lens_ipow(x, 2)*y + -5.56411e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 2) + -3.11745e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + -3.89713e-11 *lens_ipow(x, 2)*lens_ipow(y, 5) + 5.03432e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 2.06164e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 2) + 5.06028e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*dy + -1.36929e-13 *lens_ipow(x, 6)*lens_ipow(y, 3)+0.0f;
const double dx42 =  + -0.000737284 *lens_ipow(y, 2)*dx + -0.00167687 *x*y*dy + -4.79066e-05 *x*lens_ipow(y, 2) + -0.00165232 *lens_ipow(x, 2)*dx + -3.99119e-05 *lens_ipow(x, 3) + -3.28493e-06 *lens_ipow(x, 4)*dx + -1.53272e-10 *lens_ipow(x, 7) + 16224.6 *lens_ipow(dx, 5)*lens_ipow(dy, 4) + 7.55148e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.03082e-10 *lens_ipow(x, 4)*lens_ipow(y, 4)*dx + 1.68676e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dy+0.0f;
const double dx43 =  + -0.00195827 *lens_ipow(y, 2)*dy + -4.10422e-05 *lens_ipow(y, 3) + -0.00167687 *x*y*dx + -0.000658898 *lens_ipow(x, 2)*dy + -4.45782e-05 *lens_ipow(x, 2)*y + -2.78206e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + -6.23489e-10 *lens_ipow(x, 2)*lens_ipow(y, 5) + 10816.4 *lens_ipow(dx, 6)*lens_ipow(dy, 3) + 5.03432e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + 1.68676e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx+0.0f;
const double dx44 =  + 0.512193  + -1.41307 *lambda + 1.02674 *lens_ipow(lambda, 2) + 1.13925e-05 *lens_ipow(y, 2)+0.0f;
} break;
