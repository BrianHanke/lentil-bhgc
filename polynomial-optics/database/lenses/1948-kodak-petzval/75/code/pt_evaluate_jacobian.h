case kodak__petzval__1948__75mm:
{
const double dx00 =  + 0.559171  + -0.0356345 *lambda + 0.0230449 *lens_ipow(lambda, 2) + 0.497955 *lens_ipow(dy, 2) + 0.683222 *lens_ipow(dx, 2) + 0.026242 *y*dy + 0.000225033 *lens_ipow(y, 2) + 0.0625947 *x*dx + 0.000511528 *lens_ipow(x, 2) + 0.0366708 *lens_ipow(dx, 2)*lambda + -0.0221016 *x*dx*lens_ipow(dy, 2) + 0.176223 *x*lens_ipow(dx, 3) + 0.014037 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000335112 *lens_ipow(x, 3)*dx + 2.49184e-06 *lens_ipow(x, 4) + 0.013335 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -9.90185e-06 *x*lens_ipow(y, 3)*dx*dy + -1.12303e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.0928149 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 1.34712e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + -1.29156e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx01 =  + 0.387342 *dx*dy + 0.0211395 *y*dx + 0.026242 *x*dy + 0.000450065 *x*y + 0.02667 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.48528e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -4.49213e-10 *lens_ipow(x, 5)*y + 0.0464074 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 1.0777e-11 *lens_ipow(x, 5)*lens_ipow(y, 3) + -6.4578e-11 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx*dy+0.0f;
const double dx02 =  + 74.9367  + -33.8333 *lens_ipow(dy, 2) + -110.015 *lens_ipow(dx, 2) + 0.387342 *y*dy + 0.0105698 *lens_ipow(y, 2) + 1.36644 *x*dx + 0.0312973 *lens_ipow(x, 2) + 0.0733416 *x*dx*lambda + -0.0110508 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.264334 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00935803 *lens_ipow(x, 3)*dx + 8.37779e-05 *lens_ipow(x, 4) + -24.1687 *lens_ipow(dy, 4)*lambda + 2900.76 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 0.02667 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -4.95093e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 0.139222 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -2.1526e-11 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy+0.0f;
const double dx03 =  + -67.6666 *dx*dy + 0.387342 *y*dx + 0.99591 *x*dy + 0.026242 *x*y + -0.0221016 *lens_ipow(x, 2)*dx*dy + -96.6748 *dx*lens_ipow(dy, 3)*lambda + 3867.69 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.02667 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -4.95093e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 0.139222 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -2.1526e-11 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx+0.0f;
const double dx04 =  + -0.0356345 *x + 0.0460899 *x*lambda + 0.0366708 *x*lens_ipow(dx, 2) + -24.1687 *dx*lens_ipow(dy, 4)+0.0f;
const double dx10 =  + 0.389951 *dx*dy + 0.0263001 *y*dx + 0.0212327 *x*dy + 0.000452269 *x*y + 0.0255407 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.39301e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -1.4348e-12 *x*lens_ipow(y, 7) + 6.50314e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const double dx11 =  + 0.5567  + -0.0314397 *lambda + 0.0234348 *lens_ipow(lambda, 2) + 0.904962 *lens_ipow(dy, 2) + 0.499684 *lens_ipow(dx, 2) + 0.0792195 *y*dy + 0.000765641 *lens_ipow(y, 2) + 0.0263001 *x*dx + 0.000226134 *lens_ipow(x, 2) + -0.35716 *lens_ipow(dy, 2)*lambda + -0.0297169 *y*dy*lambda + -0.000459582 *lens_ipow(y, 2)*lambda + -0.0197819 *y*lens_ipow(dx, 2)*dy + 0.303281 *y*lens_ipow(dy, 3)*lambda + 0.0244464 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.000588058 *lens_ipow(y, 3)*dy*lambda + 4.42754e-06 *lens_ipow(y, 4)*lambda + 0.0127703 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -9.28673e-06 *lens_ipow(x, 3)*y*dx*dy + -5.0218e-12 *lens_ipow(x, 2)*lens_ipow(y, 6) + 8.12892e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx12 =  + -67.2895 *dx*dy + 0.999369 *y*dx + 0.389951 *x*dy + 0.0263001 *x*y + -49.1181 *lens_ipow(dx, 3)*dy + -0.0197819 *lens_ipow(y, 2)*dx*dy + 2870.06 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.0255407 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -4.64337e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy+0.0f;
const double dx13 =  + 74.9328  + -109.614 *lens_ipow(dy, 2) + -33.6448 *lens_ipow(dx, 2) + 1.80992 *y*dy + 0.0396098 *lens_ipow(y, 2) + 0.389951 *x*dx + 0.0106163 *lens_ipow(x, 2) + -0.714319 *y*dy*lambda + -0.0148585 *lens_ipow(y, 2)*lambda + -12.2795 *lens_ipow(dx, 4) + -0.00989095 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.454922 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.0162976 *lens_ipow(y, 3)*dy*lambda + 0.000147015 *lens_ipow(y, 4)*lambda + 2152.54 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.0255407 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -4.64337e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx+0.0f;
const double dx14 =  + -0.0314397 *y + 0.0468697 *y*lambda + -0.35716 *y*lens_ipow(dy, 2) + -0.0148585 *lens_ipow(y, 2)*dy + -0.000153194 *lens_ipow(y, 3) + 0.151641 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 0.00814881 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.000147015 *lens_ipow(y, 4)*dy + 8.85507e-07 *lens_ipow(y, 5)+0.0f;
const double dx20 =  + -0.0237425  + 0.000228357 *lambda + -0.0191529 *lens_ipow(dy, 2) + -0.000581602 *y*dy + -2.29633e-06 *lens_ipow(y, 2) + -0.000565288 *x*dx + -1.29075e-06 *lens_ipow(x, 2) + 0.0308593 *lens_ipow(dx, 4) + -0.000104448 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -3.13013e-06 *lens_ipow(x, 3)*dx + -2.44255e-08 *lens_ipow(x, 4) + -0.0042067 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 3.26623e-05 *y*dy*lens_ipow(lambda, 3) + 4.25535e-08 *x*lens_ipow(y, 3)*dx*dy + 2.43124e-08 *lens_ipow(x, 3)*y*dx*dy + -1.67053e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx21 =  + -0.0266665 *dx*dy + -0.000375323 *y*dx + -0.000581602 *x*dy + -4.59265e-06 *x*y + 3.26623e-05 *x*dy*lens_ipow(lambda, 3) + 6.38303e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 6.07811e-09 *lens_ipow(x, 4)*dx*dy + 1.05317 *dx*lens_ipow(dy, 7) + -2.22737e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx22 =  + -1.41077  + 0.00805638 *lens_ipow(lambda, 2) + -0.609258 *lens_ipow(dy, 2) + 2.43432 *lens_ipow(dx, 2) + -0.0266665 *y*dy + -0.000187661 *lens_ipow(y, 2) + -0.000282644 *lens_ipow(x, 2) + -0.17822 *lens_ipow(dy, 2)*lambda + -0.856189 *lens_ipow(dx, 2)*lambda + 4.70613 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 5.50733 *lens_ipow(dx, 4) + 0.123437 *x*lens_ipow(dx, 3) + -6.96319e-05 *lens_ipow(x, 3)*dx + -7.82533e-07 *lens_ipow(x, 4) + -0.0084134 *x*dx*lens_ipow(lambda, 3) + 10.811 *lens_ipow(dy, 6) + 2.12768e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 6.07811e-09 *lens_ipow(x, 4)*y*dy + 1.05317 *y*lens_ipow(dy, 7) + -1.11368e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lens_ipow(dy, 2)+0.0f;
const double dx23 =  + -1.21852 *dx*dy + -0.0266665 *y*dx + -0.0383058 *x*dy + -0.000581602 *x*y + -0.35644 *dx*dy*lambda + 3.13742 *lens_ipow(dx, 3)*dy + 3.26623e-05 *x*y*lens_ipow(lambda, 3) + 64.8661 *dx*lens_ipow(dy, 5) + 2.12768e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 6.07811e-09 *lens_ipow(x, 4)*y*dx + 7.37222 *y*dx*lens_ipow(dy, 6) + -1.11368e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy+0.0f;
const double dx24 =  + 0.000228357 *x + 0.0161128 *dx*lambda + -0.17822 *dx*lens_ipow(dy, 2) + -0.285396 *lens_ipow(dx, 3) + -0.0126201 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 9.79868e-05 *x*y*dy*lens_ipow(lambda, 2)+0.0f;
const double dx30 =  + 0.0421317 *dx*dy + -6.95144e-05 *y*dx + 0.000352979 *x*dy + 5.40667e-07 *x*y + -0.0473506 *lens_ipow(dx, 3)*dy + 0.00039545 *y*dx*lens_ipow(dy, 2) + -2.60699e-07 *x*lens_ipow(y, 2)*dy + 1.04344e-05 *lens_ipow(x, 2)*dx*dy + -1.59097e-07 *lens_ipow(x, 2)*y*dx + 0.00120814 *x*lens_ipow(dy, 5) + 0.000596529 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 4)+0.0f;
const double dx31 =  + -0.0237204  + 0.000220932 *lambda + 0.00124743 *lens_ipow(dx, 2) + -0.00062405 *y*dy + -2.84939e-06 *lens_ipow(y, 2) + -6.95144e-05 *x*dx + 2.70334e-07 *lens_ipow(x, 2) + 0.00039545 *x*dx*lens_ipow(dy, 2) + -2.60699e-07 *lens_ipow(x, 2)*y*dy + -5.30324e-08 *lens_ipow(x, 3)*dx + 0.000519327 *y*lens_ipow(dy, 3)*lambda + -4.08336e-07 *lens_ipow(y, 3)*dy*lambda + -0.0123655 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 0.000596529 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 4) + 0.0143264 *lens_ipow(dy, 2)*lens_ipow(lambda, 7)+0.0f;
const double dx32 =  + 4.14259 *dx*dy + 0.00249486 *y*dx + 0.0421317 *x*dy + -6.95144e-05 *x*y + 1.451 *dx*lens_ipow(dy, 3) + -0.142052 *x*lens_ipow(dx, 2)*dy + 0.00039545 *x*y*lens_ipow(dy, 2) + 3.47813e-06 *lens_ipow(x, 3)*dy + -5.30324e-08 *lens_ipow(x, 3)*y + -9.20907 *lens_ipow(dx, 3)*dy*lambda + 0.00178959 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx33 =  + -1.4106  + 0.00808681 *lens_ipow(lambda, 2) + 2.59677 *lens_ipow(dy, 2) + 2.0713 *lens_ipow(dx, 2) + -0.000312025 *lens_ipow(y, 2) + 0.0421317 *x*dx + 0.00017649 *lens_ipow(x, 2) + -1.08308 *lens_ipow(dy, 2)*lambda + 2.34894 *lens_ipow(dy, 4) + 2.1765 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.0473506 *x*lens_ipow(dx, 3) + 0.0007909 *x*y*dx*dy + -1.3035e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 3.47813e-06 *lens_ipow(x, 3)*dx + -2.30227 *lens_ipow(dx, 4)*lambda + 0.00077899 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -1.02084e-07 *lens_ipow(y, 4)*lambda + -0.024731 *y*dy*lens_ipow(lambda, 4) + 0.00302035 *lens_ipow(x, 2)*lens_ipow(dy, 4) + 0.0286528 *y*dy*lens_ipow(lambda, 7)+0.0f;
const double dx34 =  + 0.000220932 *y + 0.0161736 *dy*lambda + -0.361026 *lens_ipow(dy, 3) + -2.30227 *lens_ipow(dx, 4)*dy + 0.000259663 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -1.02084e-07 *lens_ipow(y, 4)*dy + -0.0494621 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.00238612 *x*y*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + 0.100285 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 6)+0.0f;
const double dx40 =  + -0.00155101 *y*dx*dy + -4.39688e-05 *lens_ipow(y, 2)*dx + -0.000747214 *x*lens_ipow(dy, 2) + -0.00151734 *x*lens_ipow(dx, 2) + -8.97528e-05 *x*y*dy + -1.90953e-06 *x*lens_ipow(y, 2) + -0.000111635 *lens_ipow(x, 2)*dx + -1.42469e-06 *lens_ipow(x, 3) + -7.1932e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -1.07304e-09 *lens_ipow(x, 6)*dx + -1.44619e-11 *lens_ipow(x, 7) + 0.0946762 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 6.54557e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx*dy + -1.58521e-13 *lens_ipow(x, 5)*lens_ipow(y, 4) + -0.000702388 *lens_ipow(x, 2)*y*lens_ipow(dx, 5)*dy*lambda + 3.57115e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 4)*lambda+0.0f;
const double dx41 =  + -0.0109956 *lens_ipow(dy, 3) + -0.0029244 *y*lens_ipow(dy, 2) + -0.00074226 *y*lens_ipow(dx, 2) + -0.000131592 *lens_ipow(y, 2)*dy + -1.25037e-06 *lens_ipow(y, 3) + -0.00155101 *x*dx*dy + -8.79376e-05 *x*y*dx + -4.48764e-05 *lens_ipow(x, 2)*dy + -1.90953e-06 *lens_ipow(x, 2)*y + -3.77898e-09 *lens_ipow(y, 5) + -4.55766e-10 *lens_ipow(y, 6)*dy + 0.0473381 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 3.92734e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*dy + -1.05681e-13 *lens_ipow(x, 6)*lens_ipow(y, 3) + -0.000234129 *lens_ipow(x, 3)*lens_ipow(dx, 5)*dy*lambda + 1.78558e-07 *lens_ipow(x, 4)*y*lens_ipow(dx, 4)*lambda+0.0f;
const double dx42 =  + -0.00074226 *lens_ipow(y, 2)*dx + -0.00155101 *x*y*dy + -4.39688e-05 *x*lens_ipow(y, 2) + -0.00151734 *lens_ipow(x, 2)*dx + -3.72116e-05 *lens_ipow(x, 3) + -3.5966e-06 *lens_ipow(x, 4)*dx + -1.53291e-10 *lens_ipow(x, 7) + 23683.6 *lens_ipow(dx, 5)*lens_ipow(dy, 4) + 0.189352 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 1.30911e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dy + -0.00117065 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)*dy*lambda + 3.57115e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda+0.0f;
const double dx43 =  + -0.0329868 *y*lens_ipow(dy, 2) + -0.0029244 *lens_ipow(y, 2)*dy + -4.38639e-05 *lens_ipow(y, 3) + -0.00155101 *x*y*dx + -0.000747214 *lens_ipow(x, 2)*dy + -4.48764e-05 *lens_ipow(x, 2)*y + -6.51094e-11 *lens_ipow(y, 7) + 15789.1 *lens_ipow(dx, 6)*lens_ipow(dy, 3) + 0.142014 *lens_ipow(x, 2)*y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 1.30911e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx + -0.000234129 *lens_ipow(x, 3)*y*lens_ipow(dx, 5)*lambda+0.0f;
const double dx44 =  + 0.642199  + -1.77275 *lambda + 1.29092 *lens_ipow(lambda, 2) + -0.000234129 *lens_ipow(x, 3)*y*lens_ipow(dx, 5)*dy + 8.92788e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 4)+0.0f;
} break;
