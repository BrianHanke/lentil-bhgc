case kodak__petzval__1948__150mm:
{
const double dx00 =  + 0.792735  + 0.00501251 *y*dy + 0.016281 *x*dx + 2.22848e-05 *lens_ipow(y, 2) + 5.80814e-05 *lens_ipow(x, 2) + 0.111755 *lens_ipow(dy, 2) + 0.609206 *lens_ipow(dx, 2) + -0.145754 *lens_ipow(dx, 2)*lambda + -1.98847e-05 *lens_ipow(x, 2)*lambda + -0.00382913 *x*dx*lambda + 2.53019e-05 *lens_ipow(x, 3)*dx + 1.88619 *lens_ipow(dx, 4) + 0.110662 *x*lens_ipow(dx, 3) + 8.45413e-08 *lens_ipow(x, 4) + 0.000140391 *x*y*dx*dy + 0.00254154 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 4.60613e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 8.20089e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy+0.0f;
const double dx01 =  + 0.50855 *dx*dy + 0.00501251 *x*dy + 4.45696e-05 *x*y + 0.0399991 *y*dx*lambda + -0.0741236 *y*dx*lens_ipow(lambda, 2) + 7.01953e-05 *lens_ipow(x, 2)*dx*dy + 9.21227e-05 *x*y*lens_ipow(dy, 2) + 0.0448549 *y*dx*lens_ipow(lambda, 3) + 8.20089e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy+0.0f;
const double dx02 =  + 114.948  + 1.85549 *lambda + 0.50855 *y*dy + 0.0081405 *lens_ipow(x, 2) + 1.46068 *lens_ipow(dy, 2) + 1.21841 *x*dx + -1.20317 *lens_ipow(lambda, 2) + -0.291509 *x*dx*lambda + -0.00191456 *lens_ipow(x, 2)*lambda + 0.0199996 *lens_ipow(y, 2)*lambda + 6.32549e-06 *lens_ipow(x, 4) + 7.54478 *x*lens_ipow(dx, 3) + 0.165993 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -8.86637 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 146.646 *lens_ipow(dx, 4) + -0.0370618 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 7.01953e-05 *lens_ipow(x, 2)*y*dy + 0.00169436 *lens_ipow(x, 3)*dx + 0.0224274 *lens_ipow(y, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx03 =  + 0.50855 *y*dx + 0.00501251 *x*y + 2.92136 *dx*dy + 0.22351 *x*dy + 7.01953e-05 *lens_ipow(x, 2)*y*dx + 9.21227e-05 *x*lens_ipow(y, 2)*dy + 2.73363e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const double dx04 =  + 1.85549 *dx + -2.40634 *dx*lambda + -0.145754 *x*lens_ipow(dx, 2) + -6.62823e-06 *lens_ipow(x, 3) + -0.00191456 *lens_ipow(x, 2)*dx + 0.0199996 *lens_ipow(y, 2)*dx + -5.91091 *lens_ipow(dx, 3)*lambda + -0.0741236 *lens_ipow(y, 2)*dx*lambda + 0.0672823 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx10 =  + 0.50659 *dx*dy + 0.00504931 *y*dx + 4.54358e-05 *x*y + 0.0392937 *x*dy*lambda + 9.92389e-05 *lens_ipow(y, 2)*dx*dy + 9.14404e-05 *x*y*lens_ipow(dx, 2) + -0.0726302 *x*dy*lens_ipow(lambda, 2) + 1.10832e-06 *x*lens_ipow(y, 2)*dy + 0.043875 *x*dy*lens_ipow(lambda, 3) + 8.11913e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx+0.0f;
const double dx11 =  + 0.792656  + 0.112728 *lens_ipow(dx, 2) + 0.0160688 *y*dy + 0.592699 *lens_ipow(dy, 2) + 0.00504931 *x*dx + 2.27179e-05 *lens_ipow(x, 2) + 6.11309e-05 *lens_ipow(y, 2) + -0.0850779 *lens_ipow(dy, 2)*lambda + -0.00312975 *y*dy*lambda + -2.46858e-05 *lens_ipow(y, 2)*lambda + 0.000198478 *x*y*dx*dy + 2.48426e-05 *lens_ipow(y, 3)*dy + 0.0929846 *y*lens_ipow(dy, 3) + 4.57202e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 1.31433 *lens_ipow(dy, 4) + 8.77061e-08 *lens_ipow(y, 4) + 1.10832e-06 *lens_ipow(x, 2)*y*dy + 0.00236009 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 8.11913e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx+0.0f;
const double dx12 =  + 0.225456 *y*dx + 0.50659 *x*dy + 0.00504931 *x*y + 3.02468 *dx*dy + 9.92389e-05 *x*lens_ipow(y, 2)*dy + 9.14404e-05 *lens_ipow(x, 2)*y*dx + 2.70638e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const double dx13 =  + 114.946  + 1.91334 *lambda + 0.00803439 *lens_ipow(y, 2) + 1.1854 *y*dy + 0.50659 *x*dx + 1.51234 *lens_ipow(dx, 2) + -1.31753 *lens_ipow(lambda, 2) + -0.170156 *y*dy*lambda + 0.0196468 *lens_ipow(x, 2)*lambda + -0.00156488 *lens_ipow(y, 2)*lambda + 9.92389e-05 *x*lens_ipow(y, 2)*dx + 6.21064e-06 *lens_ipow(y, 4) + 61.5197 *lens_ipow(dy, 4) + 0.139477 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 5.25731 *y*lens_ipow(dy, 3) + -0.0363151 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 5.54158e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0015734 *lens_ipow(y, 3)*dy + 0.0219375 *lens_ipow(x, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx14 =  + 1.91334 *dy + -2.63506 *dy*lambda + -0.0850779 *y*lens_ipow(dy, 2) + 0.0196468 *lens_ipow(x, 2)*dy + -0.00156488 *lens_ipow(y, 2)*dy + -8.22859e-06 *lens_ipow(y, 3) + -0.0726302 *lens_ipow(x, 2)*dy*lambda + 0.0658125 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx20 =  + -0.00465434  + 0.00010224 *y*dy + 0.000259005 *x*dx + 4.4611e-07 *lens_ipow(y, 2) + 1.08494e-06 *lens_ipow(x, 2) + 0.00187504 *lens_ipow(dy, 2) + 0.0059719 *lens_ipow(dx, 2) + 1.2616e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + 3.67854e-07 *lens_ipow(x, 3)*dx + 0.00937094 *lens_ipow(dx, 4) + 0.00096177 *x*lens_ipow(dx, 3) + 1.4451e-09 *lens_ipow(x, 4) + 2.90649e-06 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.44212e-07 *x*lens_ipow(y, 2)*dx + 3.03301e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 1.28282e-06 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 8.17494e-10 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 0.000627503 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 2.38879e-05 *x*y*dx*dy*lens_ipow(lambda, 2) + 2.80598e-08 *x*lens_ipow(y, 3)*dx*dy + 1.08258e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2) + -8.72223e-07 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx21 =  + 0.0049887 *dx*dy + 0.00010224 *x*dy + 8.9222e-07 *x*y + 9.04768e-05 *y*dx + 8.41067e-10 *lens_ipow(x, 3)*y + 5.81298e-06 *x*y*lens_ipow(dx, 2) + 1.44212e-07 *lens_ipow(x, 2)*y*dx + 2.56563e-06 *x*y*lens_ipow(dy, 2)*lambda + 8.17494e-10 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 0.000627503 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 1.19439e-05 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 2) + 4.20897e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 1.44344e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dy, 2) + -1.30833e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx22 =  + 0.58319  + -0.00124166 *lambda + 0.0049887 *y*dy + 0.000129503 *lens_ipow(x, 2) + -0.705886 *lens_ipow(dx, 2) + -0.223915 *lens_ipow(dy, 2) + 0.0119438 *x*dx + 4.52384e-05 *lens_ipow(y, 2) + 9.19634e-08 *lens_ipow(x, 4) + 0.0374838 *x*lens_ipow(dx, 3) + 0.00144266 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 5.81298e-06 *x*lens_ipow(y, 2)*dx + 7.21061e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.022e-05 *lens_ipow(x, 3)*dx + 0.00125501 *x*y*dx*dy*lens_ipow(lambda, 2) + 1.19439e-05 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 2) + 1.40299e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -4.36112e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + 0.0049887 *y*dx + 0.00010224 *x*y + -0.44783 *dx*dy + 0.00375007 *x*dy + 2.56563e-06 *x*lens_ipow(y, 2)*dy*lambda + 2.72498e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.000627503 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 1.19439e-05 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2) + 1.40299e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 7.2172e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + -1.30833e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx24 =  + -0.00124166 *dx + 1.28282e-06 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00125501 *x*y*lens_ipow(dx, 2)*dy*lambda + 2.38879e-05 *lens_ipow(x, 2)*y*dx*dy*lambda + -8.72223e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 3)*lambda+0.0f;
const double dx30 =  + 0.00486228 *dx*dy + 9.81004e-05 *y*dx + 8.76132e-07 *x*y + 8.90199e-05 *x*dy + 6.88088e-06 *lens_ipow(y, 2)*dx*dy + 5.79345e-08 *lens_ipow(y, 3)*dx + 0.000202298 *y*dx*lens_ipow(dy, 2) + 9.12039e-10 *x*lens_ipow(y, 3) + 1.36459e-07 *x*lens_ipow(y, 2)*dy + 5.30289e-06 *x*y*lens_ipow(dy, 2) + -6.51365e-07 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lambda + 2.66601e-10 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lambda+0.0f;
const double dx31 =  + -0.00465275  + 0.00178731 *lens_ipow(dx, 2) + 0.000255077 *y*dy + 0.00586454 *lens_ipow(dy, 2) + 9.81004e-05 *x*dx + 4.38066e-07 *lens_ipow(x, 2) + 1.02791e-06 *lens_ipow(y, 2) + 1.37618e-05 *x*y*dx*dy + 4.23086e-07 *lens_ipow(y, 3)*dy + 1.73804e-07 *x*lens_ipow(y, 2)*dx + 0.000202298 *x*dx*lens_ipow(dy, 2) + 0.00108189 *y*lens_ipow(dy, 3) + 1.36806e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0104788 *lens_ipow(dy, 4) + 2.92225e-06 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.70626e-09 *lens_ipow(y, 4) + 1.36459e-07 *lens_ipow(x, 2)*y*dy + 2.65144e-06 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 3.44016e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0035537 *y*lens_ipow(dx, 4)*dy + -1.9541e-06 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + 2.66601e-10 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda+0.0f;
const double dx32 =  + 0.00357462 *y*dx + 0.00486228 *x*dy + 9.81004e-05 *x*y + -0.457655 *dx*dy + 6.88088e-06 *x*lens_ipow(y, 2)*dy + 5.79345e-08 *x*lens_ipow(y, 3) + 0.000202298 *x*y*lens_ipow(dy, 2) + 1.94816e-06 *lens_ipow(y, 3)*dx + 0.0071074 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + -1.9541e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda + 8.88669e-11 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda+0.0f;
const double dx33 =  + 0.583339  + -0.00132377 *lambda + 0.000127539 *lens_ipow(y, 2) + 0.0117291 *y*dy + 0.00486228 *x*dx + -0.228828 *lens_ipow(dx, 2) + 4.451e-05 *lens_ipow(x, 2) + -0.712374 *lens_ipow(dy, 2) + 6.88088e-06 *x*lens_ipow(y, 2)*dx + 1.05772e-07 *lens_ipow(y, 4) + 0.000404597 *x*y*dx*dy + 0.00162283 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0419152 *y*lens_ipow(dy, 3) + 6.82296e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 5.30289e-06 *lens_ipow(x, 2)*y*dy + 2.29344e-05 *lens_ipow(y, 3)*dy + 0.00177685 *lens_ipow(y, 2)*lens_ipow(dx, 4)+0.0f;
const double dx34 =  + -0.00132377 *dy + -6.51365e-07 *x*lens_ipow(y, 3)*lens_ipow(dx, 3) + 8.88669e-11 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx+0.0f;
const double dx40 =  + 0.000146074 *dx + 3.57158e-06 *x + -0.0155165 *lens_ipow(dx, 3) + -1.20477e-05 *x*y*dy + -6.04023e-06 *lens_ipow(y, 2)*dx + -1.16133e-07 *x*lens_ipow(y, 2) + -0.000914147 *x*lens_ipow(dx, 2) + -1.75576e-05 *lens_ipow(x, 2)*dx + -0.0157278 *dx*lens_ipow(dy, 2) + -1.12362e-07 *lens_ipow(x, 3) + -0.000629262 *y*dx*dy + -0.000308366 *x*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + 0.000148022 *dy + 3.66939e-06 *y + -0.0155387 *lens_ipow(dy, 3) + -0.000311244 *y*lens_ipow(dx, 2) + -6.02383e-06 *lens_ipow(x, 2)*dy + -1.20805e-05 *x*y*dx + -1.16133e-07 *lens_ipow(x, 2)*y + -1.13023e-07 *lens_ipow(y, 3) + -0.0158598 *lens_ipow(dx, 2)*dy + -0.000916124 *y*lens_ipow(dy, 2) + -0.000629262 *x*dx*dy + -1.75985e-05 *lens_ipow(y, 2)*dy+0.0f;
const double dx42 =  + 0.000146074 *x + -0.733773 *lens_ipow(dx, 3) + -0.000311244 *lens_ipow(y, 2)*dx + -0.0465494 *x*lens_ipow(dx, 2) + -0.737104 *dx*lens_ipow(dy, 2) + -6.04023e-06 *x*lens_ipow(y, 2) + -0.000914147 *lens_ipow(x, 2)*dx + -0.0317196 *y*dx*dy + -5.85253e-06 *lens_ipow(x, 3) + -0.0157278 *x*lens_ipow(dy, 2) + -0.000629262 *x*y*dy+0.0f;
const double dx43 =  + 0.000148022 *y + -0.0466162 *y*lens_ipow(dy, 2) + -0.737104 *lens_ipow(dx, 2)*dy + -6.02383e-06 *lens_ipow(x, 2)*y + -0.733038 *lens_ipow(dy, 3) + -0.0158598 *y*lens_ipow(dx, 2) + -0.000916124 *lens_ipow(y, 2)*dy + -0.0314555 *x*dx*dy + -0.000629262 *x*y*dx + -0.000308366 *lens_ipow(x, 2)*dy + -5.86616e-06 *lens_ipow(y, 3)+0.0f;
const double dx44 =  + 1.01853  + -4.2371 *lambda + 6.21587 *lens_ipow(lambda, 2) + -3.14065 *lens_ipow(lambda, 3)+0.0f;
} break;
