case kodak__petzval__1948__150mm:
{
const double dx00 =  + 0.558649  + -0.0348213 *lambda + 0.0120915 *y*dy + 0.0320743 *x*dx + 0.0237644 *lens_ipow(lambda, 2) + 5.37991e-05 *lens_ipow(y, 2) + 0.000130109 *lens_ipow(x, 2) + 0.460964 *lens_ipow(dy, 2) + 0.737881 *lens_ipow(dx, 2) + 2.7252e-05 *lens_ipow(x, 3)*dx + 2.15418e-07 *lens_ipow(x, 4) + 7.86572e-06 *lens_ipow(x, 2)*y*dy + 0.00129049 *x*y*dx*dy*lambda + -3.13554 *lens_ipow(dx, 4)*lambda + 1.06031e-05 *x*lens_ipow(y, 2)*dx*lambda + 0.00327399 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 0.00181675 *lens_ipow(y, 2)*lens_ipow(dx, 4) + 2.19064e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -1.02019e-09 *lens_ipow(x, 6)*lens_ipow(lambda, 2)+0.0f;
const double dx01 =  + 0.276403 *dx*dy + 0.0120915 *x*dy + 0.000107598 *x*y + 0.0558386 *y*dx*lambda + 2.62191e-06 *lens_ipow(x, 3)*dy + -0.104471 *y*dx*lens_ipow(lambda, 2) + 0.000645247 *lens_ipow(x, 2)*dx*dy*lambda + 1.06031e-05 *lens_ipow(x, 2)*y*dx*lambda + 0.0623153 *y*dx*lens_ipow(lambda, 3) + 0.00363349 *x*y*lens_ipow(dx, 4) + 1.46042e-06 *lens_ipow(x, 3)*y*lens_ipow(dy, 2)*lambda+0.0f;
const double dx02 =  + 149.956  + 0.276403 *y*dy + 0.0160371 *lens_ipow(x, 2) + -224.433 *lens_ipow(dx, 2) + -76.5267 *lens_ipow(dy, 2) + 1.47576 *x*dx + 0.0279193 *lens_ipow(y, 2)*lambda + 6.813e-06 *lens_ipow(x, 4) + -0.0522355 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.000645247 *lens_ipow(x, 2)*y*dy*lambda + 91.7907 *lens_ipow(dy, 4)*lambda + -12.5421 *x*lens_ipow(dx, 3)*lambda + 669.273 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 5.30154e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.00218266 *lens_ipow(x, 3)*dx*lambda + 0.0311577 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 0.00726698 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)+0.0f;
const double dx03 =  + 0.276403 *y*dx + 0.0120915 *x*y + -153.053 *dx*dy + 0.921927 *x*dy + 2.62191e-06 *lens_ipow(x, 3)*y + 0.000645247 *lens_ipow(x, 2)*y*dx*lambda + 367.163 *dx*lens_ipow(dy, 3)*lambda + 446.182 *lens_ipow(dx, 3)*dy*lambda + 1.46042e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda+0.0f;
const double dx04 =  + -0.0348213 *x + 0.0475288 *x*lambda + 0.0279193 *lens_ipow(y, 2)*dx + -0.104471 *lens_ipow(y, 2)*dx*lambda + 0.000645247 *lens_ipow(x, 2)*y*dx*dy + 91.7907 *dx*lens_ipow(dy, 4) + -3.13554 *x*lens_ipow(dx, 4) + 223.091 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 5.30154e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + 0.00109133 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 0.093473 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + 7.30212e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -2.91482e-10 *lens_ipow(x, 7)*lambda+0.0f;
const double dx10 =  + 0.261624 *dx*dy + 0.0119965 *y*dx + 0.00010635 *x*y + 0.00960173 *x*dy + 3.81262e-06 *lens_ipow(y, 3)*dx + 0.00143101 *lens_ipow(y, 2)*dx*dy*lambda + 7.39805e-08 *x*lens_ipow(y, 4)*dy + 3.93047e-06 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.0056286 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3) + 0.836481 *y*dx*lens_ipow(dy, 4)*lambda + 3.84852e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda + 1.12873e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(lambda, 2) + 2.39039e-15 *x*lens_ipow(y, 9)+0.0f;
const double dx11 =  + 0.558968  + -0.0361421 *lambda + 0.462912 *lens_ipow(dx, 2) + 0.0333353 *y*dy + 0.710287 *lens_ipow(dy, 2) + 0.0119965 *x*dx + 0.024748 *lens_ipow(lambda, 2) + 5.31749e-05 *lens_ipow(x, 2) + 0.000151443 *lens_ipow(y, 2) + 1.14379e-05 *x*lens_ipow(y, 2)*dx + 0.00286203 *x*y*dx*dy*lambda + 0.419696 *y*lens_ipow(dx, 4)*dy + 1.98949e-05 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 0.000700305 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 1.47961e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 5.8957e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.836481 *x*dx*lens_ipow(dy, 4)*lambda + 5.77278e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 4.88472e-10 *lens_ipow(y, 7)*dy + 1.12873e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + 1.07568e-14 *lens_ipow(x, 2)*lens_ipow(y, 8)+0.0f;
const double dx12 =  + 0.925824 *y*dx + 0.261624 *x*dy + 0.0119965 *x*y + -147.023 *dx*dy + 3.81262e-06 *x*lens_ipow(y, 3) + 0.00143101 *x*lens_ipow(y, 2)*dy*lambda + 0.839392 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + 0.0018762 *lens_ipow(x, 3)*lens_ipow(dy, 3) + 0.836481 *x*y*lens_ipow(dy, 4)*lambda + 3.84852e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lambda + 23343.7 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 3.76245e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 149.905  + 0.0166677 *lens_ipow(y, 2) + 1.42057 *y*dy + 0.261624 *x*dx + -73.5116 *lens_ipow(dx, 2) + 0.00480087 *lens_ipow(x, 2) + -219.51 *lens_ipow(dy, 2) + 0.00143101 *x*lens_ipow(y, 2)*dx*lambda + 0.209848 *lens_ipow(y, 2)*lens_ipow(dx, 4) + 7.95797e-06 *lens_ipow(y, 5)*dy + 0.000525228 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 3.69903e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 3.93047e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 0.0056286 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + 3.34593 *x*y*dx*lens_ipow(dy, 3)*lambda + 17507.8 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 6.10591e-11 *lens_ipow(y, 8)+0.0f;
const double dx14 =  + -0.0361421 *y + 0.049496 *y*lambda + 0.00143101 *x*lens_ipow(y, 2)*dx*dy + 0.836481 *x*y*dx*lens_ipow(dy, 4) + 1.92426e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2) + 11671.9 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + 7.5249e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*lambda+0.0f;
const double dx20 =  + -0.0118588  + 9.77412e-05 *lambda + -0.000143162 *y*dy + -0.000164257 *x*dx + -2.7724e-07 *lens_ipow(y, 2) + -3.04347e-07 *lens_ipow(x, 2) + -0.00965319 *lens_ipow(dy, 2) + -0.000890623 *lens_ipow(dx, 2) + 0.000933105 *x*lens_ipow(dx, 3)*lambda + 0.0588437 *lens_ipow(dx, 4)*lambda + -1.3458e-05 *x*y*dx*dy*lens_ipow(lambda, 2) + 0.663273 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.00402016 *lens_ipow(dx, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx21 =  + -0.0138653 *dx*dy + -0.000143162 *x*dy + -5.54481e-07 *x*y + -9.709e-05 *y*dx + 0.0261103 *lens_ipow(dx, 3)*dy + 0.000165593 *y*lens_ipow(dx, 3) + 0.242757 *dx*lens_ipow(dy, 5) + -6.72901e-06 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 2)+0.0f;
const double dx22 =  + -1.41321  + 0.0101798 *lambda + -0.0138653 *y*dy + -8.21285e-05 *lens_ipow(x, 2) + 2.59344 *lens_ipow(dx, 2) + -0.618183 *lens_ipow(dy, 2) + -0.00178125 *x*dx + -4.8545e-05 *lens_ipow(y, 2) + -1.4 *lens_ipow(dx, 2)*lambda + -0.254561 *lens_ipow(dy, 2)*lambda + 0.0783309 *y*lens_ipow(dx, 2)*dy + 0.000248389 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 8.56475 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 15.8807 *lens_ipow(dx, 4)*lambda + 0.00139966 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 0.235375 *x*lens_ipow(dx, 3)*lambda + 0.242757 *y*lens_ipow(dy, 5) + 136.657 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -6.72901e-06 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 2) + 1.32655 *x*dx*lens_ipow(dy, 4) + -0.00804033 *x*dx*lens_ipow(lambda, 4) + 23.9989 *lens_ipow(dy, 6)+0.0f;
const double dx23 =  + -0.0138653 *y*dx + -0.000143162 *x*y + -1.23637 *dx*dy + -0.0193064 *x*dy + -0.509122 *dx*dy*lambda + 0.0261103 *y*lens_ipow(dx, 3) + 5.70983 *lens_ipow(dx, 3)*dy + 1.21379 *y*dx*lens_ipow(dy, 4) + 182.209 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -6.72901e-06 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2) + 2.65309 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 143.994 *dx*lens_ipow(dy, 5)+0.0f;
const double dx24 =  + 9.77412e-05 *x + 0.0101798 *dx + -0.466668 *lens_ipow(dx, 3) + -0.254561 *dx*lens_ipow(dy, 2) + 3.17613 *lens_ipow(dx, 5) + 0.000466553 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 0.0588437 *x*lens_ipow(dx, 4) + -1.3458e-05 *lens_ipow(x, 2)*y*dx*dy*lambda + -0.0160807 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx30 =  + 0.0215586 *dx*dy + -8.7764e-06 *y*dx + 1.60401e-07 *x*y + 9.22343e-05 *x*dy + -0.0363723 *lens_ipow(dx, 3)*dy*lambda + -6.13009e-06 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -7.56777e-11 *lens_ipow(y, 5)*dx*lambda+0.0f;
const double dx31 =  + -0.0118724  + 0.000111561 *lambda + -0.000137198 *y*dy + -8.7764e-06 *x*dx + 8.02004e-08 *lens_ipow(x, 2) + 0.0045424 *lens_ipow(dx, 2)*lambda + -2.41922e-07 *lens_ipow(y, 3)*dy + -0.00519281 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.000287857 *y*lens_ipow(dx, 2)*dy + 0.0257487 *lens_ipow(dy, 4) + -1.52789e-09 *lens_ipow(y, 4) + -1.57823e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00235783 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.0413619 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -1.22602e-05 *x*y*dx*dy*lens_ipow(lambda, 2) + -3.78388e-10 *x*lens_ipow(y, 4)*dx*lambda+0.0f;
const double dx32 =  + 0.0215586 *x*dy + -8.7764e-06 *x*y + 4.39118 *dx*dy + 0.00908479 *y*dx*lambda + -0.414248 *dx*dy*lambda + 3.0715 *dx*lens_ipow(dy, 3) + -0.0103856 *y*dx*lens_ipow(lambda, 2) + 0.000287857 *lens_ipow(y, 2)*dx*dy + 0.0827237 *y*dx*lens_ipow(dy, 2)*lambda + -0.109117 *x*lens_ipow(dx, 2)*dy*lambda + -9.10468 *lens_ipow(dx, 3)*dy*lambda + -6.13009e-06 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -7.56777e-11 *x*lens_ipow(y, 5)*lambda+0.0f;
const double dx33 =  + -1.41063  + -6.8599e-05 *lens_ipow(y, 2) + 0.0215586 *x*dx + 2.19559 *lens_ipow(dx, 2) + 0.00795387 *lens_ipow(lambda, 2) + 4.61171e-05 *lens_ipow(x, 2) + 2.38958 *lens_ipow(dy, 2) + -0.207124 *lens_ipow(dx, 2)*lambda + -0.965075 *lens_ipow(dy, 2)*lambda + 4.60725 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -6.04804e-08 *lens_ipow(y, 4) + 8.46257 *lens_ipow(dy, 4) + 0.000143928 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.102995 *y*lens_ipow(dy, 3) + -1.05215e-05 *lens_ipow(y, 3)*dy + -0.00471566 *y*dy*lens_ipow(lambda, 2) + 0.0827237 *y*lens_ipow(dx, 2)*dy*lambda + -0.0363723 *x*lens_ipow(dx, 3)*lambda + -2.27617 *lens_ipow(dx, 4)*lambda + -6.13009e-06 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx34 =  + 0.000111561 *y + 0.0159077 *dy*lambda + 0.0045424 *y*lens_ipow(dx, 2) + -0.207124 *lens_ipow(dx, 2)*dy + -0.321692 *lens_ipow(dy, 3) + -0.0103856 *y*lens_ipow(dx, 2)*lambda + -0.00471566 *y*lens_ipow(dy, 2)*lambda + 0.0413619 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.0363723 *x*lens_ipow(dx, 3)*dy + -2.27617 *lens_ipow(dx, 4)*dy + -1.22602e-05 *x*lens_ipow(y, 2)*dx*dy*lambda + -7.56777e-11 *x*lens_ipow(y, 5)*dx+0.0f;
const double dx40 =  + 0.000130271 *dx + 3.196e-06 *x + -0.0158685 *lens_ipow(dx, 3) + -1.11143e-05 *x*y*dy + -5.56982e-06 *lens_ipow(y, 2)*dx + -1.05745e-07 *x*lens_ipow(y, 2) + -0.000872343 *x*lens_ipow(dx, 2) + -1.62041e-05 *lens_ipow(x, 2)*dx + -0.0160635 *dx*lens_ipow(dy, 2) + -1.02339e-07 *lens_ipow(x, 3) + -0.000599701 *y*dx*dy + -0.00029392 *x*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + 0.000132196 *dy + 3.28635e-06 *y + -0.0158847 *lens_ipow(dy, 3) + -0.000296411 *y*lens_ipow(dx, 2) + -5.55713e-06 *lens_ipow(x, 2)*dy + -1.11396e-05 *x*y*dx + -1.05745e-07 *lens_ipow(x, 2)*y + -1.02944e-07 *lens_ipow(y, 3) + -0.016181 *lens_ipow(dx, 2)*dy + -0.000874135 *y*lens_ipow(dy, 2) + -0.000599701 *x*dx*dy + -1.62424e-05 *lens_ipow(y, 2)*dy+0.0f;
const double dx42 =  + 0.000130271 *x + -0.940863 *lens_ipow(dx, 3) + -0.000296411 *lens_ipow(y, 2)*dx + -0.0476054 *x*lens_ipow(dx, 2) + -0.944753 *dx*lens_ipow(dy, 2) + -5.56982e-06 *x*lens_ipow(y, 2) + -0.000872343 *lens_ipow(x, 2)*dx + -0.0323619 *y*dx*dy + -5.40137e-06 *lens_ipow(x, 3) + -0.0160635 *x*lens_ipow(dy, 2) + -0.000599701 *x*y*dy+0.0f;
const double dx43 =  + 0.000132196 *y + -0.0476542 *y*lens_ipow(dy, 2) + -0.944753 *lens_ipow(dx, 2)*dy + -5.55713e-06 *lens_ipow(x, 2)*y + -0.939333 *lens_ipow(dy, 3) + -0.016181 *y*lens_ipow(dx, 2) + -0.000874135 *lens_ipow(y, 2)*dy + -0.032127 *x*dx*dy + -0.000599701 *x*y*dx + -0.00029392 *lens_ipow(x, 2)*dy + -5.41414e-06 *lens_ipow(y, 3)+0.0f;
const double dx44 =  + 1.26115  + -5.23939 *lambda + 7.68 *lens_ipow(lambda, 2) + -3.87852 *lens_ipow(lambda, 3)+0.0f;
} break;
