case kodak__petzval__1948__85mm:
{
const double dx00 =  + 0.792427  + 0.00936099 *y*dy + 0.0288887 *x*dx + 7.28418e-05 *lens_ipow(y, 2) + 0.000201213 *lens_ipow(x, 2) + 0.130729 *lens_ipow(dy, 2) + 0.606349 *lens_ipow(dx, 2) + -0.000138518 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 6.20293e-06 *x*lens_ipow(y, 2)*dx + -0.0124478 *x*dx*lens_ipow(lambda, 3) + 0.128101 *x*lens_ipow(dx, 3)*lambda + 0.000199863 *lens_ipow(x, 3)*dx*lambda + 0.00906393 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 1.33737e-06 *lens_ipow(x, 4)*lambda + 5.83232e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 9.98015e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.00318082 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -5.11986e-06 *x*lens_ipow(y, 3)*dx*dy + -0.000250404 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -0.204956 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.13218 *y*lens_ipow(dx, 4)*dy+0.0f;
const double dx01 =  + 0.533382 *dx*dy + 0.00936099 *x*dy + 0.000145684 *x*y + 0.0126594 *y*dx + 6.20293e-06 *lens_ipow(x, 2)*y*dx + 5.83232e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 1.33069e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.00636164 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -7.6798e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -0.000250404 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -0.13218 *x*lens_ipow(dx, 4)*dy+0.0f;
const double dx02 =  + 65.1825  + 0.942722 *lambda + 0.533382 *y*dy + 0.0144443 *lens_ipow(x, 2) + 1.25818 *lens_ipow(dy, 2) + 1.2127 *x*dx + 0.00632968 *lens_ipow(y, 2) + -0.633781 *lens_ipow(lambda, 2) + 3.10147e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00622391 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 0.192152 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 4.99658e-05 *lens_ipow(x, 4)*lambda + 0.00604262 *lens_ipow(x, 3)*dx*lambda + 0.00636164 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -2.55993e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.000125202 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.409911 *x*dx*lens_ipow(lambda, 4) + -0.528719 *x*y*lens_ipow(dx, 3)*dy + 33533.1 *lens_ipow(dx, 4)*lens_ipow(dy, 4)+0.0f;
const double dx03 =  + 0.533382 *y*dx + 0.00936099 *x*y + 2.51636 *dx*dy + 0.261459 *x*dy + 1.94411e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.00636164 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -2.55993e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -0.000250404 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -0.13218 *x*y*lens_ipow(dx, 4) + 26826.5 *lens_ipow(dx, 5)*lens_ipow(dy, 3)+0.0f;
const double dx04 =  + 0.942722 *dx + -1.26756 *dx*lambda + -9.23453e-05 *lens_ipow(x, 3)*lambda + -0.0186717 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 2) + 0.0640506 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 4.99658e-05 *lens_ipow(x, 4)*dx + 0.00302131 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 2.67474e-07 *lens_ipow(x, 5) + -0.819823 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx10 =  + 0.00954826 *y*dx + 0.000148562 *x*y + 0.0556011 *x*dy*lambda + 1.97307 *dx*dy*lambda + -1.7442 *dx*dy*lens_ipow(lambda, 2) + -0.0717887 *x*dy*lens_ipow(lambda, 2) + 0.0260369 *x*dy*lens_ipow(lambda, 3) + -2.76023e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 0.00566826 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx11 =  + 0.792291  + 0.136052 *lens_ipow(dx, 2) + 0.0285704 *y*dy + 0.60558 *lens_ipow(dy, 2) + 0.00954826 *x*dx + 7.42811e-05 *lens_ipow(x, 2) + 0.000189636 *lens_ipow(y, 2) + 0.000218106 *lens_ipow(y, 3)*dy*lambda + 0.0115026 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 1.35955e-06 *lens_ipow(y, 4)*lambda + 1.49375 *lens_ipow(dy, 4)*lambda + -0.000166824 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 0.238893 *y*lens_ipow(dy, 3)*lambda + -1.84015e-06 *lens_ipow(x, 3)*y*dx*dy + 0.00283413 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.0176175 *y*dy*lens_ipow(lambda, 4) + -0.357318 *lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx12 =  + 0.272104 *y*dx + 0.00954826 *x*y + -35.5325 *dx*dy + 139.902 *dx*dy*lambda + 1.97307 *x*dy*lambda + -1.7442 *x*dy*lens_ipow(lambda, 2) + -123.549 *dx*dy*lens_ipow(lambda, 2) + -9.20076e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 0.00566826 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2)+0.0f;
const double dx13 =  + 65.3526  + 0.236246 *lambda + 0.0142852 *lens_ipow(y, 2) + 1.21116 *y*dy + -17.7662 *lens_ipow(dx, 2) + 2.08039 *lens_ipow(dy, 2) + 69.9512 *lens_ipow(dx, 2)*lambda + 0.0278005 *lens_ipow(x, 2)*lambda + 1.97307 *x*dx*lambda + -1.7442 *x*dx*lens_ipow(lambda, 2) + -0.0358943 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -61.7746 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 5.45264e-05 *lens_ipow(y, 4)*lambda + 0.00766838 *lens_ipow(y, 3)*dy*lambda + 0.0130185 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 5.97501 *y*lens_ipow(dy, 3)*lambda + 0.35834 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -9.20076e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 0.00566826 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -0.00880876 *lens_ipow(y, 2)*lens_ipow(lambda, 4) + -0.714636 *y*dy*lens_ipow(lambda, 5)+0.0f;
const double dx14 =  + 0.236246 *dy + 69.9512 *lens_ipow(dx, 2)*dy + 0.0278005 *lens_ipow(x, 2)*dy + 1.97307 *x*dx*dy + -3.4884 *x*dx*dy*lambda + -0.0717887 *lens_ipow(x, 2)*dy*lambda + -123.549 *lens_ipow(dx, 2)*dy*lambda + 5.45264e-05 *lens_ipow(y, 4)*dy + 0.00383419 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 2.7191e-07 *lens_ipow(y, 5) + 0.0390554 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 2) + 1.49375 *y*lens_ipow(dy, 4) + -0.000166824 *lens_ipow(y, 3)*lens_ipow(lambda, 2) + 0.119447 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.035235 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 3) + -1.78659 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx20 =  + -0.00822063  + 0.000322591 *y*dy + 0.000847568 *x*dx + 2.52182e-06 *lens_ipow(y, 2) + 6.22989e-06 *lens_ipow(x, 2) + 0.00350335 *lens_ipow(dy, 2) + 0.0115223 *lens_ipow(dx, 2) + 1.92197e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 3.3125e-06 *lens_ipow(x, 3)*dx + 0.00142549 *x*lens_ipow(dx, 3) + 2.50229e-08 *lens_ipow(x, 4) + 4.4834e-06 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 7.45279e-07 *x*lens_ipow(y, 2)*dx + 7.30864e-07 *lens_ipow(x, 2)*y*dy + 0.00012903 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.0011563 *y*lens_ipow(dx, 2)*dy*lambda + 1.69087e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -0.00242231 *x*dx*lens_ipow(dy, 2)*lambda + 3.27942e-09 *lens_ipow(y, 4)*lambda + -7.71193e-09 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 4.96189e-07 *lens_ipow(y, 3)*dy*lambda + -0.0925869 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx21 =  + 0.00953076 *dx*dy + 0.000322591 *x*dy + 5.04364e-06 *x*y + 0.000297694 *y*dx + 1.28131e-08 *lens_ipow(x, 3)*y + 8.9668e-06 *x*y*lens_ipow(dx, 2) + 7.45279e-07 *lens_ipow(x, 2)*y*dx + 2.43621e-07 *lens_ipow(x, 3)*dy + -0.0011563 *x*lens_ipow(dx, 2)*dy*lambda + 3.38174e-05 *x*y*lens_ipow(dy, 2)*lambda + 1.31177e-08 *x*lens_ipow(y, 3)*lambda + -5.14129e-09 *lens_ipow(x, 3)*y*lambda + 1.48857e-06 *x*lens_ipow(y, 2)*dy*lambda+0.0f;
const double dx22 =  + 0.5833  + -0.00209434 *lambda + 0.00953076 *y*dy + 0.000423784 *lens_ipow(x, 2) + -0.684405 *lens_ipow(dx, 2) + -0.208542 *lens_ipow(dy, 2) + 0.0230445 *x*dx + 0.000148847 *lens_ipow(y, 2) + 8.28124e-07 *lens_ipow(x, 4) + 0.00213823 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 8.9668e-06 *x*lens_ipow(y, 2)*dx + 3.7264e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 8.60202e-05 *lens_ipow(x, 3)*dx + -0.00231259 *x*y*dx*dy*lambda + -0.00121115 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -0.185174 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + 0.00953076 *y*dx + 0.000322591 *x*y + -0.417083 *dx*dy + 0.00700671 *x*dy + 2.43621e-07 *lens_ipow(x, 3)*y + -0.0011563 *x*y*lens_ipow(dx, 2)*lambda + 3.38174e-05 *x*lens_ipow(y, 2)*dy*lambda + -0.00242231 *lens_ipow(x, 2)*dx*dy*lambda + 4.96189e-07 *x*lens_ipow(y, 3)*lambda + -0.185174 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx24 =  + -0.00209434 *dx + -0.0011563 *x*y*lens_ipow(dx, 2)*dy + 1.69087e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00121115 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 3.27942e-09 *x*lens_ipow(y, 4) + -2.57064e-09 *lens_ipow(x, 3)*lens_ipow(y, 2) + 4.96189e-07 *x*lens_ipow(y, 3)*dy + -0.185174 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx30 =  + 0.00920456 *dx*dy + 0.000336506 *y*dx + 5.6636e-06 *x*y + 0.000292864 *x*dy + 4.92599e-09 *x*lens_ipow(y, 3) + 1.76681e-07 *lens_ipow(x, 2)*y*dx + 4.39879e-07 *x*lens_ipow(y, 2)*dy + -0.00019747 *y*lens_ipow(dx, 3)*lambda + 3.29642e-07 *lens_ipow(y, 3)*dx*lambda + -0.00130659 *y*dx*lens_ipow(dy, 2)*lambda + 1.13677e-13 *lens_ipow(x, 3)*lens_ipow(y, 5) + -7.2534e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy + 1.21872e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx31 =  + -0.00822906  + 0.00379707 *lens_ipow(dx, 2) + 0.000856631 *y*dy + 0.0117243 *lens_ipow(dy, 2) + 0.000336506 *x*dx + 2.8318e-06 *lens_ipow(x, 2) + 6.47835e-06 *lens_ipow(y, 2) + 3.26945e-06 *lens_ipow(y, 3)*dy + 0.00145975 *y*lens_ipow(dy, 3) + 7.38899e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + 5.88937e-08 *lens_ipow(x, 3)*dx + 2.44248e-08 *lens_ipow(y, 4) + 4.39879e-07 *lens_ipow(x, 2)*y*dy + 0.000128086 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00019747 *x*lens_ipow(dx, 3)*lambda + 9.88927e-07 *x*lens_ipow(y, 2)*dx*lambda + -0.00130659 *x*dx*lens_ipow(dy, 2)*lambda + -0.112804 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00368053 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 1.42096e-13 *lens_ipow(x, 4)*lens_ipow(y, 4) + -9.6712e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 1.82808e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx32 =  + 0.00759413 *y*dx + 0.00920456 *x*dy + 0.000336506 *x*y + -0.441652 *dx*dy + 5.88937e-08 *lens_ipow(x, 3)*y + -0.00059241 *x*y*lens_ipow(dx, 2)*lambda + 3.29642e-07 *x*lens_ipow(y, 3)*lambda + -0.00130659 *x*y*lens_ipow(dy, 2)*lambda + -0.225607 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00368053 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -2.4178e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 1.21872e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2)+0.0f;
const double dx33 =  + 0.583176  + -0.00151021 *lambda + 0.000428315 *lens_ipow(y, 2) + 0.0234486 *y*dy + 0.00920456 *x*dx + -0.220826 *lens_ipow(dx, 2) + 0.000146432 *lens_ipow(x, 2) + -0.693256 *lens_ipow(dy, 2) + 8.17362e-07 *lens_ipow(y, 4) + 0.00218962 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 2.19939e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 8.53906e-05 *lens_ipow(y, 3)*dy + -0.00261317 *x*y*dx*dy*lambda + -0.225607 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.00184027 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -2.4178e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + 1.21872e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy+0.0f;
const double dx34 =  + -0.00151021 *dy + -0.00019747 *x*y*lens_ipow(dx, 3) + 3.29642e-07 *x*lens_ipow(y, 3)*dx + -0.00130659 *x*y*dx*lens_ipow(dy, 2) + -0.225607 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.00368053 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx40 =  + -7.64195e-05 *x*y*dy + -3.98843e-05 *lens_ipow(y, 2)*dx + -1.29083e-06 *x*lens_ipow(y, 2) + -0.025534 *dx*lens_ipow(dy, 2) + -0.00220867 *y*dx*dy + -0.00113425 *x*lens_ipow(dy, 2) + -1.04433e-08 *lens_ipow(x, 5) + -1.70197e-06 *lens_ipow(x, 4)*dx + -0.278508 *lens_ipow(dx, 5) + -0.0644484 *x*lens_ipow(dx, 4) + -0.000117046 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -0.00408272 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -3.72374e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.89179e-11 *lens_ipow(x, 3)*lens_ipow(y, 4) + -7.99371e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -5.37104e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx+0.0f;
const double dx41 =  + 1.91476e-05 *y + -0.00113801 *y*lens_ipow(dx, 2) + -3.82098e-05 *lens_ipow(x, 2)*dy + -7.97686e-05 *x*y*dx + -1.29083e-06 *lens_ipow(x, 2)*y + -1.30125e-06 *lens_ipow(y, 3) + -0.0226457 *lens_ipow(dx, 2)*dy + -0.002562 *y*lens_ipow(dy, 2) + -0.00220867 *x*dx*dy + -0.000107528 *lens_ipow(y, 2)*dy + -0.197012 *lens_ipow(dy, 5) + 0.94641 *lens_ipow(dy, 7) + -3.72374e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.89179e-11 *lens_ipow(x, 4)*lens_ipow(y, 3) + -5.99528e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy + -7.16138e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx+0.0f;
const double dx42 =  + -0.00113801 *lens_ipow(y, 2)*dx + -3.98843e-05 *x*lens_ipow(y, 2) + -0.0452914 *y*dx*dy + -0.025534 *x*lens_ipow(dy, 2) + -0.00220867 *x*y*dy + -3.40394e-07 *lens_ipow(x, 5) + -1.39254 *x*lens_ipow(dx, 4) + -0.128897 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -5.85229e-05 *lens_ipow(x, 4)*dx + -0.00408272 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -3.72374e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -1.79035e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)+0.0f;
const double dx43 =  + -3.82098e-05 *lens_ipow(x, 2)*y + -0.0226457 *y*lens_ipow(dx, 2) + -0.002562 *lens_ipow(y, 2)*dy + -0.051068 *x*dx*dy + -0.00220867 *x*y*dx + -0.00113425 *lens_ipow(x, 2)*dy + -3.58428e-05 *lens_ipow(y, 3) + -0.985058 *y*lens_ipow(dy, 4) + 6.62487 *y*lens_ipow(dy, 6) + -3.72374e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -1.99843e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)+0.0f;
const double dx44 =  + 0.51687  + -1.4294 *lambda + 1.04303 *lens_ipow(lambda, 2)+0.0f;
} break;
