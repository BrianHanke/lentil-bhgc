case kodak__petzval__1948__85mm:
{
const double dx00 =  + 0.552862  + -0.0113797 *lambda + 0.0231468 *y*dy + 0.058184 *x*dx + 0.000174597 *lens_ipow(y, 2) + 0.000425122 *lens_ipow(x, 2) + 0.489072 *lens_ipow(dy, 2) + 0.731672 *lens_ipow(dx, 2) + 0.000133284 *lens_ipow(x, 3)*dx + 1.15408e-06 *lens_ipow(x, 4) + 0.00284024 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.0784057 *y*lens_ipow(dx, 2)*dy*lambda + -0.00736168 *y*lens_ipow(dy, 3)*lambda + -2.76395 *lens_ipow(dx, 4)*lambda + 2.42703e-05 *x*lens_ipow(y, 2)*dx*lambda + 0.00575432 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -7.44343e-06 *lens_ipow(x, 3)*y*dx*dy + 2.24465e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 0.000105526 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 2) + 1.3428e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.0125288 *x*dx*lens_ipow(lambda, 4) + 0.0129252 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx01 =  + 0.331963 *dx*dy + 0.0231468 *x*dy + 0.000349194 *x*y + 0.0178515 *y*dx + -0.0784057 *x*lens_ipow(dx, 2)*dy*lambda + -0.00736168 *x*lens_ipow(dy, 3)*lambda + 2.42703e-05 *lens_ipow(x, 2)*y*dx*lambda + -1.86086e-06 *lens_ipow(x, 4)*dx*dy + 2.24465e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 5.37119e-10 *lens_ipow(x, 5)*y+0.0f;
const double dx02 =  + 84.9563  + 0.331963 *y*dy + 0.029092 *lens_ipow(x, 2) + -127.173 *lens_ipow(dx, 2) + -41.2989 *lens_ipow(dy, 2) + 1.46334 *x*dx + 0.00892574 *lens_ipow(y, 2) + 3.33209e-05 *lens_ipow(x, 4) + 0.00189349 *lens_ipow(x, 3)*dx + -0.156811 *x*y*dx*dy*lambda + -11.0558 *x*lens_ipow(dx, 3)*lambda + 451.743 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 1.21351e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.00383621 *lens_ipow(x, 3)*dx*lambda + -1.86086e-06 *lens_ipow(x, 4)*y*dy + 2.63814e-05 *lens_ipow(x, 4)*lens_ipow(lambda, 2) + -0.0062644 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + 0.00861677 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2)+0.0f;
const double dx03 =  + 0.331963 *y*dx + 0.0231468 *x*y + -82.5978 *dx*dy + 0.978144 *x*dy + -0.0784057 *x*y*lens_ipow(dx, 2)*lambda + -0.022085 *x*y*lens_ipow(dy, 2)*lambda + 301.162 *lens_ipow(dx, 3)*dy*lambda + -1.86086e-06 *lens_ipow(x, 4)*y*dx + 7.48215e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.00861677 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy+0.0f;
const double dx04 =  + -0.0113797 *x + -0.0784057 *x*y*lens_ipow(dx, 2)*dy + -0.00736168 *x*y*lens_ipow(dy, 3) + -2.76395 *x*lens_ipow(dx, 4) + 150.581 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 1.21351e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + 0.00191811 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 5.27629e-05 *lens_ipow(x, 4)*dx*lambda + -0.0250576 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 3)+0.0f;
const double dx10 =  + 0.356264 *dx*dy + 0.0231718 *y*dx + 0.000352047 *x*y + 0.01816 *x*dy + -5.84621e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -0.606722 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 5.25141e-08 *x*lens_ipow(y, 4)*dy*lambda + 2.68249e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + -0.471926 *y*dx*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -9.66983 *y*lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx11 =  + 0.556899  + -0.0320243 *lambda + 0.502239 *lens_ipow(dx, 2) + 0.0685972 *y*dy + 0.877712 *lens_ipow(dy, 2) + 0.0231718 *x*dx + 0.0236218 *lens_ipow(lambda, 2) + 0.000176023 *lens_ipow(x, 2) + 0.000585339 *lens_ipow(y, 2) + -0.323281 *lens_ipow(dy, 2)*lambda + -0.0249652 *y*dy*lambda + -0.000340969 *lens_ipow(y, 2)*lambda + 0.000405134 *lens_ipow(y, 3)*dy*lambda + 0.0195525 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 2.66303e-06 *lens_ipow(y, 4)*lambda + 0.286622 *y*lens_ipow(dy, 3)*lambda + -3.89747e-06 *lens_ipow(x, 3)*y*dx*dy + -0.606722 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 1.05028e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + 3.35311e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + -0.471926 *x*dx*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -9.66983 *x*lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx12 =  + 1.00448 *y*dx + 0.356264 *x*dy + 0.0231718 *x*y + -79.6927 *dx*dy + -1.94874e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -1.82017 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.471926 *x*y*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -29.0095 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda + 285643 *lens_ipow(dx, 3)*lens_ipow(dy, 5)*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 84.949  + 0.0342986 *lens_ipow(y, 2) + 1.75542 *y*dy + 0.356264 *x*dx + -39.8464 *lens_ipow(dx, 2) + 0.00908 *lens_ipow(x, 2) + -125.363 *lens_ipow(dy, 2) + -0.646562 *y*dy*lambda + -0.0124826 *lens_ipow(y, 2)*lambda + 0.000101284 *lens_ipow(y, 4)*lambda + 0.013035 *lens_ipow(y, 3)*dy*lambda + 0.429932 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -1.94874e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -1.21344 *x*y*lens_ipow(dx, 3)*dy*lambda + 2.62571e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + -1.88771 *x*y*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -38.6793 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + 357053 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx14 =  + -0.0320243 *y + 0.0472436 *y*lambda + -0.323281 *y*lens_ipow(dy, 2) + -0.0124826 *lens_ipow(y, 2)*dy + -0.000113656 *lens_ipow(y, 3) + 0.000101284 *lens_ipow(y, 4)*dy + 0.00651749 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 5.32605e-07 *lens_ipow(y, 5) + 0.143311 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.606722 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 2.62571e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + -0.943853 *x*y*dx*lens_ipow(dy, 4)*lambda + -9.66983 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 4) + 142821 *lens_ipow(dx, 4)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx20 =  + -0.0211228  + 0.000703839 *lambda + -0.000497853 *x*dx + -1.97699e-06 *lens_ipow(x, 2) + -0.045172 *lens_ipow(dy, 2)*lambda + -0.000528123 *lens_ipow(lambda, 3) + -0.00122109 *y*dy*lambda + -1.31333e-07 *lens_ipow(x, 3)*dx + -0.0121239 *lens_ipow(dx, 4) + -1.58738e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.00460347 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 0.0448282 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 1.89362e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 0.00127375 *y*dy*lens_ipow(lambda, 3) + -0.00284926 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 1.6219e-08 *x*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx21 =  + -0.0206775 *dx*dy + -0.000288943 *y*dx + -0.00122109 *x*dy*lambda + -0.00481216 *dx*dy*lambda + -3.17477e-05 *x*y*lens_ipow(lambda, 2) + 3.78723e-05 *x*y*lens_ipow(lambda, 3) + 0.00127375 *x*dy*lens_ipow(lambda, 3) + -0.00284926 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 2.43286e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy+0.0f;
const double dx22 =  + -1.41418  + 0.0102399 *lambda + -0.0206775 *y*dy + -0.000248927 *lens_ipow(x, 2) + 2.6456 *lens_ipow(dx, 2) + -0.427536 *lens_ipow(dy, 2) + -0.000144472 *lens_ipow(y, 2) + -1.00415 *lens_ipow(dx, 2)*lambda + -0.453074 *lens_ipow(dy, 2)*lambda + -0.00481216 *y*dy*lambda + -3.28332e-08 *lens_ipow(x, 4) + -0.0484958 *x*lens_ipow(dx, 3) + -0.00920695 *x*dx*lens_ipow(lambda, 3) + -0.00569853 *x*y*dx*lens_ipow(dy, 3) + 57.8881 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 8.10952e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 49.3553 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 3.75845 *lens_ipow(dy, 6)+0.0f;
const double dx23 =  + -0.0206775 *y*dx + -0.855071 *dx*dy + -0.0903441 *x*dy*lambda + -0.00122109 *x*y*lambda + -0.906149 *dx*dy*lambda + -0.00481216 *y*dx*lambda + 0.0896564 *x*dy*lens_ipow(lambda, 3) + 0.00127375 *x*y*lens_ipow(lambda, 3) + -0.00854779 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 77.1842 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 8.10952e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 19.7421 *lens_ipow(dx, 5)*dy + 22.5507 *dx*lens_ipow(dy, 5)+0.0f;
const double dx24 =  + 0.000703839 *x + 0.0102399 *dx + -0.334716 *lens_ipow(dx, 3) + -0.045172 *x*lens_ipow(dy, 2) + -0.00158437 *x*lens_ipow(lambda, 2) + -0.00122109 *x*y*dy + -0.453074 *dx*lens_ipow(dy, 2) + -0.00481216 *y*dx*dy + -3.17477e-05 *x*lens_ipow(y, 2)*lambda + -0.0138104 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.134485 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 5.68085e-05 *x*lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.00382125 *x*y*dy*lens_ipow(lambda, 2)+0.0f;
const double dx30 =  + 0.0371782 *dx*dy + -6.48799e-05 *y*dx + 0.000257184 *x*dy + -0.0552391 *lens_ipow(dx, 3)*dy + -4.82754e-08 *lens_ipow(y, 3)*dx + 0.00048236 *y*dx*lens_ipow(dy, 2) + 2.31965e-09 *lens_ipow(x, 3)*y + 0.000594921 *x*lens_ipow(dy, 3) + 1.74596e-05 *x*y*lens_ipow(dy, 2) + -0.000851164 *x*lens_ipow(dx, 2)*dy*lambda + 5.63703e-05 *y*dx*lens_ipow(lambda, 4)+0.0f;
const double dx31 =  + -0.0208952  + 0.000124671 *lambda + -0.000401321 *y*dy + -6.48799e-05 *x*dx + -5.76064e-07 *lens_ipow(y, 2) + 0.00173212 *lens_ipow(dx, 2)*lambda + -2.89112e-06 *lens_ipow(y, 3)*dy + -1.44826e-07 *x*lens_ipow(y, 2)*dx + 0.00048236 *x*dx*lens_ipow(dy, 2) + -0.00295313 *y*lens_ipow(dy, 3) + 0.000323318 *y*lens_ipow(dx, 2)*dy + 5.79913e-10 *lens_ipow(x, 4) + -1.75479e-08 *lens_ipow(y, 4) + 8.7298e-06 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.000154642 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 5.63703e-05 *x*dx*lens_ipow(lambda, 4) + -0.0458422 *lens_ipow(dy, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx32 =  + 0.0371782 *x*dy + -6.48799e-05 *x*y + 4.16469 *dx*dy + 0.00346424 *y*dx*lambda + -0.165717 *x*lens_ipow(dx, 2)*dy + -4.82754e-08 *x*lens_ipow(y, 3) + 0.00048236 *x*y*lens_ipow(dy, 2) + 0.000323318 *lens_ipow(y, 2)*dx*dy + -6.48524 *lens_ipow(dx, 3)*dy + -0.000851164 *lens_ipow(x, 2)*dx*dy*lambda + 5.63703e-05 *x*y*lens_ipow(lambda, 4)+0.0f;
const double dx33 =  + -1.40793  + -0.00020066 *lens_ipow(y, 2) + 0.0371782 *x*dx + 2.08235 *lens_ipow(dx, 2) + 0.000128592 *lens_ipow(x, 2) + 1.96455 *lens_ipow(dy, 2) + -0.0552391 *x*lens_ipow(dx, 3) + -7.22779e-07 *lens_ipow(y, 4) + 11.9239 *lens_ipow(dy, 4) + 0.000964719 *x*y*dx*dy + -0.00442969 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000161659 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000892381 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -1.62131 *lens_ipow(dx, 4) + 1.74596e-05 *lens_ipow(x, 2)*y*dy + -0.000103095 *lens_ipow(y, 3)*dy + -0.000425582 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -14.1312 *lens_ipow(dy, 4)*lambda + -0.183369 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx34 =  + 0.000124671 *y + 0.00173212 *y*lens_ipow(dx, 2) + -0.000425582 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy + -2.82625 *lens_ipow(dy, 5) + 0.000225481 *x*y*dx*lens_ipow(lambda, 3) + -0.137527 *y*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx40 =  + -6.76662e-05 *x*y*dy + -3.50691e-05 *lens_ipow(y, 2)*dx + -1.15726e-06 *x*lens_ipow(y, 2) + -0.0241003 *dx*lens_ipow(dy, 2) + -0.00189659 *y*dx*dy + -0.00103845 *x*lens_ipow(dy, 2) + -9.57477e-09 *lens_ipow(x, 5) + -1.54279e-06 *lens_ipow(x, 4)*dx + -0.0292467 *x*lens_ipow(dx, 4) + -9.85701e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -0.00284672 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -2.21416e-11 *lens_ipow(x, 3)*lens_ipow(y, 4) + -1.0973e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -7.16534e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx + 1.56254e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 4.09671e-10 *lens_ipow(y, 6)*lens_ipow(dx, 3)+0.0f;
const double dx41 =  + 1.70009e-05 *y + -0.000932479 *y*lens_ipow(dx, 2) + -3.38331e-05 *lens_ipow(x, 2)*dy + -7.01381e-05 *x*y*dx + -1.15726e-06 *lens_ipow(x, 2)*y + -1.16625e-06 *lens_ipow(y, 3) + -0.0155424 *lens_ipow(dx, 2)*dy + -0.00234838 *y*lens_ipow(dy, 2) + -0.00189659 *x*dx*dy + -9.72227e-05 *lens_ipow(y, 2)*dy + -0.187418 *lens_ipow(dy, 5) + 0.914971 *lens_ipow(dy, 7) + -2.21416e-11 *lens_ipow(x, 4)*lens_ipow(y, 3) + -8.22977e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy + -9.55378e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + 1.04169e-06 *lens_ipow(x, 3)*y*dx*lens_ipow(dy, 2) + 2.45803e-09 *x*lens_ipow(y, 5)*lens_ipow(dx, 3)+0.0f;
const double dx42 =  + -0.000932479 *lens_ipow(y, 2)*dx + -3.50691e-05 *x*lens_ipow(y, 2) + -0.0310849 *y*dx*dy + -0.0241003 *x*lens_ipow(dy, 2) + -0.00189659 *x*y*dy + -3.08558e-07 *lens_ipow(x, 5) + -0.0584934 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -4.92851e-05 *lens_ipow(x, 4)*dx + -0.00284672 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -2.38845e-10 *lens_ipow(x, 3)*lens_ipow(y, 4) + 5.20847e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dy, 2) + 1.22901e-09 *x*lens_ipow(y, 6)*lens_ipow(dx, 2)+0.0f;
const double dx43 =  + -3.38331e-05 *lens_ipow(x, 2)*y + -0.0155424 *y*lens_ipow(dx, 2) + -0.00234838 *lens_ipow(y, 2)*dy + -0.0482006 *x*dx*dy + -0.00189659 *x*y*dx + -0.00103845 *lens_ipow(x, 2)*dy + -3.24076e-05 *lens_ipow(y, 3) + -0.937092 *y*lens_ipow(dy, 4) + 6.4048 *y*lens_ipow(dy, 6) + -2.74326e-10 *lens_ipow(x, 4)*lens_ipow(y, 3) + 1.04169e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy+0.0f;
const double dx44 =  + 0.640991  + -1.77078 *lambda + 1.29114 *lens_ipow(lambda, 2)+0.0f;
} break;
