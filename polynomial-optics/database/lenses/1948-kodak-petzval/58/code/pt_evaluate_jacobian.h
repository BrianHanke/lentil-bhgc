case kodak__petzval__1948__58mm:
{
const double dx00 =  + 0.556916  + -0.0329632 *lambda + 0.0222124 *lens_ipow(lambda, 2) + 0.535032 *lens_ipow(dy, 2) + 0.758416 *lens_ipow(dx, 2) + 0.0352314 *y*dy + 0.00039312 *lens_ipow(y, 2) + 0.0843855 *x*dx + 0.000924785 *lens_ipow(x, 2) + 0.213122 *x*lens_ipow(dx, 3) + 0.0221412 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000682033 *lens_ipow(x, 3)*dx + 6.41657e-06 *lens_ipow(x, 4) + -3.72237e-06 *x*lens_ipow(y, 3)*dx*dy + -1.56147e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.276811 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 9.14768e-09 *lens_ipow(y, 5)*dy*lambda+0.0f;
const double dx01 =  + 0.407077 *dx*dy + 0.0281783 *y*dx + 0.0352314 *x*dy + 0.000786239 *x*y + -5.58355e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -6.2459e-10 *lens_ipow(x, 5)*y + -0.276811 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 4.57384e-08 *x*lens_ipow(y, 4)*dy*lambda+0.0f;
const double dx02 =  + 57.929  + -25.9559 *lens_ipow(dy, 2) + -83.1251 *lens_ipow(dx, 2) + 0.407077 *y*dy + 0.0140892 *lens_ipow(y, 2) + 1.51683 *x*dx + 0.0421927 *lens_ipow(x, 2) + 0.319682 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.0147608 *lens_ipow(x, 3)*dx + 0.000170508 *lens_ipow(x, 4) + -1.86118e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.553622 *x*y*dx*lens_ipow(dy, 3)*lambda+0.0f;
const double dx03 =  + -51.9118 *dx*dy + 0.407077 *y*dx + 1.07006 *x*dy + 0.0352314 *x*y + -1.86118e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -0.830433 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 9.14768e-09 *x*lens_ipow(y, 5)*lambda+0.0f;
const double dx04 =  + -0.0329632 *x + 0.0444248 *x*lambda + -0.276811 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 9.14768e-09 *x*lens_ipow(y, 5)*dy+0.0f;
const double dx10 =  + 0.398698 *dx*dy + 0.033311 *y*dx + 0.0282402 *x*dy + 0.000776373 *x*y + 1.46993e-05 *lens_ipow(y, 3)*dx + -2.91595e-07 *lens_ipow(x, 3)*y + 0.447231 *dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx11 =  + 0.556841  + -0.0323802 *lambda + 0.0216661 *lens_ipow(lambda, 2) + 0.759258 *lens_ipow(dy, 2) + 0.488764 *lens_ipow(dx, 2) + 0.0842446 *y*dy + 0.000923898 *lens_ipow(y, 2) + 0.033311 *x*dx + 0.000388187 *lens_ipow(x, 2) + 0.20414 *y*lens_ipow(dy, 3) + 0.0216319 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00113058 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000674608 *lens_ipow(y, 3)*dy + 6.35726e-06 *lens_ipow(y, 4) + 4.40978e-05 *x*lens_ipow(y, 2)*dx + -7.28989e-08 *lens_ipow(x, 4)+0.0f;
const double dx12 =  + -52.3527 *dx*dy + 0.977528 *y*dx + 0.398698 *x*dy + 0.033311 *x*y + 0.000753717 *lens_ipow(y, 3)*dx + 1.46993e-05 *x*lens_ipow(y, 3) + 0.447231 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 57.9212  + -82.3766 *lens_ipow(dy, 2) + -26.1764 *lens_ipow(dx, 2) + 1.51852 *y*dy + 0.0421223 *lens_ipow(y, 2) + 0.398698 *x*dx + 0.0141201 *lens_ipow(x, 2) + 0.306211 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0144212 *lens_ipow(y, 3)*dy + 0.000168652 *lens_ipow(y, 4) + 1.34169 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx14 =  + -0.0323802 *y + 0.0433321 *y*lambda + 0.894463 *x*dx*lens_ipow(dy, 3)*lambda+0.0f;
const double dx20 =  + -0.0306545  + 0.00023907 *lambda + -0.0248234 *lens_ipow(dy, 2) + -0.000964257 *y*dy + -4.99464e-06 *lens_ipow(y, 2) + -0.00107877 *x*dx + -6.48447e-06 *lens_ipow(x, 2) + -0.00357274 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.0312388 *lens_ipow(dx, 4) + 1.70794e-05 *x*y*dx*dy + 3.16116e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 2.36869e-11 *lens_ipow(x, 2)*lens_ipow(y, 4)+0.0f;
const double dx21 =  + -0.0348391 *dx*dy + -0.000628785 *y*dx + -0.000964257 *x*dy + -9.98927e-06 *x*y + 8.53971e-06 *lens_ipow(x, 2)*dx*dy + -0.00081468 *y*dx*lens_ipow(dy, 2)*lambda + 3.15825e-11 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const double dx22 =  + -1.40845  + -0.737734 *lens_ipow(dy, 2) + 2.41815 *lens_ipow(dx, 2) + -0.0348391 *y*dy + -0.000314392 *lens_ipow(y, 2) + -0.000539385 *lens_ipow(x, 2) + -0.718953 *lens_ipow(dx, 2)*lambda + 0.976033 *lens_ipow(dy, 4) + 5.47577 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00714548 *x*dx*lens_ipow(lambda, 2) + -0.124955 *x*lens_ipow(dx, 3) + 8.53971e-06 *lens_ipow(x, 2)*y*dy + 2.10744e-05 *lens_ipow(x, 3)*dx + 0.0101301 *lens_ipow(lambda, 5) + -0.00040734 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx23 =  + -1.47547 *dx*dy + -0.0348391 *y*dx + -0.0496468 *x*dy + -0.000964257 *x*y + 3.90413 *dx*lens_ipow(dy, 3) + 3.65051 *lens_ipow(dx, 3)*dy + 8.53971e-06 *lens_ipow(x, 2)*y*dx + -0.00081468 *lens_ipow(y, 2)*dx*dy*lambda+0.0f;
const double dx24 =  + 0.00023907 *x + -0.239651 *lens_ipow(dx, 3) + -0.00714548 *x*lens_ipow(dx, 2)*lambda + 0.0506506 *dx*lens_ipow(lambda, 4) + -0.00040734 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2)+0.0f;
const double dx30 =  + 0.0525283 *dx*dy + -0.000129955 *y*dx + 0.000532497 *x*dy + -0.0239333 *lens_ipow(dx, 3)*dy + 9.38796e-09 *x*lens_ipow(y, 3) + 1.22447e-08 *lens_ipow(x, 3)*y+0.0f;
const double dx31 =  + -0.0306362  + 0.000236412 *lambda + 0.00145314 *lens_ipow(dx, 2) + -0.00107132 *y*dy + -6.48699e-06 *lens_ipow(y, 2) + -0.000129955 *x*dx + -0.00393053 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.031067 *lens_ipow(dy, 4) + 3.12762e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -7.77308e-06 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.40819e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 3.06118e-09 *lens_ipow(x, 4)+0.0f;
const double dx32 =  + 4.06921 *dx*dy + 0.00290628 *y*dx + 0.0525283 *x*dy + -0.000129955 *x*y + -0.159752 *dx*dy*lambda + 3.09879 *dx*lens_ipow(dy, 3) + -5.18205e-06 *lens_ipow(y, 3)*dx + -0.0717998 *x*lens_ipow(dx, 2)*dy+0.0f;
const double dx33 =  + -1.40815  + 2.43403 *lens_ipow(dy, 2) + 2.0346 *lens_ipow(dx, 2) + -0.000535662 *lens_ipow(y, 2) + 0.0525283 *x*dx + 0.000266248 *lens_ipow(x, 2) + -0.804286 *lens_ipow(dy, 2)*lambda + -0.0798762 *lens_ipow(dx, 2)*lambda + 0.00977396 *lens_ipow(lambda, 4) + 4.64818 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00786105 *y*dy*lens_ipow(lambda, 2) + -0.124268 *y*lens_ipow(dy, 3) + 2.08508e-05 *lens_ipow(y, 3)*dy + -0.0239333 *x*lens_ipow(dx, 3)+0.0f;
const double dx34 =  + 0.000236412 *y + -0.268095 *lens_ipow(dy, 3) + -0.0798762 *lens_ipow(dx, 2)*dy + 0.0390958 *dy*lens_ipow(lambda, 3) + -0.00786105 *y*lens_ipow(dy, 2)*lambda+0.0f;
const double dx40 =  + -0.00338703 *y*dx*dy + -0.000114326 *lens_ipow(y, 2)*dx + -0.00113244 *x*lens_ipow(dy, 2) + -0.00355913 *x*lens_ipow(dx, 2) + -0.000224107 *x*y*dy + -5.95864e-06 *x*lens_ipow(y, 2) + -0.000262529 *lens_ipow(x, 2)*dx + -4.48493e-06 *lens_ipow(x, 3) + 2.21753e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -1.47172e-10 *lens_ipow(x, 3)*lens_ipow(y, 4) + -2.03144e-09 *lens_ipow(x, 6)*dx + -5.42593e-11 *lens_ipow(x, 7)+0.0f;
const double dx41 =  + -0.00132932 *y*lens_ipow(dx, 2) + -0.00338703 *x*dx*dy + -0.000228652 *x*y*dx + -0.000112054 *lens_ipow(x, 2)*dy + -5.95864e-06 *lens_ipow(x, 2)*y + -0.0899744 *y*lens_ipow(dy, 4) + -0.0118548 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.00055618 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -1.193e-05 *lens_ipow(y, 4)*dy + -1.02381e-07 *lens_ipow(y, 5) + 2.21753e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -1.47172e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)+0.0f;
const double dx42 =  + -0.00132932 *lens_ipow(y, 2)*dx + -0.00338703 *x*y*dy + -0.000114326 *x*lens_ipow(y, 2) + -0.00355913 *lens_ipow(x, 2)*dx + -8.75096e-05 *lens_ipow(x, 3) + 7.39176e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -2.90206e-10 *lens_ipow(x, 7)+0.0f;
const double dx43 =  + -0.00338703 *x*y*dx + -0.00113244 *lens_ipow(x, 2)*dy + -0.000112054 *lens_ipow(x, 2)*y + -0.179949 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.0118548 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.00027809 *lens_ipow(y, 4)*dy + -2.386e-06 *lens_ipow(y, 5) + 7.39176e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx+0.0f;
const double dx44 =  + 0.644943  + -1.77758 *lambda + 1.29247 *lens_ipow(lambda, 2)+0.0f;
} break;
