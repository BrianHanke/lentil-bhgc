case kodak__petzval__1948__105mm:
{
const double dx00 =  + 0.793429  + -0.00160156 *lambda + 0.00743408 *y*dy + 0.0207261 *x*dx + 4.75435e-05 *lens_ipow(y, 2) + 9.68274e-05 *lens_ipow(x, 2) + 0.121525 *lens_ipow(dy, 2) + 0.555625 *lens_ipow(dx, 2) + 6.89142e-05 *lens_ipow(x, 3)*dx + 1.24505 *lens_ipow(dx, 4) + 0.12439 *x*lens_ipow(dx, 3) + 3.58084e-07 *lens_ipow(x, 4) + 4.37098e-06 *x*lens_ipow(y, 2)*dx + 0.00453366 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.0160109 *y*lens_ipow(dx, 2)*dy*lambda + 3.17486e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + 6.56893e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 3.50594e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 2.41746e-07 *lens_ipow(x, 4)*y*lens_ipow(dy, 3) + 0.145628 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx01 =  + 0.523012 *dx*dy + 0.00743408 *x*dy + 9.5087e-05 *x*y + 0.0101505 *y*dx + 4.37098e-06 *lens_ipow(x, 2)*y*dx + -0.0160109 *x*lens_ipow(dx, 2)*dy*lambda + 2.11657e-06 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + 6.56893e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 4.67459e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 4.83493e-08 *lens_ipow(x, 5)*lens_ipow(dy, 3) + 0.0728141 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx02 =  + 80.4853  + 1.30033 *lambda + 0.523012 *y*dy + 0.010363 *lens_ipow(x, 2) + 1.16333 *lens_ipow(dy, 2) + 1.11125 *x*dx + 0.00507526 *lens_ipow(y, 2) + -0.934829 *lens_ipow(lambda, 2) + 1.72285e-05 *lens_ipow(x, 4) + 4.98021 *x*lens_ipow(dx, 3) + 0.186586 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 50.5571 *lens_ipow(dx, 4) + 2.18549e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00302244 *lens_ipow(x, 3)*dx + -0.0320218 *x*y*dx*dy*lambda + 0.218442 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 150512 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + 0.523012 *y*dx + 0.00743408 *x*y + 2.32666 *dx*dy + 0.243051 *x*dy + -0.0160109 *x*y*lens_ipow(dx, 2)*lambda + 2.11657e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 2.18964e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 1.45048e-07 *lens_ipow(x, 5)*y*lens_ipow(dy, 2) + 0.218442 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 120410 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx04 =  + -0.00160156 *x + 1.30033 *dx + -1.86966 *dx*lambda + -0.0160109 *x*y*lens_ipow(dx, 2)*dy + 0.0728141 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 60205 *lens_ipow(dx, 5)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx10 =  + 0.00742601 *y*dx + 9.50761e-05 *x*y + 0.0521549 *x*dy*lambda + 3.00749 *dx*dy*lambda + -5.57249 *dx*dy*lens_ipow(lambda, 2) + 5.92434e-07 *lens_ipow(y, 3)*dx + -0.072622 *x*dy*lens_ipow(lambda, 2) + 3.39225 *dx*dy*lens_ipow(lambda, 3) + 0.0397818 *x*dy*lens_ipow(lambda, 4) + -4.6399e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy + 0.123291 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx11 =  + 0.793305  + -0.00150834 *lambda + 0.12759 *lens_ipow(dx, 2) + 0.0207924 *y*dy + 0.555099 *lens_ipow(dy, 2) + 0.00742601 *x*dx + 4.7538e-05 *lens_ipow(x, 2) + 9.66164e-05 *lens_ipow(y, 2) + 7.26994e-05 *lens_ipow(y, 3)*dy + 1.7773e-06 *x*lens_ipow(y, 2)*dx + 0.144884 *y*lens_ipow(dy, 3) + 1.53117 *lens_ipow(dy, 4) + 3.76642e-07 *lens_ipow(y, 4) + 0.00497135 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -6.18653e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 0.246582 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx12 =  + 0.255181 *y*dx + 0.00742601 *x*y + 2.9237 *dx*dy + 3.00749 *x*dy*lambda + -5.57249 *x*dy*lens_ipow(lambda, 2) + 5.92434e-07 *x*lens_ipow(y, 3) + 3.39225 *x*dy*lens_ipow(lambda, 3) + -1.54663e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 0.369873 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 98117.4 *lens_ipow(dx, 3)*lens_ipow(dy, 5)*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 80.4738  + 1.3191 *lambda + 0.0103962 *lens_ipow(y, 2) + 1.1102 *y*dy + 1.46185 *lens_ipow(dx, 2) + -0.95094 *lens_ipow(lambda, 2) + 0.0260774 *lens_ipow(x, 2)*lambda + 3.00749 *x*dx*lambda + -5.57249 *x*dx*lens_ipow(lambda, 2) + 1.81748e-05 *lens_ipow(y, 4) + 61.6067 *lens_ipow(dy, 4) + 0.217326 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 6.12469 *y*lens_ipow(dy, 3) + -0.036311 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.00331423 *lens_ipow(y, 3)*dy + 3.39225 *x*dx*lens_ipow(lambda, 3) + 0.0198909 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + -1.54663e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + 0.369873 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 122647 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx14 =  + 1.3191 *dy + -0.00150834 *y + -1.90188 *dy*lambda + 0.0260774 *lens_ipow(x, 2)*dy + 3.00749 *x*dx*dy + -11.145 *x*dx*dy*lambda + -0.072622 *lens_ipow(x, 2)*dy*lambda + 10.1768 *x*dx*dy*lens_ipow(lambda, 2) + 0.0795636 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 3) + 0.123291 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 49058.7 *lens_ipow(dx, 4)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx20 =  + -0.00665676  + 0.000202213 *y*dy + 0.000579867 *x*dx + 1.25893e-06 *lens_ipow(y, 2) + 3.90677e-06 *lens_ipow(x, 2) + 0.00252454 *lens_ipow(dy, 2) + 0.00954997 *lens_ipow(dx, 2) + 7.1892e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + 5.75548e-07 *lens_ipow(x, 3)*dx + -0.0105074 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 9.88258e-06 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 5.57344e-06 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 6.38523e-10 *lens_ipow(y, 4) + 4.98691e-07 *x*lens_ipow(y, 2)*dx + 5.89759e-07 *lens_ipow(x, 2)*y*dy + 1.19203e-07 *lens_ipow(y, 3)*dy + 2.52512e-05 *x*y*dx*dy + 5.08818e-06 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 4.33806e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 2.40658e-11 *lens_ipow(x, 6) + 2.93223e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lambda + 5.38741e-09 *lens_ipow(x, 5)*dx*lambda + -0.00047442 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx21 =  + 0.00721313 *dx*dy + 0.000202213 *x*dy + 2.51787e-06 *x*y + 0.000187428 *y*dx + 4.7928e-09 *lens_ipow(x, 3)*y + 1.11469e-05 *x*y*lens_ipow(dx, 2) + 2.55409e-09 *x*lens_ipow(y, 3) + 4.98691e-07 *lens_ipow(x, 2)*y*dx + 1.96586e-07 *lens_ipow(x, 3)*dy + 3.5761e-07 *x*lens_ipow(y, 2)*dy + 1.26256e-05 *lens_ipow(x, 2)*dx*dy + 1.01764e-05 *x*y*lens_ipow(dy, 2)+0.0f;
const double dx22 =  + 0.582169  + 0.00721313 *y*dy + 0.000289933 *lens_ipow(x, 2) + -0.66743 *lens_ipow(dx, 2) + -0.225023 *lens_ipow(dy, 2) + 0.0190999 *x*dx + 9.37141e-05 *lens_ipow(y, 2) + 1.43887e-07 *lens_ipow(x, 4) + -0.0210149 *x*dx*lens_ipow(dy, 2) + 1.11469e-05 *x*lens_ipow(y, 2)*dx + 2.49345e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.26256e-05 *lens_ipow(x, 2)*y*dy + 2.89204e-05 *lens_ipow(x, 3)*dx*lambda + 1.17289e-07 *lens_ipow(x, 5)*dx*lambda + 8.97902e-10 *lens_ipow(x, 6)*lambda + -0.00063256 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + 0.00721313 *y*dx + 0.000202213 *x*y + -0.450046 *dx*dy + 0.00504908 *x*dy + -0.0210149 *x*lens_ipow(dx, 2)*dy + 6.58839e-06 *lens_ipow(x, 3)*dy + 1.96586e-07 *lens_ipow(x, 3)*y + 1.19203e-07 *x*lens_ipow(y, 3) + 1.26256e-05 *lens_ipow(x, 2)*y*dx + 1.01764e-05 *x*lens_ipow(y, 2)*dy+0.0f;
const double dx24 =  + 1.44602e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 5.86446e-08 *lens_ipow(x, 5)*lens_ipow(dx, 2) + 8.97902e-10 *lens_ipow(x, 6)*dx + -0.00031628 *lens_ipow(x, 3)*lens_ipow(dx, 4)*lambda+0.0f;
const double dx30 =  + 0.00744703 *dx*dy + 0.000216296 *y*dx + 2.81529e-06 *x*y + 0.000189489 *x*dy + 6.76686e-08 *lens_ipow(y, 3)*dx + 1.91452e-09 *x*lens_ipow(y, 3) + 1.3469e-07 *x*lens_ipow(y, 2)*dy + -0.000559349 *y*dx*lens_ipow(dy, 2)*lambda + -4.41778e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lambda+0.0f;
const double dx31 =  + -0.00665151  + 0.00298444 *lens_ipow(dx, 2) + 0.000594268 *y*dy + 0.00933446 *lens_ipow(dy, 2) + 0.000216296 *x*dx + 1.40764e-06 *lens_ipow(x, 2) + 3.47992e-06 *lens_ipow(y, 2) + -3.08574e-05 *lens_ipow(lambda, 3) + 2.03006e-07 *x*lens_ipow(y, 2)*dx + 2.87178e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + 7.54597e-09 *lens_ipow(y, 4) + 1.3469e-07 *lens_ipow(x, 2)*y*dy + 2.1847e-06 *lens_ipow(y, 3)*dy*lambda + -0.000169224 *y*dy*lens_ipow(lambda, 3) + -0.000559349 *x*dx*lens_ipow(dy, 2)*lambda + 0.000179087 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.0065476 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.0152727 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -0.0156469 *y*lens_ipow(dx, 4)*dy*lambda + -2.94518e-08 *lens_ipow(x, 3)*y*dx*dy*lambda + -1.8018 *lens_ipow(dy, 6)*lens_ipow(lambda, 3) + -0.947438 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 3.03253 *lens_ipow(dy, 6)*lens_ipow(lambda, 4)+0.0f;
const double dx32 =  + 0.00596889 *y*dx + 0.00744703 *x*dy + 0.000216296 *x*y + -0.428184 *dx*dy + 6.76686e-08 *x*lens_ipow(y, 3) + -0.000559349 *x*y*lens_ipow(dy, 2)*lambda + -0.0312938 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy*lambda + -1.47259e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + -3.78975 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx33 =  + 0.582308  + 0.000297134 *lens_ipow(y, 2) + 0.0186689 *y*dy + 0.00744703 *x*dx + -0.214092 *lens_ipow(dx, 2) + 9.47444e-05 *lens_ipow(x, 2) + -0.692211 *lens_ipow(dy, 2) + 6.73448e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 5.46175e-07 *lens_ipow(y, 4)*lambda + -8.4612e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + -0.0011187 *x*y*dx*dy*lambda + 0.000119391 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + -0.0098214 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.0229091 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.00782346 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lambda + -1.47259e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + -10.8108 *y*lens_ipow(dy, 5)*lens_ipow(lambda, 3) + -1.89488 *y*lens_ipow(dx, 4)*dy*lens_ipow(lambda, 3) + 18.1952 *y*lens_ipow(dy, 5)*lens_ipow(lambda, 4)+0.0f;
const double dx34 =  + -9.25721e-05 *y*lens_ipow(lambda, 2) + 5.46175e-07 *lens_ipow(y, 4)*dy + -0.000253836 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -0.000559349 *x*y*dx*lens_ipow(dy, 2) + 0.000119391 *lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + -0.0065476 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda + 0.0229091 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.00782346 *lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + -1.47259e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -5.40539 *y*lens_ipow(dy, 6)*lens_ipow(lambda, 2) + -2.84231 *y*lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 12.1301 *y*lens_ipow(dy, 6)*lens_ipow(lambda, 3)+0.0f;
const double dx40 =  + 0.000528949 *dx + 1.66318e-05 *x + -0.0241612 *lens_ipow(dx, 3) + -4.5817e-05 *x*y*dy + -2.28296e-05 *lens_ipow(y, 2)*dx + -6.11038e-07 *x*lens_ipow(y, 2) + -0.002221 *x*lens_ipow(dx, 2) + -6.23523e-05 *lens_ipow(x, 2)*dx + -0.0322881 *dx*lens_ipow(dy, 2) + -5.66121e-07 *lens_ipow(x, 3) + -0.00172076 *y*dx*dy + -0.00085632 *x*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + -0.000852124 *y*lens_ipow(dx, 2) + -2.29085e-05 *lens_ipow(x, 2)*dy + -4.56593e-05 *x*y*dx + -6.11038e-07 *lens_ipow(x, 2)*y + -0.0325736 *lens_ipow(dx, 2)*dy + -0.00172076 *x*dx*dy + -4.70994e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.00202157 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -5.7624e-07 *lens_ipow(y, 4)*dy + -3.01526e-09 *lens_ipow(y, 5) + -0.0425951 *y*lens_ipow(dy, 4) + -0.330888 *lens_ipow(dy, 5)+0.0f;
const double dx42 =  + 0.000528949 *x + -0.000852124 *lens_ipow(y, 2)*dx + -0.0724835 *x*lens_ipow(dx, 2) + -1.30525 *dx*lens_ipow(dy, 2) + -2.28296e-05 *x*lens_ipow(y, 2) + -0.002221 *lens_ipow(x, 2)*dx + -0.0651472 *y*dx*dy + -2.07841e-05 *lens_ipow(x, 3) + -0.0322881 *x*lens_ipow(dy, 2) + -0.00172076 *x*y*dy + -6.8623 *lens_ipow(dx, 5)+0.0f;
const double dx43 =  + -1.30525 *lens_ipow(dx, 2)*dy + -2.29085e-05 *lens_ipow(x, 2)*y + -0.0325736 *y*lens_ipow(dx, 2) + -0.0645763 *x*dx*dy + -0.00172076 *x*y*dx + -0.00085632 *lens_ipow(x, 2)*dy + -2.35497e-05 *lens_ipow(y, 4)*dy + -0.00202157 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -1.15248e-07 *lens_ipow(y, 5) + -14.1769 *lens_ipow(dy, 5) + -0.0851902 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -1.65444 *y*lens_ipow(dy, 4)+0.0f;
const double dx44 =  + 1.02668  + -4.2828 *lambda + 6.30345 *lens_ipow(lambda, 2) + -3.19675 *lens_ipow(lambda, 3)+0.0f;
} break;
