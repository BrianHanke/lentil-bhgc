case kodak__petzval__1948__105mm:
{
const double dx00 =  + 0.553008  + -0.0108355 *lambda + 0.0171892 *y*dy + 0.0484059 *x*dx + 0.000101431 *lens_ipow(y, 2) + 0.00025111 *lens_ipow(x, 2) + 0.465708 *lens_ipow(dy, 2) + 0.749551 *lens_ipow(dx, 2) + 4.56238e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.000807672 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 6.30033e-07 *lens_ipow(x, 4) + 4.2877e-05 *lens_ipow(x, 2)*y*dy + -0.0112947 *x*dx*lens_ipow(lambda, 2) + 0.00419413 *x*y*dx*dy*lambda + 6.68633e-05 *x*lens_ipow(y, 2)*dx*lambda + 0.000245123 *lens_ipow(x, 3)*dx*lambda + 0.00896878 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -8.76682e-05 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 2) + 0.00161015 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -7.70204 *lens_ipow(dx, 4)*lens_ipow(lambda, 2) + -4.68793 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx01 =  + 0.301209 *dx*dy + 0.0171892 *x*dy + 0.000202861 *x*y + 0.0137117 *y*dx + 3.04159e-07 *lens_ipow(x, 3)*y + 1.42923e-05 *lens_ipow(x, 3)*dy + 0.00209706 *lens_ipow(x, 2)*dx*dy*lambda + 6.68633e-05 *lens_ipow(x, 2)*y*dx*lambda + 0.0032203 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -3.03576 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 3)+0.0f;
const double dx02 =  + 104.943  + 0.301209 *y*dy + 0.0242029 *lens_ipow(x, 2) + -154.256 *lens_ipow(dx, 2) + -50.0853 *lens_ipow(dy, 2) + 1.4991 *x*dx + 0.00685583 *lens_ipow(y, 2) + -0.00564736 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.00209706 *lens_ipow(x, 2)*y*dy*lambda + 3.34316e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 6.12808e-05 *lens_ipow(x, 4)*lambda + 0.00597919 *lens_ipow(x, 3)*dx*lambda + -2.19171e-05 *lens_ipow(x, 4)*lens_ipow(lambda, 2) + 0.0032203 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -30.8082 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -9.37585 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -9.10727 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + -12892.6 *lens_ipow(dx, 6)*lens_ipow(lambda, 4)+0.0f;
const double dx03 =  + 0.301209 *y*dx + 0.0171892 *x*y + -100.171 *dx*dy + 0.931415 *x*dy + 0.000538448 *lens_ipow(x, 3)*dy + 1.42923e-05 *lens_ipow(x, 3)*y + 0.00209706 *lens_ipow(x, 2)*y*dx*lambda + -9.37585 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -3.03576 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx04 =  + -0.0108355 *x + -0.0112947 *lens_ipow(x, 2)*dx*lambda + 0.00209706 *lens_ipow(x, 2)*y*dx*dy + 3.34316e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + 6.12808e-05 *lens_ipow(x, 4)*dx + 0.00298959 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -4.38341e-05 *lens_ipow(x, 4)*dx*lambda + 0.0032203 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -15.4041 *x*lens_ipow(dx, 4)*lambda + -9.37585 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -9.10727 *y*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + -7367.19 *lens_ipow(dx, 7)*lens_ipow(lambda, 3)+0.0f;
const double dx10 =  + 0.287984 *dx*dy + 0.0170842 *y*dx + 0.000204265 *x*y + 0.0137032 *x*dy + 2.44136e-05 *lens_ipow(y, 3)*dx*lambda + 4.61389e-07 *x*lens_ipow(y, 3)*lambda + 8.93189e-05 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 0.00311621 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + 0.00349109 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx11 =  + 0.557703  + -0.0331657 *lambda + 0.460136 *lens_ipow(dx, 2) + 0.0556401 *y*dy + 0.871681 *lens_ipow(dy, 2) + 0.0170842 *x*dx + 0.0255298 *lens_ipow(lambda, 2) + 0.000102132 *lens_ipow(x, 2) + 0.000381817 *lens_ipow(y, 2) + -0.354955 *lens_ipow(dy, 2)*lambda + -0.0241441 *y*dy*lambda + -0.000280842 *lens_ipow(y, 2)*lambda + 0.000267335 *lens_ipow(y, 3)*dy*lambda + 0.0156496 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.00162234 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 1.4591e-06 *lens_ipow(y, 4)*lambda + 7.32408e-05 *x*lens_ipow(y, 2)*dx*lambda + 6.92084e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.280094 *y*lens_ipow(dy, 3)*lambda + 8.93189e-05 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 2) + 0.00623241 *x*y*dx*dy*lens_ipow(lambda, 2) + -8.76513 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.00174555 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx12 =  + 0.920272 *y*dx + 0.287984 *x*dy + 0.0170842 *x*y + -100.905 *dx*dy + 0.00108156 *lens_ipow(y, 3)*dx*lambda + 2.44136e-05 *x*lens_ipow(y, 3)*lambda + 0.00311621 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -17.5303 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx13 =  + 104.949  + 0.0278201 *lens_ipow(y, 2) + 1.74336 *y*dy + 0.287984 *x*dx + -50.4524 *lens_ipow(dx, 2) + 0.00685162 *lens_ipow(x, 2) + -155.058 *lens_ipow(dy, 2) + -0.70991 *y*dy*lambda + -0.0120721 *lens_ipow(y, 2)*lambda + 6.68338e-05 *lens_ipow(y, 4)*lambda + 0.0104331 *lens_ipow(y, 3)*dy*lambda + 0.420141 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 4.46594e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.00311621 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -17.5303 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + 0.00349109 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 3)+0.0f;
const double dx14 =  + -0.0331657 *y + 0.0510595 *y*lambda + -0.354955 *y*lens_ipow(dy, 2) + -0.0120721 *lens_ipow(y, 2)*dy + -9.36139e-05 *lens_ipow(y, 3) + 6.68338e-05 *lens_ipow(y, 4)*dy + 0.00521654 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.000540779 *lens_ipow(y, 3)*lens_ipow(dx, 2) + 2.9182e-07 *lens_ipow(y, 5) + 2.44136e-05 *x*lens_ipow(y, 3)*dx + 2.30695e-07 *lens_ipow(x, 2)*lens_ipow(y, 3) + 0.140047 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 8.93189e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy*lambda + 0.00623241 *x*lens_ipow(y, 2)*dx*dy*lambda + -26.2954 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.00523664 *lens_ipow(x, 2)*y*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx20 =  + -0.0169565  + 0.000168869 *lambda + -0.000291212 *y*dy + -0.000318743 *x*dx + -8.03958e-07 *lens_ipow(y, 2) + -1.03394e-06 *lens_ipow(x, 2) + -0.0134214 *lens_ipow(dy, 2) + -1.89426e-07 *lens_ipow(x, 3)*dx + 0.0111237 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -9.30721e-06 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.00397151 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.00137929 *lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx21 =  + -0.000291212 *x*dy + -1.60792e-06 *x*y + -0.000687921 *y*dx*lambda + -0.0624919 *dx*dy*lambda + 0.128968 *dx*dy*lens_ipow(lambda, 3) + 0.00220621 *y*dx*lens_ipow(lambda, 3) + -0.00194403 *y*dx*lens_ipow(lambda, 4) + -0.118404 *dx*dy*lens_ipow(lambda, 5)+0.0f;
const double dx22 =  + -1.4141  + 0.0103592 *lambda + -0.000159372 *lens_ipow(x, 2) + 2.61025 *lens_ipow(dx, 2) + -1.03877 *lens_ipow(dx, 2)*lambda + -0.00034396 *lens_ipow(y, 2)*lambda + -0.0624919 *y*dy*lambda + -4.73564e-08 *lens_ipow(x, 4) + 1.73669 *lens_ipow(dx, 4) + 0.0222474 *x*dx*lens_ipow(dy, 2) + -12.101 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.80072 *lens_ipow(dy, 4) + -6.20481e-06 *lens_ipow(x, 3)*dx + 5.8318 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00794302 *x*dx*lens_ipow(lambda, 3) + 27.4023 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.128968 *y*dy*lens_ipow(lambda, 3) + 0.0011031 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + -17.682 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -0.000972013 *lens_ipow(y, 2)*lens_ipow(lambda, 4) + -0.118404 *y*dy*lens_ipow(lambda, 5)+0.0f;
const double dx23 =  + -0.000291212 *x*y + -0.0268427 *x*dy + -0.0624919 *y*dx*lambda + 0.0222474 *x*lens_ipow(dx, 2)*dy + -24.2021 *dx*dy*lens_ipow(lambda, 2) + 3.20288 *dx*lens_ipow(dy, 3) + 3.88786 *lens_ipow(dx, 3)*dy + -0.00275857 *x*dy*lens_ipow(lambda, 3) + 54.8045 *dx*dy*lens_ipow(lambda, 3) + 0.128968 *y*dx*lens_ipow(lambda, 3) + -35.3639 *dx*dy*lens_ipow(lambda, 4) + -0.118404 *y*dx*lens_ipow(lambda, 5)+0.0f;
const double dx24 =  + 0.000168869 *x + 0.0103592 *dx + -0.346257 *lens_ipow(dx, 3) + -0.00034396 *lens_ipow(y, 2)*dx + -0.0624919 *y*dx*dy + -24.2021 *dx*lens_ipow(dy, 2)*lambda + -0.0119145 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.00413786 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 82.2068 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.386904 *y*dx*dy*lens_ipow(lambda, 2) + 0.00330931 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -70.7279 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.00388805 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 3) + -0.592018 *y*dx*dy*lens_ipow(lambda, 4)+0.0f;
const double dx30 =  + 0.0302881 *dx*dy + -3.39099e-05 *y*dx + 0.000165876 *x*dy + 3.232e-05 *x*dy*lambda + 6.7974e-07 *x*y*lambda + -0.0257833 *lens_ipow(dx, 3)*dy + 0.000160241 *y*dx*lens_ipow(dy, 2) + 3.68815e-05 *y*dx*lens_ipow(lambda, 3) + 1.42066e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -3.75187e-10 *x*lens_ipow(y, 4)*dy + 6.05469e-06 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -5.7743e-05 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 2.59481e-12 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 1.5318e-07 *lens_ipow(y, 4)*lens_ipow(dx, 3)*dy+0.0f;
const double dx31 =  + -0.0169439  + 0.000146825 *lambda + 0.0011714 *lens_ipow(dx, 2) + -0.000314032 *y*dy + -3.39099e-05 *x*dx + -9.32955e-07 *lens_ipow(y, 2) + 3.3987e-07 *lens_ipow(x, 2)*lambda + 0.000160241 *x*dx*lens_ipow(dy, 2) + 3.68815e-05 *x*dx*lens_ipow(lambda, 3) + -0.00359211 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 9.47105e-08 *lens_ipow(x, 3)*y*dx*dy + -7.50374e-10 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 6.05469e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -0.000115486 *x*y*dx*lens_ipow(dy, 3) + 2.59481e-12 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 6.12719e-07 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*dy+0.0f;
const double dx32 =  + 0.0023428 *y*dx + 0.0302881 *x*dy + -3.39099e-05 *x*y + 4.46195 *dx*dy + -0.465997 *dx*dy*lambda + -0.0773498 *x*lens_ipow(dx, 2)*dy + 0.000160241 *x*y*lens_ipow(dy, 2) + -5.27277 *lens_ipow(dx, 3)*dy + 3.68815e-05 *x*y*lens_ipow(lambda, 3) + 4.73553e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 6.05469e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -5.7743e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + 4.59539e-07 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy+0.0f;
const double dx33 =  + -1.41106  + -0.000157016 *lens_ipow(y, 2) + 0.0302881 *x*dx + 2.23097 *lens_ipow(dx, 2) + 0.00786042 *lens_ipow(lambda, 2) + 8.29378e-05 *lens_ipow(x, 2) + 2.57095 *lens_ipow(dy, 2) + -0.232999 *lens_ipow(dx, 2)*lambda + 1.616e-05 *lens_ipow(x, 2)*lambda + -0.965126 *lens_ipow(dy, 2)*lambda + -0.0257833 *x*lens_ipow(dx, 3) + 2.28872 *lens_ipow(dy, 4) + 0.000320483 *x*y*dx*dy + -1.31819 *lens_ipow(dx, 4) + -0.00718422 *y*dy*lens_ipow(lambda, 3) + 4.73553e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -1.87593e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 3.02735e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.000173229 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 6.48702e-13 *lens_ipow(x, 4)*lens_ipow(y, 4) + 1.5318e-07 *x*lens_ipow(y, 4)*lens_ipow(dx, 3)+0.0f;
const double dx34 =  + 0.000146825 *y + 0.0157208 *dy*lambda + -0.232999 *lens_ipow(dx, 2)*dy + 1.616e-05 *lens_ipow(x, 2)*dy + -0.321709 *lens_ipow(dy, 3) + 3.3987e-07 *lens_ipow(x, 2)*y + 0.000110645 *x*y*dx*lens_ipow(lambda, 2) + -0.0107763 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx40 =  + 0.000388006 *dx + 1.52311e-05 *x + -0.0164745 *lens_ipow(dx, 3) + -4.23482e-05 *x*y*dy + -2.0752e-05 *lens_ipow(y, 2)*dx + -5.59936e-07 *x*lens_ipow(y, 2) + -0.00185858 *x*lens_ipow(dx, 2) + -5.48375e-05 *lens_ipow(x, 2)*dx + -0.0300732 *dx*lens_ipow(dy, 2) + -5.0844e-07 *lens_ipow(x, 3) + -0.00155588 *y*dx*dy + -0.000833108 *x*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + -0.000796084 *y*lens_ipow(dx, 2) + -2.11741e-05 *lens_ipow(x, 2)*dy + -4.15041e-05 *x*y*dx + -5.59936e-07 *lens_ipow(x, 2)*y + -0.0304858 *lens_ipow(dx, 2)*dy + -0.00155588 *x*dx*dy + -1.49693e-05 *lens_ipow(y, 2)*dy + -2.65287e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -3.66497e-07 *lens_ipow(y, 4)*dy + -3.32549e-09 *lens_ipow(y, 5) + -7.37443e-06 *lens_ipow(y, 4)*lens_ipow(dy, 3) + -4.07885e-08 *lens_ipow(y, 5)*lens_ipow(dy, 2) + 3.87981e-12 *lens_ipow(y, 7) + -6.34098e-07 *lens_ipow(y, 5)*lens_ipow(dy, 4)+0.0f;
const double dx42 =  + 0.000388006 *x + -0.000796084 *lens_ipow(y, 2)*dx + -0.0494235 *x*lens_ipow(dx, 2) + -1.46191 *dx*lens_ipow(dy, 2) + -2.0752e-05 *x*lens_ipow(y, 2) + -0.00185858 *lens_ipow(x, 2)*dx + -0.0609716 *y*dx*dy + -1.82792e-05 *lens_ipow(x, 3) + -0.0300732 *x*lens_ipow(dy, 2) + -0.00155588 *x*y*dy+0.0f;
const double dx43 =  + -1.46191 *lens_ipow(dx, 2)*dy + -2.11741e-05 *lens_ipow(x, 2)*y + -0.0304858 *y*lens_ipow(dx, 2) + -0.0601464 *x*dx*dy + -0.00155588 *x*y*dx + -0.000833108 *lens_ipow(x, 2)*dy + -4.98976e-06 *lens_ipow(y, 3) + -1.32643e-05 *lens_ipow(y, 4)*dy + -7.32995e-08 *lens_ipow(y, 5) + -4.42466e-06 *lens_ipow(y, 5)*lens_ipow(dy, 2) + -1.35962e-08 *lens_ipow(y, 6)*dy + -4.22732e-07 *lens_ipow(y, 6)*lens_ipow(dy, 3)+0.0f;
const double dx44 =  + 1.26704  + -5.27438 *lambda + 7.75064 *lens_ipow(lambda, 2) + -3.92567 *lens_ipow(lambda, 3)+0.0f;
} break;
