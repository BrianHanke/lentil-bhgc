case kodak__petzval__1948__65mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 49.8357 *begin_dx + 0.793548 *begin_x + 0.791318 *begin_dx*begin_lambda + -0.00151901 *begin_x*begin_lambda + -0.577759 *begin_dx*lens_ipow(begin_lambda, 2) + 0.512329 *begin_y*begin_dx*begin_dy + 0.00810194 *lens_ipow(begin_y, 2)*begin_dx + 0.100015 *begin_x*lens_ipow(begin_dy, 2) + 0.571734 *begin_x*lens_ipow(begin_dx, 2) + 0.011248 *begin_x*begin_y*begin_dy + 0.000113484 *begin_x*lens_ipow(begin_y, 2) + 0.0170971 *lens_ipow(begin_x, 2)*begin_dx + 8.34546e-05 *lens_ipow(begin_x, 3) + 27.5173 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -0.039681 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 0.000461425 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 1.62897e-05 *begin_x*lens_ipow(begin_y, 3)*begin_dy + 1.18569e-07 *begin_x*lens_ipow(begin_y, 4) + 0.0424619 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + 1.89441e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + 0.000323218 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 0.00293363 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + 1.94167e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dy + 3.65412e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 6.60368e-05 *lens_ipow(begin_x, 4)*begin_dx + 4.70589e-07 *lens_ipow(begin_x, 5) + 0.0187018 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)*begin_lambda + -6.36602e-12 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*begin_dx*begin_dy;
  pred_y =  + 49.8145 *begin_dy + 0.793134 *begin_y + 0.782763 *begin_dy*begin_lambda + -0.00173041 *begin_y*begin_lambda + -0.569979 *begin_dy*lens_ipow(begin_lambda, 2) + 1.8223 *lens_ipow(begin_dx, 2)*begin_dy + 0.540615 *begin_y*lens_ipow(begin_dy, 2) + 0.143649 *begin_y*lens_ipow(begin_dx, 2) + 0.016552 *lens_ipow(begin_y, 2)*begin_dy + 8.64649e-05 *lens_ipow(begin_y, 3) + 0.564544 *begin_x*begin_dx*begin_dy + 0.0129486 *begin_x*begin_y*begin_dx + 0.008746 *lens_ipow(begin_x, 2)*begin_dy + 0.00013555 *lens_ipow(begin_x, 2)*begin_y + 14.8466 *lens_ipow(begin_dy, 5) + 2.28976 *begin_y*lens_ipow(begin_dy, 4) + 0.148822 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + 0.00507292 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 8.44335e-05 *lens_ipow(begin_y, 4)*begin_dy + 5.10374e-07 *lens_ipow(begin_y, 5) + 0.00018379 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + 7.31837e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy + 0.327032 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + 5.28801e-09 *lens_ipow(begin_x, 5)*begin_y*begin_dx + -347.529 *lens_ipow(begin_dx, 8)*begin_dy + 3.66578e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -2.26265e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx*begin_dy + 3.3364e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5);
  pred_dx =  + 0.581607 *begin_dx + -0.0107614 *begin_x + -0.179966 *begin_dx*lens_ipow(begin_dy, 2) + -0.223445 *lens_ipow(begin_dx, 3) + 0.013369 *begin_y*begin_dx*begin_dy + 0.000268833 *lens_ipow(begin_y, 2)*begin_dx + 0.00500965 *begin_x*lens_ipow(begin_dy, 2) + 0.0154507 *begin_x*lens_ipow(begin_dx, 2) + 0.000591278 *begin_x*begin_y*begin_dy + 6.40062e-06 *begin_x*lens_ipow(begin_y, 2) + 0.000752304 *lens_ipow(begin_x, 2)*begin_dx + 5.03575e-06 *lens_ipow(begin_x, 3) + 0.00104768 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + 8.77827e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + 2.23209e-06 *lens_ipow(begin_x, 4)*begin_dx + 1.74792e-08 *lens_ipow(begin_x, 5) + -0.000865152 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 4.12906e-07 *lens_ipow(begin_x, 3)*begin_y*begin_dy*begin_lambda + 0.0600005 *begin_x*lens_ipow(begin_dy, 6) + 0.000280395 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 1.14933e-06 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + 1.63744e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + -2.07653e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + 3.72822e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4) + 0.083707 *begin_y*begin_dx*lens_ipow(begin_dy, 5)*begin_lambda + 1.70699e-11 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_lambda + -0.0646334 *begin_x*begin_y*lens_ipow(begin_dx, 6)*begin_dy*begin_lambda + 9.43238e-09 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda;
  pred_dy =  + 0.581579 *begin_dy + -0.010769 *begin_y + -0.202601 *lens_ipow(begin_dy, 3) + -0.180116 *lens_ipow(begin_dx, 2)*begin_dy + 0.0157879 *begin_y*lens_ipow(begin_dy, 2) + 0.00555545 *begin_y*lens_ipow(begin_dx, 2) + 0.000757536 *lens_ipow(begin_y, 2)*begin_dy + 5.1755e-06 *lens_ipow(begin_y, 3) + 0.013955 *begin_x*begin_dx*begin_dy + 0.000612511 *begin_x*begin_y*begin_dx + 0.000276913 *lens_ipow(begin_x, 2)*begin_dy + 6.6723e-06 *lens_ipow(begin_x, 2)*begin_y + -0.0311432 *lens_ipow(begin_dy, 3)*begin_lambda + 0.000830198 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + 7.18082e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 1.91241e-06 *lens_ipow(begin_y, 4)*begin_dy + 1.52354e-08 *lens_ipow(begin_y, 5) + -2.01653e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 0.000262345 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -1.91883e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 3.41762e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3) + 9.26605e-10 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_lambda + -5.29445 *lens_ipow(begin_dx, 6)*begin_dy*lens_ipow(begin_lambda, 2) + -0.00759056 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 6)*begin_dy + 0.000946473 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 1.00166e-08 *begin_x*lens_ipow(begin_y, 5)*begin_dx*lens_ipow(begin_dy, 2) + 2.40498e-14 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7) + 4.57673e-14 *lens_ipow(begin_x, 8)*begin_y*lens_ipow(begin_lambda, 2);
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 49.8357  + 0.791318 *begin_lambda + -0.577759 *lens_ipow(begin_lambda, 2) + 0.512329 *begin_y*begin_dy + 0.00810194 *lens_ipow(begin_y, 2) + 1.14347 *begin_x*begin_dx + 0.0170971 *lens_ipow(begin_x, 2) + 82.552 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.0793619 *begin_x*begin_y*begin_dx*begin_dy + 0.127386 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 1.89441e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 0.00586726 *lens_ipow(begin_x, 3)*begin_dx + 6.60368e-05 *lens_ipow(begin_x, 4) + 0.0561053 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3)*begin_lambda + -6.36602e-12 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*begin_dy+0.0f;
  dx1_domega0(0, 1) =  + 0.512329 *begin_y*begin_dx + 0.20003 *begin_x*begin_dy + 0.011248 *begin_x*begin_y + 55.0347 *lens_ipow(begin_dx, 3)*begin_dy + -0.039681 *begin_x*begin_y*lens_ipow(begin_dx, 2) + 0.000922851 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 1.62897e-05 *begin_x*lens_ipow(begin_y, 3) + 0.000646435 *lens_ipow(begin_x, 3)*begin_dy + 1.94167e-05 *lens_ipow(begin_x, 3)*begin_y + 0.0561053 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*begin_lambda + -6.36602e-12 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*begin_dx+0.0f;
  dx1_domega0(1, 0) =  + 3.6446 *begin_dx*begin_dy + 0.287298 *begin_y*begin_dx + 0.564544 *begin_x*begin_dy + 0.0129486 *begin_x*begin_y + 0.654063 *begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 5.28801e-09 *lens_ipow(begin_x, 5)*begin_y + -2780.23 *lens_ipow(begin_dx, 7)*begin_dy + 7.33156e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + -2.26265e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dy+0.0f;
  dx1_domega0(1, 1) =  + 49.8145  + 0.782763 *begin_lambda + -0.569979 *lens_ipow(begin_lambda, 2) + 1.8223 *lens_ipow(begin_dx, 2) + 1.08123 *begin_y*begin_dy + 0.016552 *lens_ipow(begin_y, 2) + 0.564544 *begin_x*begin_dx + 0.008746 *lens_ipow(begin_x, 2) + 74.2332 *lens_ipow(begin_dy, 4) + 9.15906 *begin_y*lens_ipow(begin_dy, 3) + 0.446466 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.0101458 *lens_ipow(begin_y, 3)*begin_dy + 8.44335e-05 *lens_ipow(begin_y, 4) + 0.000367579 *lens_ipow(begin_x, 2)*begin_y*begin_dy + 7.31837e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 0.654063 *begin_y*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + -347.529 *lens_ipow(begin_dx, 8) + 7.33156e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + -2.26265e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
