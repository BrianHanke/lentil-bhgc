case kodak__petzval__1948__65mm:
{
const double dx00 =  + 0.793548  + -0.00151901 *lambda + 0.100015 *lens_ipow(dy, 2) + 0.571734 *lens_ipow(dx, 2) + 0.011248 *y*dy + 0.000113484 *lens_ipow(y, 2) + 0.0341942 *x*dx + 0.000250364 *lens_ipow(x, 2) + -0.039681 *y*lens_ipow(dx, 2)*dy + 0.000461425 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 1.62897e-05 *lens_ipow(y, 3)*dy + 1.18569e-07 *lens_ipow(y, 4) + 0.0849237 *x*lens_ipow(dx, 3) + 3.78882e-05 *x*lens_ipow(y, 2)*dx + 0.000969653 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00880089 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 5.82501e-05 *lens_ipow(x, 2)*y*dy + 1.09624e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.000264147 *lens_ipow(x, 3)*dx + 2.35295e-06 *lens_ipow(x, 4) + 0.0374036 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + -3.81961e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx01 =  + 0.512329 *dx*dy + 0.0162039 *y*dx + 0.011248 *x*dy + 0.000226968 *x*y + -0.039681 *x*lens_ipow(dx, 2)*dy + 0.000922851 *x*y*lens_ipow(dy, 2) + 4.88691e-05 *x*lens_ipow(y, 2)*dy + 4.74274e-07 *x*lens_ipow(y, 3) + 3.78882e-05 *lens_ipow(x, 2)*y*dx + 1.94167e-05 *lens_ipow(x, 3)*dy + 7.30824e-07 *lens_ipow(x, 3)*y + 0.0187018 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + -1.90981e-11 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx*dy+0.0f;
const double dx02 =  + 49.8357  + 0.791318 *lambda + -0.577759 *lens_ipow(lambda, 2) + 0.512329 *y*dy + 0.00810194 *lens_ipow(y, 2) + 1.14347 *x*dx + 0.0170971 *lens_ipow(x, 2) + 82.552 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.0793619 *x*y*dx*dy + 0.127386 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 1.89441e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00586726 *lens_ipow(x, 3)*dx + 6.60368e-05 *lens_ipow(x, 4) + 0.0561053 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + -6.36602e-12 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy+0.0f;
const double dx03 =  + 0.512329 *y*dx + 0.20003 *x*dy + 0.011248 *x*y + 55.0347 *lens_ipow(dx, 3)*dy + -0.039681 *x*y*lens_ipow(dx, 2) + 0.000922851 *x*lens_ipow(y, 2)*dy + 1.62897e-05 *x*lens_ipow(y, 3) + 0.000646435 *lens_ipow(x, 3)*dy + 1.94167e-05 *lens_ipow(x, 3)*y + 0.0561053 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + -6.36602e-12 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx+0.0f;
const double dx04 =  + 0.791318 *dx + -0.00151901 *x + -1.15552 *dx*lambda + 0.0187018 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx10 =  + 0.564544 *dx*dy + 0.0129486 *y*dx + 0.017492 *x*dy + 0.0002711 *x*y + 0.000367579 *x*y*lens_ipow(dy, 2) + 1.46367e-05 *x*lens_ipow(y, 2)*dy + 2.644e-08 *lens_ipow(x, 4)*y*dx + 7.33156e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -6.78795e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy + 1.33456e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const double dx11 =  + 0.793134  + -0.00173041 *lambda + 0.540615 *lens_ipow(dy, 2) + 0.143649 *lens_ipow(dx, 2) + 0.0331039 *y*dy + 0.000259395 *lens_ipow(y, 2) + 0.0129486 *x*dx + 0.00013555 *lens_ipow(x, 2) + 2.28976 *lens_ipow(dy, 4) + 0.297644 *y*lens_ipow(dy, 3) + 0.0152188 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000337734 *lens_ipow(y, 3)*dy + 2.55187e-06 *lens_ipow(y, 4) + 0.00018379 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.46367e-05 *lens_ipow(x, 2)*y*dy + 0.327032 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 5.28801e-09 *lens_ipow(x, 5)*dx + 0.000109973 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -9.0506e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 1.6682e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx12 =  + 3.6446 *dx*dy + 0.287298 *y*dx + 0.564544 *x*dy + 0.0129486 *x*y + 0.654063 *y*dx*lens_ipow(dy, 2)*lambda + 5.28801e-09 *lens_ipow(x, 5)*y + -2780.23 *lens_ipow(dx, 7)*dy + 7.33156e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -2.26265e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy+0.0f;
const double dx13 =  + 49.8145  + 0.782763 *lambda + -0.569979 *lens_ipow(lambda, 2) + 1.8223 *lens_ipow(dx, 2) + 1.08123 *y*dy + 0.016552 *lens_ipow(y, 2) + 0.564544 *x*dx + 0.008746 *lens_ipow(x, 2) + 74.2332 *lens_ipow(dy, 4) + 9.15906 *y*lens_ipow(dy, 3) + 0.446466 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0101458 *lens_ipow(y, 3)*dy + 8.44335e-05 *lens_ipow(y, 4) + 0.000367579 *lens_ipow(x, 2)*y*dy + 7.31837e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.654063 *y*lens_ipow(dx, 2)*dy*lambda + -347.529 *lens_ipow(dx, 8) + 7.33156e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -2.26265e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx+0.0f;
const double dx14 =  + 0.782763 *dy + -0.00173041 *y + -1.13996 *dy*lambda + 0.327032 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx20 =  + -0.0107614  + 0.00500965 *lens_ipow(dy, 2) + 0.0154507 *lens_ipow(dx, 2) + 0.000591278 *y*dy + 6.40062e-06 *lens_ipow(y, 2) + 0.00150461 *x*dx + 1.51072e-05 *lens_ipow(x, 2) + 0.00209535 *x*lens_ipow(dx, 3) + 0.000263348 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 8.92835e-06 *lens_ipow(x, 3)*dx + 8.73959e-08 *lens_ipow(x, 4) + -0.0017303 *x*dx*lens_ipow(dy, 2)*lambda + 1.23872e-06 *lens_ipow(x, 2)*y*dy*lambda + 0.0600005 *lens_ipow(dy, 6) + 0.000280395 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.14933e-06 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 3.27489e-06 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + -4.15306e-07 *x*lens_ipow(y, 3)*dx*dy + 1.11847e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 8.53494e-11 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + -0.0646334 *y*lens_ipow(dx, 6)*dy*lambda + 4.71619e-08 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx21 =  + 0.013369 *dx*dy + 0.000537665 *y*dx + 0.000591278 *x*dy + 1.28012e-05 *x*y + 4.12906e-07 *lens_ipow(x, 3)*dy*lambda + 0.00056079 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 3.44798e-06 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + 3.27489e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + -6.22959e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 1.49129e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.083707 *dx*lens_ipow(dy, 5)*lambda + 3.41398e-11 *lens_ipow(x, 5)*y*lambda + -0.0646334 *x*lens_ipow(dx, 6)*dy*lambda + 9.43238e-09 *lens_ipow(x, 5)*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx22 =  + 0.581607  + -0.179966 *lens_ipow(dy, 2) + -0.670336 *lens_ipow(dx, 2) + 0.013369 *y*dy + 0.000268833 *lens_ipow(y, 2) + 0.0309013 *x*dx + 0.000752304 *lens_ipow(x, 2) + 0.00314303 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000175565 *lens_ipow(x, 3)*dx + 2.23209e-06 *lens_ipow(x, 4) + -0.000865152 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 0.00056079 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 4.91233e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.07653e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 0.083707 *y*lens_ipow(dy, 5)*lambda + -0.3878 *x*y*lens_ipow(dx, 5)*dy*lambda + 1.88648e-08 *lens_ipow(x, 5)*y*dx*dy*lambda+0.0f;
const double dx23 =  + -0.359933 *dx*dy + 0.013369 *y*dx + 0.0100193 *x*dy + 0.000591278 *x*y + -0.0017303 *lens_ipow(x, 2)*dx*dy*lambda + 4.12906e-07 *lens_ipow(x, 3)*y*lambda + 0.360003 *x*lens_ipow(dy, 5) + 0.00056079 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 3.44798e-06 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + -2.07653e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 0.418535 *y*dx*lens_ipow(dy, 4)*lambda + -0.0646334 *x*y*lens_ipow(dx, 6)*lambda + 9.43238e-09 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*lambda+0.0f;
const double dx24 =  + -0.000865152 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 4.12906e-07 *lens_ipow(x, 3)*y*dy + 0.083707 *y*dx*lens_ipow(dy, 5) + 1.70699e-11 *lens_ipow(x, 5)*lens_ipow(y, 2) + -0.0646334 *x*y*lens_ipow(dx, 6)*dy + 9.43238e-09 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*dy+0.0f;
const double dx30 =  + 0.013955 *dx*dy + 0.000612511 *y*dx + 0.000553826 *x*dy + 1.33446e-05 *x*y + -4.03306e-09 *x*lens_ipow(y, 3) + 0.00052469 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -5.75649e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 1.36705e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 4.63302e-09 *lens_ipow(x, 4)*y*dx*lambda + 1.00166e-08 *lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + 4.80997e-14 *x*lens_ipow(y, 7) + 3.66139e-13 *lens_ipow(x, 7)*y*lens_ipow(lambda, 2)+0.0f;
const double dx31 =  + -0.010769  + 0.0157879 *lens_ipow(dy, 2) + 0.00555545 *lens_ipow(dx, 2) + 0.00151507 *y*dy + 1.55265e-05 *lens_ipow(y, 2) + 0.000612511 *x*dx + 6.6723e-06 *lens_ipow(x, 2) + 0.0016604 *y*lens_ipow(dy, 3) + 0.000215425 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 7.64962e-06 *lens_ipow(y, 3)*dy + 7.61771e-08 *lens_ipow(y, 4) + -6.04959e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.000262345 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -3.83766e-07 *lens_ipow(x, 3)*y*dx*dy + 1.02529e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 9.26605e-10 *lens_ipow(x, 5)*dx*lambda + -0.0151811 *y*lens_ipow(dx, 6)*dy + 0.00283942 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 5.0083e-08 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + 1.68349e-13 *lens_ipow(x, 2)*lens_ipow(y, 6) + 4.57673e-14 *lens_ipow(x, 8)*lens_ipow(lambda, 2)+0.0f;
const double dx32 =  + -0.360232 *dx*dy + 0.0111109 *y*dx + 0.013955 *x*dy + 0.000612511 *x*y + 0.00052469 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -1.91883e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 9.26605e-10 *lens_ipow(x, 5)*y*lambda + -31.7667 *lens_ipow(dx, 5)*dy*lens_ipow(lambda, 2) + -0.0455434 *lens_ipow(y, 2)*lens_ipow(dx, 5)*dy + 0.00189295 *lens_ipow(y, 3)*dx*lens_ipow(dy, 4) + 1.00166e-08 *x*lens_ipow(y, 5)*lens_ipow(dy, 2)+0.0f;
const double dx33 =  + 0.581579  + -0.607802 *lens_ipow(dy, 2) + -0.180116 *lens_ipow(dx, 2) + 0.0315759 *y*dy + 0.000757536 *lens_ipow(y, 2) + 0.013955 *x*dx + 0.000276913 *lens_ipow(x, 2) + -0.0934297 *lens_ipow(dy, 2)*lambda + 0.00249059 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000143616 *lens_ipow(y, 3)*dy + 1.91241e-06 *lens_ipow(y, 4) + 0.00052469 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -1.91883e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -5.29445 *lens_ipow(dx, 6)*lens_ipow(lambda, 2) + -0.00759056 *lens_ipow(y, 2)*lens_ipow(dx, 6) + 0.00378589 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 2.00332e-08 *x*lens_ipow(y, 5)*dx*dy+0.0f;
const double dx34 =  + -0.0311432 *lens_ipow(dy, 3) + 9.26605e-10 *lens_ipow(x, 5)*y*dx + -10.5889 *lens_ipow(dx, 6)*dy*lambda + 9.15347e-14 *lens_ipow(x, 8)*y*lambda+0.0f;
const double dx40 =  + -0.0033474 *y*dx*dy + -0.000100299 *lens_ipow(y, 2)*dx + -0.00159566 *x*lens_ipow(dy, 2) + -0.000193875 *x*y*dy + -4.56135e-06 *x*lens_ipow(y, 2) + -0.0513119 *x*lens_ipow(dx, 4) + -0.00655821 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.000301673 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -6.27892e-06 *lens_ipow(x, 4)*dx + -5.11083e-08 *lens_ipow(x, 5) + 0.0658103 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 3) + -2.89762e-12 *x*lens_ipow(y, 7)*dy + -5.87253e-14 *x*lens_ipow(y, 8) + 1.77645e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 4) + 1.32468e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx*dy + -4.92326e-13 *lens_ipow(x, 5)*lens_ipow(y, 4) + -2.45117e-09 *lens_ipow(y, 6)*lens_ipow(dx, 3)*lambda+0.0f;
const double dx41 =  + -0.00176073 *y*lens_ipow(dx, 2) + -0.0033474 *x*dx*dy + -0.000200598 *x*y*dx + -9.69376e-05 *lens_ipow(x, 2)*dy + -4.56135e-06 *lens_ipow(x, 2)*y + -0.0509199 *y*lens_ipow(dy, 4) + -0.00672646 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.00031363 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -6.50425e-06 *lens_ipow(y, 4)*dy + -5.21784e-08 *lens_ipow(y, 5) + 0.0329051 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 3) + -1.01417e-11 *lens_ipow(x, 2)*lens_ipow(y, 6)*dy + -2.34901e-13 *lens_ipow(x, 2)*lens_ipow(y, 7) + 8.88223e-08 *lens_ipow(x, 4)*y*lens_ipow(dx, 4) + 7.94806e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*dy + -3.28218e-13 *lens_ipow(x, 6)*lens_ipow(y, 3) + -1.4707e-08 *x*lens_ipow(y, 5)*lens_ipow(dx, 3)*lambda+0.0f;
const double dx42 =  + 2.2393 *dx*lens_ipow(dy, 2) + -0.00176073 *lens_ipow(y, 2)*dx + -0.0033474 *x*y*dy + -0.000100299 *x*lens_ipow(y, 2) + -0.102624 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.00655821 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -0.000150836 *lens_ipow(x, 4)*dx + -1.25578e-06 *lens_ipow(x, 5) + 0.131621 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 1.77645e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 3) + 2.64935e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dy + -7.35351e-09 *x*lens_ipow(y, 6)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx43 =  + 2.2393 *lens_ipow(dx, 2)*dy + -0.0033474 *x*y*dx + -0.00159566 *lens_ipow(x, 2)*dy + -9.69376e-05 *lens_ipow(x, 2)*y + -0.10184 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.00672646 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.000156815 *lens_ipow(y, 4)*dy + -1.30085e-06 *lens_ipow(y, 5) + 0.0987154 *lens_ipow(x, 2)*y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -1.44881e-12 *lens_ipow(x, 2)*lens_ipow(y, 7) + 2.64935e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx+0.0f;
const double dx44 =  + 0.514388  + -1.41461 *lambda + 1.02547 *lens_ipow(lambda, 2) + -2.45117e-09 *x*lens_ipow(y, 6)*lens_ipow(dx, 3)+0.0f;
} break;
