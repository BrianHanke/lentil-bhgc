case canon__unknown__1956__52mm:
{
const double dx00 =  + 0.523722  + 0.809667 *lens_ipow(dy, 2) + 0.819783 *lens_ipow(dx, 2) + 0.036461 *y*dy + 0.00024367 *lens_ipow(y, 2) + 0.091111 *x*dx + 0.00302119 *lens_ipow(x, 2)*lambda + -0.467476 *lens_ipow(dy, 4) + 0.000673556 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00056091 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00288717 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.00133868 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.103458 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -2.9186e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.0832333 *lens_ipow(lambda, 7)+0.0f;
const double dx01 =  + 0.01779 *y*dx + 0.036461 *x*dy + 0.000487341 *x*y + 0.00134711 *x*y*lens_ipow(dy, 2) + 0.00112182 *x*y*lens_ipow(dx, 2) + -3.89147e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const double dx02 =  + 51.6563  + -24.2005 *lens_ipow(dy, 2) + -81.4708 *lens_ipow(dx, 2) + 0.00889498 *lens_ipow(y, 2) + 1.63957 *x*dx + 0.0455555 *lens_ipow(x, 2) + 0.00112182 *x*lens_ipow(y, 2)*dx + 273.767 *lens_ipow(dx, 4)*lambda + 632.857 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 668.706 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.155187 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + -48.4011 *dx*dy + 1.61933 *x*dy + 0.036461 *x*y + -1.8699 *x*lens_ipow(dy, 3) + 0.00134711 *x*lens_ipow(y, 2)*dy + 0.000892451 *lens_ipow(x, 3)*dy + 843.81 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 267.482 *lens_ipow(dx, 5)*dy+0.0f;
const double dx04 =  + 0.00100706 *lens_ipow(x, 3) + -0.00192478 *lens_ipow(x, 3)*lambda + 54.7534 *lens_ipow(dx, 5) + -0.103458 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lambda + 0.582633 *x*lens_ipow(lambda, 6)+0.0f;
const double dx10 =  + 0.0398231 *y*dx + 0.0200473 *x*dy + 0.000643007 *x*y + 1.17293 *lens_ipow(dx, 3)*dy + -0.00928132 *y*lens_ipow(dx, 3) + -2.04794e-05 *lens_ipow(y, 3)*dx + 0.00130529 *x*y*lens_ipow(dy, 2) + -1.07791e-06 *x*lens_ipow(y, 3)+0.0f;
const double dx11 =  + 0.509272  + 0.0171012 *lambda + 0.886045 *lens_ipow(dy, 2) + 0.857553 *lens_ipow(dx, 2) + 0.0952321 *y*dy + 0.00101264 *lens_ipow(y, 2) + 0.0398231 *x*dx + 0.000321503 *lens_ipow(x, 2) + 0.220876 *y*lens_ipow(dy, 3) + 0.0138001 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000199396 *lens_ipow(y, 3)*dy + -0.00928132 *x*lens_ipow(dx, 3) + -6.14382e-05 *x*lens_ipow(y, 2)*dx + 0.000652643 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -1.61687e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)+0.0f;
const double dx12 =  + -59.8193 *dx*dy + 1.71511 *y*dx + 0.0398231 *x*y + 118.088 *dx*lens_ipow(dy, 3) + 256.595 *lens_ipow(dx, 3)*dy + 3.51878 *x*lens_ipow(dx, 2)*dy + -0.027844 *x*y*lens_ipow(dx, 2) + -2.04794e-05 *x*lens_ipow(y, 3)+0.0f;
const double dx13 =  + 51.5871  + -76.822 *lens_ipow(dy, 2) + -29.9096 *lens_ipow(dx, 2) + 1.77209 *y*dy + 0.047616 *lens_ipow(y, 2) + 0.0100237 *lens_ipow(x, 2) + 177.132 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 64.1486 *lens_ipow(dx, 4) + 0.331314 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00920008 *lens_ipow(y, 3)*dy + 4.98491e-05 *lens_ipow(y, 4) + 1.17293 *x*lens_ipow(dx, 3) + 0.00130529 *lens_ipow(x, 2)*y*dy+0.0f;
const double dx14 =  + 0.0171012 *y+0.0f;
const double dx20 =  + -0.0364797  + -0.00034037 *lambda + -0.0491957 *lens_ipow(dy, 2) + 0.00773053 *lens_ipow(dx, 2) + -0.00168401 *y*dy + -4.78389e-06 *lens_ipow(y, 2) + -0.00090818 *x*dx + 4.96067e-06 *lens_ipow(x, 2) + -0.00267158 *x*dx*lens_ipow(dy, 2) + -7.50487e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 2.72453e-07 *lens_ipow(y, 3)*dy*lambda + -4.36483e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 6.36933e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 1.33601e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)+0.0f;
const double dx21 =  + -0.0495115 *dx*dy + -0.000488417 *y*dx + -0.00168401 *x*dy + -9.56779e-06 *x*y + -0.00109267 *y*dx*lens_ipow(dy, 2) + 8.17358e-07 *x*lens_ipow(y, 2)*dy*lambda + -1.45494e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 3.18466e-09 *lens_ipow(x, 4)*y*dx + 5.34403e-11 *lens_ipow(x, 5)*y+0.0f;
const double dx22 =  + -1.70514  + -1.36131 *lens_ipow(dy, 2) + 2.66923 *lens_ipow(dx, 2) + -0.0495115 *y*dy + -0.000244209 *lens_ipow(y, 2) + 0.0154611 *x*dx + -0.00045409 *lens_ipow(x, 2) + 0.864034 *lens_ipow(dx, 2)*lambda + -0.000546333 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00133579 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -4.64832 *lens_ipow(dx, 4)*lens_ipow(lambda, 2) + -2.90989e-06 *lens_ipow(x, 3)*y*dx*dy + 1.59233e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)+0.0f;
const double dx23 =  + -2.72262 *dx*dy + -0.0495115 *y*dx + -0.0983914 *x*dy + -0.00168401 *x*y + -0.00109267 *lens_ipow(y, 2)*dx*dy + -0.00267158 *lens_ipow(x, 2)*dx*dy + -5.00325e-05 *lens_ipow(x, 3)*dy + 2.72453e-07 *x*lens_ipow(y, 3)*lambda + -1.45494e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)+0.0f;
const double dx24 =  + -0.00034037 *x + 0.288011 *lens_ipow(dx, 3) + 2.72453e-07 *x*lens_ipow(y, 3)*dy + -1.85933 *lens_ipow(dx, 5)*lambda+0.0f;
const double dx30 =  + 0.111134 *dx*dy + 0.00175927 *x*dy + 1.28365e-05 *x*y + 0.0408203 *dx*lens_ipow(dy, 3) + -0.137731 *lens_ipow(dx, 3)*dy + 1.90858e-08 *x*lens_ipow(y, 3) + 7.09861e-05 *lens_ipow(x, 2)*dx*dy + 0.00400004 *x*lens_ipow(dy, 3)*lambda + -2.00883e-08 *x*lens_ipow(y, 3)*lambda + 0.000136791 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx31 =  + -0.0362357  + -0.000429944 *lambda + -0.00129488 *y*dy + 6.41826e-06 *lens_ipow(x, 2) + 0.0102869 *lens_ipow(dy, 4) + 0.0267431 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00238741 *y*lens_ipow(dx, 2)*dy + 2.86287e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.62589e-06 *lens_ipow(y, 3)*dy*lambda + -3.01325e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 9.92736e-11 *lens_ipow(y, 6)*lambda + 6.83956e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx32 =  + 6.91417 *dx*dy + 0.111134 *x*dy + -16.457 *lens_ipow(dx, 3)*dy + 0.0534861 *y*dx*lens_ipow(dy, 2) + 0.00238741 *lens_ipow(y, 2)*dx*dy + 0.0408203 *x*lens_ipow(dy, 3) + -0.413194 *x*lens_ipow(dx, 2)*dy + 2.3662e-05 *lens_ipow(x, 3)*dy+0.0f;
const double dx33 =  + -1.69535  + 2.65596 *lens_ipow(dy, 2) + 3.45709 *lens_ipow(dx, 2) + -0.000647438 *lens_ipow(y, 2) + 0.111134 *x*dx + 0.000879633 *lens_ipow(x, 2) + -4.11426 *lens_ipow(dx, 4) + 0.0411476 *y*lens_ipow(dy, 3) + 0.0534861 *y*lens_ipow(dx, 2)*dy + 0.0011937 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.122461 *x*dx*lens_ipow(dy, 2) + -0.137731 *x*lens_ipow(dx, 3) + 2.3662e-05 *lens_ipow(x, 3)*dx + 4.06471e-07 *lens_ipow(y, 4)*lambda + 0.00600006 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 0.000136791 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 3)+0.0f;
const double dx34 =  + -0.000429944 *y + 4.06471e-07 *lens_ipow(y, 4)*dy + 0.00200002 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -1.00442e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + 1.41819e-11 *lens_ipow(y, 7) + 0.000205187 *lens_ipow(x, 2)*y*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx40 =  + -0.121797 *dx*lens_ipow(dy, 2) + -0.169813 *lens_ipow(dx, 3) + -0.00420154 *y*dx*dy + -4.14131e-05 *lens_ipow(y, 2)*dx + -0.00231161 *x*lens_ipow(dy, 2) + -0.0096433 *x*lens_ipow(dx, 2) + -8.47624e-05 *x*y*dy + -8.798e-07 *x*lens_ipow(y, 2) + -0.000196621 *lens_ipow(x, 2)*dx + -1.41655e-06 *lens_ipow(x, 3)+0.0f;
const double dx41 =  + -0.00487529 *dy + -0.000102161 *y + -0.117041 *lens_ipow(dx, 2)*dy + -0.00215515 *y*lens_ipow(dx, 2) + -0.00420154 *x*dx*dy + -8.28262e-05 *x*y*dx + -4.23812e-05 *lens_ipow(x, 2)*dy + -8.798e-07 *lens_ipow(x, 2)*y + -0.052381 *lens_ipow(dy, 5)+0.0f;
const double dx42 =  + -7.59264 *dx*lens_ipow(dy, 2) + -10.0356 *lens_ipow(dx, 3) + -0.234082 *y*dx*dy + -0.00215515 *lens_ipow(y, 2)*dx + -0.121797 *x*lens_ipow(dy, 2) + -0.509439 *x*lens_ipow(dx, 2) + -0.00420154 *x*y*dy + -4.14131e-05 *x*lens_ipow(y, 2) + -0.0096433 *lens_ipow(x, 2)*dx + -6.55402e-05 *lens_ipow(x, 3)+0.0f;
const double dx43 =  + -0.263227 *dy + -0.00487529 *y + -7.59264 *lens_ipow(dx, 2)*dy + -0.117041 *y*lens_ipow(dx, 2) + -0.243595 *x*dx*dy + -0.00420154 *x*y*dx + -0.00231161 *lens_ipow(x, 2)*dy + -4.23812e-05 *lens_ipow(x, 2)*y + -13.7106 *lens_ipow(dy, 5) + -0.261905 *y*lens_ipow(dy, 4)+0.0f;
const double dx44 =  + 0.271573  + -0.371565 *lambda+0.0f;
} break;
