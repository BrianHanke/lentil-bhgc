case canon__unknown__1956__35mm:
{
const double dx00 =  + 0.619677  + 0.025215 *lambda + -0.55281 *lens_ipow(dx, 2) + -0.19735 *lens_ipow(dy, 2) + 0.00142299 *x*y*dx*dy + -1.82596e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0284011 *y*lens_ipow(dx, 2)*dy + -7.81578e-07 *lens_ipow(x, 4) + 9.42998e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -4.61902e-10 *lens_ipow(y, 6) + 0.00357032 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.315991 *lens_ipow(dy, 6) + -2.24556e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 4.96866e-07 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*dy+0.0f;
const double dx01 =  + -0.324925 *dx*dy + 0.00241044 *y*dx + 0.000711497 *lens_ipow(x, 2)*dx*dy + -1.21731e-06 *lens_ipow(x, 3)*y + -0.032713 *y*lens_ipow(dx, 3) + 0.0284011 *x*lens_ipow(dx, 2)*dy + -0.395063 *lens_ipow(dx, 3)*dy + 6.28665e-07 *lens_ipow(x, 3)*y*lambda + -2.77141e-09 *x*lens_ipow(y, 5) + -1.68417e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + 9.93732e-08 *lens_ipow(x, 5)*lens_ipow(dx, 2)*dy+0.0f;
const double dx02 =  + 24.2446  + 0.599884 *lens_ipow(lambda, 2) + -1.10562 *x*dx + -0.324925 *y*dy + -42.2235 *lens_ipow(dx, 2) + -13.7508 *lens_ipow(dy, 2) + 0.00120522 *lens_ipow(y, 2) + 0.000711497 *lens_ipow(x, 2)*y*dy + -0.0490695 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 15.0024 *lens_ipow(dx, 4) + 0.0568022 *x*y*dx*dy + -1.18519 *y*lens_ipow(dx, 2)*dy + 17.3072 *lens_ipow(dy, 6) + 0.00238021 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + -5.6139e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 1.98746e-07 *lens_ipow(x, 5)*y*dx*dy+0.0f;
const double dx03 =  + -0.324925 *y*dx + -0.394699 *x*dy + -27.5016 *dx*dy + 0.000711497 *lens_ipow(x, 2)*y*dx + 0.0284011 *x*y*lens_ipow(dx, 2) + -0.395063 *y*lens_ipow(dx, 3) + 103.843 *dx*lens_ipow(dy, 5) + 0.00238021 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 1.89595 *x*lens_ipow(dy, 5) + -5.6139e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 9.93732e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)+0.0f;
const double dx04 =  + 0.025215 *x + 1.19977 *dx*lambda + 3.14333e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)+0.0f;
const double dx10 =  + -0.315038 *dx*dy + 0.00238214 *x*dy + -7.73098e-07 *x*lens_ipow(y, 3) + -0.0517046 *x*lens_ipow(dy, 3)*lambda + -1.37239 *dx*lens_ipow(dy, 3)*lambda + -2.97503e-09 *lens_ipow(x, 5)*y + 0.0047891 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)*lambda + -3.38031 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + 8.9403e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2)+0.0f;
const double dx11 =  + 0.619971  + 0.0254621 *lambda + -0.204909 *lens_ipow(dx, 2) + -0.59286 *lens_ipow(dy, 2) + 7.81654e-05 *lens_ipow(y, 3)*dy + 0.00264956 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.332132 *lens_ipow(dy, 4) + -1.15965e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0374426 *y*lens_ipow(dx, 2)*dy*lambda + -4.95839e-10 *lens_ipow(x, 6) + 0.365576 *lens_ipow(dx, 6) + -2.13224e-06 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 8.9403e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)+0.0f;
const double dx12 =  + -0.409818 *y*dx + -0.315038 *x*dy + -27.072 *dx*dy + -0.0374426 *lens_ipow(y, 2)*dx*dy*lambda + -1.37239 *x*lens_ipow(dy, 3)*lambda + 2.19346 *y*lens_ipow(dx, 5) + 91.1102 *lens_ipow(dx, 5)*dy + 0.00159637 *lens_ipow(x, 3)*lens_ipow(dy, 3)*lambda + -16.9015 *x*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 2.9801e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dy, 2)+0.0f;
const double dx13 =  + 24.2408  + -44.2069 *lens_ipow(dy, 2) + -1.18572 *y*dy + 0.627484 *lens_ipow(lambda, 2) + -0.315038 *x*dx + -13.536 *lens_ipow(dx, 2) + 0.00119107 *lens_ipow(x, 2) + 1.95414e-05 *lens_ipow(y, 4) + 0.00176637 *lens_ipow(y, 3)*dy + -1.32853 *y*lens_ipow(dy, 3) + -0.0187213 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.0775569 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -4.11716 *x*dx*lens_ipow(dy, 2)*lambda + -8.52898e-07 *lens_ipow(y, 5)*dy + 15.185 *lens_ipow(dx, 6) + 0.0047891 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2)*lambda + -10.1409 *x*lens_ipow(dx, 5)*lens_ipow(dy, 2) + 5.9602e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx14 =  + 0.0254621 *y + 1.25497 *dy*lambda + -0.0187213 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.0258523 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -1.37239 *x*dx*lens_ipow(dy, 3) + 0.00159637 *lens_ipow(x, 3)*dx*lens_ipow(dy, 3)+0.0f;
const double dx20 =  + -0.0284813  + 0.0011012 *lambda + -6.55901e-05 *lens_ipow(x, 2) + -0.0311554 *lens_ipow(dx, 2) + -0.00268479 *lens_ipow(dy, 2) + -1.40754e-05 *lens_ipow(y, 2) + -0.00410582 *x*dx*lambda + 2.92785e-06 *x*lens_ipow(y, 2)*dx + 0.00339625 *x*dx*lens_ipow(lambda, 2) + -2.45125e-08 *lens_ipow(y, 4) + -0.000142123 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00027079 *x*y*dx*dy*lambda + 1.77088e-08 *lens_ipow(x, 5)*dx + -6.26758e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + -9.4046e-10 *x*lens_ipow(y, 5)*dx*dy + 7.15709e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx+0.0f;
const double dx21 =  + -0.0153461 *dx*dy + -2.81508e-05 *x*y + -0.000422958 *y*dx*lambda + 2.92785e-06 *lens_ipow(x, 2)*y*dx + -9.80501e-08 *x*lens_ipow(y, 3) + 0.000135395 *lens_ipow(x, 2)*dx*dy*lambda + -2.50703e-10 *lens_ipow(x, 5)*y + 0.0129099 *y*lens_ipow(dx, 5)*lambda + 3.19573e-08 *lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + -2.35115e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy + 7.15709e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx+0.0f;
const double dx22 =  + 0.503303  + -0.0623108 *x*dx + -0.0153461 *y*dy + -0.449455 *lens_ipow(dx, 2) + -0.00205291 *lens_ipow(x, 2)*lambda + -0.000211479 *lens_ipow(y, 2)*lambda + 1.46392e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.55987 *lens_ipow(dx, 4) + 0.00169812 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.000135395 *lens_ipow(x, 2)*y*dy*lambda + 2.95146e-09 *lens_ipow(x, 6) + 0.0322747 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lambda + 51.5772 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + 5.32622e-09 *lens_ipow(y, 6)*lens_ipow(dy, 2) + -4.7023e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy + 1.78927e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx23 =  + -0.0153461 *y*dx + -0.00536957 *x*dy + -9.47487e-05 *lens_ipow(x, 3)*dy + 0.000135395 *lens_ipow(x, 2)*y*dx*lambda + 68.7696 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 1.06524e-08 *lens_ipow(y, 6)*dx*dy + -4.7023e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx+0.0f;
const double dx24 =  + 0.0011012 *x + -0.00205291 *lens_ipow(x, 2)*dx + -0.000211479 *lens_ipow(y, 2)*dx + 0.00339625 *lens_ipow(x, 2)*dx*lambda + 0.000135395 *lens_ipow(x, 2)*y*dx*dy + 0.00645495 *lens_ipow(y, 2)*lens_ipow(dx, 5) + 34.3848 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx30 =  + -0.0106847 *dx*dy + -3.10772e-05 *x*y + -0.000330979 *x*dy*lambda + 3.94073e-06 *x*lens_ipow(y, 2)*dy + -8.11486e-08 *lens_ipow(x, 3)*y + 0.000120282 *lens_ipow(y, 2)*dx*dy*lambda + 0.0101657 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -4.75033e-13 *x*lens_ipow(y, 7) + 8.46028e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 4.25758e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 3.37235e-08 *lens_ipow(x, 5)*lens_ipow(dx, 2)*dy + 0.0351583 *x*lens_ipow(dy, 7)*lambda+0.0f;
const double dx31 =  + -0.02864  + 0.00134896 *lambda + -0.00169209 *lens_ipow(dx, 2) + -0.0262397 *lens_ipow(dy, 2) + -6.53639e-05 *lens_ipow(y, 2) + -1.55386e-05 *lens_ipow(x, 2) + -0.00358936 *y*dy*lambda + 3.94073e-06 *lens_ipow(x, 2)*y*dy + -0.000141931 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00296587 *y*dy*lens_ipow(lambda, 2) + -2.02871e-08 *lens_ipow(x, 4) + 0.000240564 *x*y*dx*dy*lambda + 1.8034e-08 *lens_ipow(y, 5)*dy + -1.66262e-12 *lens_ipow(x, 2)*lens_ipow(y, 6) + 8.46028e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 2.55455e-11 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx+0.0f;
const double dx32 =  + -0.00338418 *y*dx + -0.0106847 *x*dy + 0.522915 *dx*dy*lambda + -9.46207e-05 *lens_ipow(y, 3)*dx + 0.000120282 *x*lens_ipow(y, 2)*dy*lambda + 0.0101657 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3) + 8.51515e-12 *lens_ipow(x, 5)*lens_ipow(y, 3) + 1.12412e-08 *lens_ipow(x, 6)*dx*dy+0.0f;
const double dx33 =  + 0.496328  + -0.0524795 *y*dy + -0.0106847 *x*dx + 0.261458 *lens_ipow(dx, 2)*lambda + -0.00179468 *lens_ipow(y, 2)*lambda + -0.00016549 *lens_ipow(x, 2)*lambda + 1.97036e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00148293 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.000120282 *x*lens_ipow(y, 2)*dx*lambda + 2.98698 *lens_ipow(dy, 6) + 0.0152485 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 3.00567e-09 *lens_ipow(y, 6) + 2.11507e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + 5.62058e-09 *lens_ipow(x, 6)*lens_ipow(dx, 2) + 0.123054 *lens_ipow(x, 2)*lens_ipow(dy, 6)*lambda+0.0f;
const double dx34 =  + 0.00134896 *y + 0.261458 *lens_ipow(dx, 2)*dy + -0.00179468 *lens_ipow(y, 2)*dy + -0.00016549 *lens_ipow(x, 2)*dy + 0.00296587 *lens_ipow(y, 2)*dy*lambda + 0.000120282 *x*lens_ipow(y, 2)*dx*dy + 0.0175792 *lens_ipow(x, 2)*lens_ipow(dy, 7)+0.0f;
const double dx40 =  + 0.000923847 *dx + -7.2152e-05 *x*y*dy + -0.173862 *lens_ipow(dx, 3) + -0.00547815 *y*dx*dy + -9.60546e-05 *lens_ipow(x, 2)*dx + -0.00831136 *x*lens_ipow(dx, 2) + -0.182353 *dx*lens_ipow(dy, 2) + -3.41159e-05 *lens_ipow(y, 2)*dx + -0.00339389 *x*lens_ipow(dy, 2) + -4.21116e-12 *lens_ipow(x, 3)*lens_ipow(y, 4)+0.0f;
const double dx41 =  + -0.182703 *lens_ipow(dx, 2)*dy + -3.6076e-05 *lens_ipow(x, 2)*dy + -0.00333039 *y*lens_ipow(dx, 2) + -0.00547815 *x*dx*dy + -6.82318e-05 *x*y*dx + -0.000189591 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.0115387 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.31331 *y*lens_ipow(dy, 4) + -1.13063e-06 *lens_ipow(y, 4)*dy + -3.23886 *lens_ipow(dy, 5) + -4.21116e-12 *lens_ipow(x, 4)*lens_ipow(y, 3)+0.0f;
const double dx42 =  + 0.0962835 *dx + 0.000923847 *x + -0.365406 *y*dx*dy + -10.5117 *dx*lens_ipow(dy, 2) + -0.00333039 *lens_ipow(y, 2)*dx + -0.521587 *x*lens_ipow(dx, 2) + -0.00547815 *x*y*dy + -3.20182e-05 *lens_ipow(x, 3) + -0.00831136 *lens_ipow(x, 2)*dx + -0.182353 *x*lens_ipow(dy, 2) + -10.1019 *lens_ipow(dx, 3) + -3.41159e-05 *x*lens_ipow(y, 2)+0.0f;
const double dx43 =  + -0.182703 *y*lens_ipow(dx, 2) + -10.5117 *lens_ipow(dx, 2)*dy + -3.6076e-05 *lens_ipow(x, 2)*y + -0.00547815 *x*y*dx + -0.364707 *x*dx*dy + -0.00339389 *lens_ipow(x, 2)*dy + -9.47956e-05 *lens_ipow(y, 4)*dy + -0.0115387 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.626619 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -2.26126e-07 *lens_ipow(y, 5) + -16.1943 *y*lens_ipow(dy, 4) + -165.247 *lens_ipow(dy, 5)+0.0f;
const double dx44 =  + 0.156096  + -0.213854 *lambda+0.0f;
} break;
