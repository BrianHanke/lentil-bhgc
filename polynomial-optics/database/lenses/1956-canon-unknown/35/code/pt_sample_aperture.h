case canon__unknown__1956__35mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 24.2446 *begin_dx + 0.619677 *begin_x + 0.025215 *begin_x*begin_lambda + 0.599884 *begin_dx*lens_ipow(begin_lambda, 2) + -0.55281 *begin_x*lens_ipow(begin_dx, 2) + -0.324925 *begin_y*begin_dx*begin_dy + -0.19735 *begin_x*lens_ipow(begin_dy, 2) + -14.0745 *lens_ipow(begin_dx, 3) + -13.7508 *begin_dx*lens_ipow(begin_dy, 2) + 0.00120522 *lens_ipow(begin_y, 2)*begin_dx + 0.000711497 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + -6.08655e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -0.0163565 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + 3.00049 *lens_ipow(begin_dx, 5) + 0.0284011 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -1.56316e-07 *lens_ipow(begin_x, 5) + -0.395063 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + 3.14333e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_lambda + -4.61902e-10 *begin_x*lens_ipow(begin_y, 6) + 17.3072 *begin_dx*lens_ipow(begin_dy, 6) + 0.00119011 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.315991 *begin_x*lens_ipow(begin_dy, 6) + -5.6139e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + 9.93732e-08 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 2)*begin_dy;
  pred_y =  + 0.619971 *begin_y + 24.2408 *begin_dy + 0.0254621 *begin_y*begin_lambda + -0.204909 *begin_y*lens_ipow(begin_dx, 2) + -14.7356 *lens_ipow(begin_dy, 3) + -0.59286 *begin_y*lens_ipow(begin_dy, 2) + 0.627484 *begin_dy*lens_ipow(begin_lambda, 2) + -0.315038 *begin_x*begin_dx*begin_dy + -13.536 *lens_ipow(begin_dx, 2)*begin_dy + 0.00119107 *lens_ipow(begin_x, 2)*begin_dy + 1.95414e-05 *lens_ipow(begin_y, 4)*begin_dy + 0.000883187 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -0.332132 *begin_y*lens_ipow(begin_dy, 4) + -3.86549e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -0.0187213 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + -0.0258523 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3)*begin_lambda + -1.37239 *begin_x*begin_dx*lens_ipow(begin_dy, 3)*begin_lambda + -4.95839e-10 *lens_ipow(begin_x, 6)*begin_y + 0.365576 *begin_y*lens_ipow(begin_dx, 6) + -4.26449e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + 15.185 *lens_ipow(begin_dx, 6)*begin_dy + 0.00159637 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 3)*begin_lambda + -3.38031 *begin_x*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 3) + 2.9801e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2);
  pred_dx =  + 0.503303 *begin_dx + -0.0284813 *begin_x + 0.0011012 *begin_x*begin_lambda + -2.18634e-05 *lens_ipow(begin_x, 3) + -0.0311554 *begin_x*lens_ipow(begin_dx, 2) + -0.0153461 *begin_y*begin_dx*begin_dy + -0.00268479 *begin_x*lens_ipow(begin_dy, 2) + -0.149818 *lens_ipow(begin_dx, 3) + -1.40754e-05 *begin_x*lens_ipow(begin_y, 2) + -0.00205291 *lens_ipow(begin_x, 2)*begin_dx*begin_lambda + -0.000211479 *lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 1.46392e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + 0.311974 *lens_ipow(begin_dx, 5) + 0.00169812 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 2) + -2.45125e-08 *begin_x*lens_ipow(begin_y, 4) + -4.73743e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + 0.000135395 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy*begin_lambda + 2.95146e-09 *lens_ipow(begin_x, 6)*begin_dx + -1.25352e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + 0.00645495 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5)*begin_lambda + 17.1924 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + 5.32622e-09 *lens_ipow(begin_y, 6)*begin_dx*lens_ipow(begin_dy, 2) + -4.7023e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*begin_dx*begin_dy + 1.78927e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dx;
  pred_dy =  + -0.02864 *begin_y + 0.496328 *begin_dy + 0.00134896 *begin_y*begin_lambda + -0.00169209 *begin_y*lens_ipow(begin_dx, 2) + -0.0262397 *begin_y*lens_ipow(begin_dy, 2) + -2.1788e-05 *lens_ipow(begin_y, 3) + -0.0106847 *begin_x*begin_dx*begin_dy + -1.55386e-05 *lens_ipow(begin_x, 2)*begin_y + 0.261458 *lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + -0.00179468 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + -0.00016549 *lens_ipow(begin_x, 2)*begin_dy*begin_lambda + 1.97036e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy + -4.73104e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 0.00148293 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 2) + -2.02871e-08 *lens_ipow(begin_x, 4)*begin_y + 0.000120282 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy*begin_lambda + 0.426711 *lens_ipow(begin_dy, 7) + 0.00508284 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 3.00567e-09 *lens_ipow(begin_y, 6)*begin_dy + -2.37517e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7) + 2.11507e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dy + 8.51515e-12 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*begin_dx + 5.62058e-09 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 2)*begin_dy + 0.0175792 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 7)*begin_lambda;
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 24.2446  + 0.599884 *lens_ipow(begin_lambda, 2) + -1.10562 *begin_x*begin_dx + -0.324925 *begin_y*begin_dy + -42.2235 *lens_ipow(begin_dx, 2) + -13.7508 *lens_ipow(begin_dy, 2) + 0.00120522 *lens_ipow(begin_y, 2) + 0.000711497 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -0.0490695 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 15.0024 *lens_ipow(begin_dx, 4) + 0.0568022 *begin_x*begin_y*begin_dx*begin_dy + -1.18519 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 17.3072 *lens_ipow(begin_dy, 6) + 0.00238021 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 2) + -5.6139e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dy + 1.98746e-07 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_dy+0.0f;
  dx1_domega0(0, 1) =  + -0.324925 *begin_y*begin_dx + -0.394699 *begin_x*begin_dy + -27.5016 *begin_dx*begin_dy + 0.000711497 *lens_ipow(begin_x, 2)*begin_y*begin_dx + 0.0284011 *begin_x*begin_y*lens_ipow(begin_dx, 2) + -0.395063 *begin_y*lens_ipow(begin_dx, 3) + 103.843 *begin_dx*lens_ipow(begin_dy, 5) + 0.00238021 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*begin_dy + 1.89595 *begin_x*lens_ipow(begin_dy, 5) + -5.6139e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx + 9.93732e-08 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 2)+0.0f;
  dx1_domega0(1, 0) =  + -0.409818 *begin_y*begin_dx + -0.315038 *begin_x*begin_dy + -27.072 *begin_dx*begin_dy + -0.0374426 *lens_ipow(begin_y, 2)*begin_dx*begin_dy*begin_lambda + -1.37239 *begin_x*lens_ipow(begin_dy, 3)*begin_lambda + 2.19346 *begin_y*lens_ipow(begin_dx, 5) + 91.1102 *lens_ipow(begin_dx, 5)*begin_dy + 0.00159637 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 3)*begin_lambda + -16.9015 *begin_x*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3) + 2.9801e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2)+0.0f;
  dx1_domega0(1, 1) =  + 24.2408  + -44.2069 *lens_ipow(begin_dy, 2) + -1.18572 *begin_y*begin_dy + 0.627484 *lens_ipow(begin_lambda, 2) + -0.315038 *begin_x*begin_dx + -13.536 *lens_ipow(begin_dx, 2) + 0.00119107 *lens_ipow(begin_x, 2) + 1.95414e-05 *lens_ipow(begin_y, 4) + 0.00176637 *lens_ipow(begin_y, 3)*begin_dy + -1.32853 *begin_y*lens_ipow(begin_dy, 3) + -0.0187213 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_lambda + -0.0775569 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -4.11716 *begin_x*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -8.52898e-07 *lens_ipow(begin_y, 5)*begin_dy + 15.185 *lens_ipow(begin_dx, 6) + 0.0047891 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -10.1409 *begin_x*lens_ipow(begin_dx, 5)*lens_ipow(begin_dy, 2) + 5.9602e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*begin_dy+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
