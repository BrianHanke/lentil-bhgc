case nikon__unknown__2014__65mm:
{
const double dx00 =  + -0.197289  + 0.365403 *lambda + -0.283928 *lens_ipow(lambda, 2) + 0.00665785 *y*dy + -0.000221436 *lens_ipow(y, 2) + -0.00077902 *lens_ipow(x, 2) + 0.554975 *lens_ipow(dx, 2)*lambda + 8.37962e-05 *lens_ipow(y, 2)*lambda + 0.053821 *x*dx*lambda + 0.000452608 *lens_ipow(x, 2)*lambda + 6.51627 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.16156e-07 *lens_ipow(y, 4) + -0.0289466 *x*dx*lens_ipow(lambda, 2) + -7.94248e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -5.66644e-07 *lens_ipow(x, 4) + -16.1365 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 11.0472 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -7.9484e-09 *x*lens_ipow(y, 5)*dx*dy + 2.4739e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 4)+0.0f;
const double dx01 =  + 0.00665785 *x*dy + -0.000442872 *x*y + 0.0257017 *y*dx*lambda + 0.000167592 *x*y*lambda + -0.0218806 *y*dx*lens_ipow(lambda, 2) + -4.64625e-07 *x*lens_ipow(y, 3) + -5.29499e-07 *lens_ipow(x, 3)*y + -1.9871e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy + 1.64927e-05 *lens_ipow(x, 3)*y*lens_ipow(dy, 4)+0.0f;
const double dx02 =  + 65.5137  + -27.5694 *lens_ipow(dy, 2) + -94.252 *lens_ipow(dx, 2) + 0.0128508 *lens_ipow(y, 2)*lambda + 1.10995 *x*dx*lambda + 0.0269105 *lens_ipow(x, 2)*lambda + -0.0109403 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.0144733 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 1053.9 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 696.329 *lens_ipow(dx, 4)*lens_ipow(lambda, 2) + -3.9742e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy + -5475.72 *lens_ipow(dx, 6)*lens_ipow(lambda, 4) + 39879.7 *lens_ipow(dx, 8)*lens_ipow(dy, 2)+0.0f;
const double dx03 =  + -55.1388 *dx*dy + 0.00665785 *x*y + 13.0325 *x*dy*lens_ipow(lambda, 2) + -32.273 *x*dy*lens_ipow(lambda, 3) + 1405.2 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 22.0944 *x*dy*lens_ipow(lambda, 4) + -3.9742e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx + 3.29854e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dy, 3) + 8862.15 *lens_ipow(dx, 9)*dy+0.0f;
const double dx04 =  + 0.365403 *x + -0.567855 *x*lambda + 0.0128508 *lens_ipow(y, 2)*dx + 0.554975 *x*lens_ipow(dx, 2) + 8.37962e-05 *x*lens_ipow(y, 2) + 0.0269105 *lens_ipow(x, 2)*dx + 0.000150869 *lens_ipow(x, 3) + -0.0218806 *lens_ipow(y, 2)*dx*lambda + 13.0325 *x*lens_ipow(dy, 2)*lambda + -0.0289466 *lens_ipow(x, 2)*dx*lambda + -48.4095 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 278.532 *lens_ipow(dx, 5)*lambda + 44.1888 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -3128.99 *lens_ipow(dx, 7)*lens_ipow(lambda, 3)+0.0f;
const double dx10 =  + 0.00653697 *y*dx + -0.000534436 *x*y + 0.0278086 *x*dy*lambda + 0.000155988 *x*y*lambda + -0.0257336 *x*dy*lens_ipow(lambda, 2) + -3.27288e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 1.71039e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 4) + -1.16752e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const double dx11 =  + -0.197385  + 0.366722 *lambda + -0.272661 *lens_ipow(lambda, 2) + -0.000852107 *lens_ipow(y, 2) + 0.00653697 *x*dx + -0.000267218 *lens_ipow(x, 2) + 0.740744 *lens_ipow(dy, 2)*lambda + 0.0677827 *y*dy*lambda + 0.000331386 *lens_ipow(y, 2)*lambda + 7.79939e-05 *lens_ipow(x, 2)*lambda + 6.5456 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.0523178 *y*dy*lens_ipow(lambda, 2) + -0.565712 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -16.3497 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.0287736 *y*lens_ipow(dx, 2)*dy*lambda + 11.2612 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -2.18192e-06 *lens_ipow(x, 3)*y*dx*dy + 2.56559e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4) + -1.4594e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx12 =  + -52.512 *dx*dy + 0.00653697 *x*y + 13.0912 *y*dx*lens_ipow(lambda, 2) + -32.6994 *y*dx*lens_ipow(lambda, 3) + -0.0287736 *lens_ipow(y, 2)*dx*dy*lambda + 22.5224 *y*dx*lens_ipow(lambda, 4) + -1.09096e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 13515 *lens_ipow(dx, 3)*lens_ipow(dy, 5) + 3.42078e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 3)+0.0f;
const double dx13 =  + 64.8957  + 1.03238 *lambda + -89.5946 *lens_ipow(dy, 2) + -26.256 *lens_ipow(dx, 2) + 1.48149 *y*dy*lambda + 0.0338913 *lens_ipow(y, 2)*lambda + 0.0139043 *lens_ipow(x, 2)*lambda + -0.0261589 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.0128668 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 247.886 *lens_ipow(dy, 4)*lambda + -1.13142 *y*dy*lens_ipow(lambda, 3) + -0.0143868 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -1.09096e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 16893.8 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + -410.462 *lens_ipow(dy, 4)*lens_ipow(lambda, 5)+0.0f;
const double dx14 =  + 1.03238 *dy + 0.366722 *y + -0.545322 *y*lambda + 0.740744 *y*lens_ipow(dy, 2) + 0.0338913 *lens_ipow(y, 2)*dy + 0.000110462 *lens_ipow(y, 3) + 0.0139043 *lens_ipow(x, 2)*dy + 7.79939e-05 *lens_ipow(x, 2)*y + 13.0912 *y*lens_ipow(dx, 2)*lambda + -0.0523178 *lens_ipow(y, 2)*dy*lambda + -0.0257336 *lens_ipow(x, 2)*dy*lambda + 49.5772 *lens_ipow(dy, 5) + -1.69714 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -49.0491 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.0143868 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 45.0449 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -410.462 *lens_ipow(dy, 5)*lens_ipow(lambda, 4)+0.0f;
const double dx20 =  + -0.013607  + -0.00258285 *lambda + 0.0019656 *lens_ipow(lambda, 2) + -0.00225875 *lens_ipow(dy, 2) + 0.00121209 *lens_ipow(dx, 2) + -6.5419e-05 *y*dy + 3.00764e-06 *lens_ipow(y, 2) + -7.8836e-05 *x*dx + 9.66201e-06 *lens_ipow(x, 2) + -9.66526e-07 *lens_ipow(y, 2)*lambda + -2.99211e-06 *lens_ipow(x, 2)*lambda + 0.00448816 *lens_ipow(dx, 4) + -0.000271737 *y*lens_ipow(dx, 2)*dy + 1.12657e-09 *lens_ipow(y, 4) + 0.000136935 *x*lens_ipow(dx, 3) + 7.4047e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.75514e-07 *lens_ipow(x, 3)*dx + 1.40701e-11 *lens_ipow(x, 6) + 1.3927e-05 *lens_ipow(x, 3)*dx*lens_ipow(dy, 4) + 3.33889e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx21 =  + 0.0013903 *dx*dy + -6.5419e-05 *x*dy + 6.01529e-06 *x*y + 8.14736e-05 *y*dx*lambda + -1.93305e-06 *x*y*lambda + 0.000424988 *y*lens_ipow(dx, 3) + -0.000271737 *x*lens_ipow(dx, 2)*dy + 4.50627e-09 *x*lens_ipow(y, 3) + 4.93647e-09 *lens_ipow(x, 3)*y + -0.00106355 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 4) + 2.50416e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy+0.0f;
const double dx22 =  + -0.656494  + 0.00363416 *lambda + 0.23305 *lens_ipow(dy, 2) + 1.04856 *lens_ipow(dx, 2) + 0.0013903 *y*dy + 0.00242418 *x*dx + -3.9418e-05 *lens_ipow(x, 2) + 4.07368e-05 *lens_ipow(y, 2)*lambda + 0.000637482 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.0179526 *x*lens_ipow(dx, 3) + -0.000543475 *x*y*dx*dy + 0.000205403 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -4.38786e-08 *lens_ipow(x, 4) + -0.00159533 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 4) + 3.48175e-06 *lens_ipow(x, 4)*lens_ipow(dy, 4) + 8.34721e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy+0.0f;
const double dx23 =  + 0.466101 *dx*dy + 0.0013903 *y*dx + -0.0045175 *x*dy + -6.5419e-05 *x*y + -0.000271737 *x*y*lens_ipow(dx, 2) + 1.3927e-05 *lens_ipow(x, 4)*dx*lens_ipow(dy, 3) + 8.34721e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx+0.0f;
const double dx24 =  + 0.00363416 *dx + -0.00258285 *x + 0.0039312 *x*lambda + 4.07368e-05 *lens_ipow(y, 2)*dx + -9.66526e-07 *x*lens_ipow(y, 2) + -9.97369e-07 *lens_ipow(x, 3) + -0.00212711 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx30 =  + 0.00682038 *dx*dy + -7.0817e-05 *y*dx + 4.78616e-06 *x*y + 3.63796e-05 *x*dy*lambda + -0.000189681 *y*dx*lens_ipow(dy, 2) + 0.000271137 *x*lens_ipow(dx, 2)*dy + 1.25146e-08 *x*lens_ipow(y, 3) + 6.13933e-09 *lens_ipow(x, 3)*y + 0.00166773 *x*lens_ipow(dy, 3)*lambda + -1.24725e-08 *x*lens_ipow(y, 3)*lambda + -0.00185539 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 2.58744e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy+0.0f;
const double dx31 =  + -0.0134847  + -0.00284866 *lambda + 0.00204905 *lens_ipow(lambda, 2) + 0.00164244 *lens_ipow(dy, 2) + -9.56595e-05 *y*dy + 7.25361e-06 *lens_ipow(y, 2) + -7.0817e-05 *x*dx + 2.39308e-06 *lens_ipow(x, 2) + -0.00953099 *lens_ipow(dx, 2)*lambda + 0.000310351 *y*lens_ipow(dx, 2)*dy + 7.42016e-09 *lens_ipow(y, 4) + -0.000189681 *x*dx*lens_ipow(dy, 2) + 1.87718e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.53483e-09 *lens_ipow(x, 4) + 0.0245243 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -1.87088e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -0.0248135 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + -4.54591e-08 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda + 3.44992e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx32 =  + 0.912705 *dx*dy + 0.00682038 *x*dy + -7.0817e-05 *x*y + -0.019062 *y*dx*lambda + 0.000310351 *lens_ipow(y, 2)*dx*dy + -0.000189681 *x*y*lens_ipow(dy, 2) + 0.000271137 *lens_ipow(x, 2)*dx*dy + 0.0490485 *y*dx*lens_ipow(lambda, 3) + -0.0496269 *y*dx*lens_ipow(lambda, 5) + -1.81837e-08 *lens_ipow(y, 5)*dx*lambda + 8.62479e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy+0.0f;
const double dx33 =  + -0.655693  + 0.00455994 *lambda + 1.02618 *lens_ipow(dy, 2) + 0.456353 *lens_ipow(dx, 2) + 0.00328487 *y*dy + -4.78297e-05 *lens_ipow(y, 2) + 0.00682038 *x*dx + 1.81898e-05 *lens_ipow(x, 2)*lambda + 0.000155176 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.000379362 *x*y*dx*dy + 0.000135569 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.0025016 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -0.00278308 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 8.62479e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx+0.0f;
const double dx34 =  + 0.00455994 *dy + -0.00284866 *y + 0.00409809 *y*lambda + -0.00953099 *y*lens_ipow(dx, 2) + 1.81898e-05 *lens_ipow(x, 2)*dy + 0.0735728 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.000833866 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -6.23626e-09 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.00185539 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda + -0.124067 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -9.09183e-09 *lens_ipow(y, 5)*lens_ipow(dx, 2)+0.0f;
const double dx40 =  + -0.00408317 *dx*lens_ipow(dy, 2) + -0.000132568 *y*dx*dy + -7.75621e-05 *x*lens_ipow(dy, 2) + -0.000213152 *x*lens_ipow(dx, 2) + -1.92719e-08 *x*lens_ipow(y, 2) + -2.43737e-08 *lens_ipow(x, 3) + -0.0088917 *lens_ipow(dx, 3)*lambda + -2.61528e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.040532 *lens_ipow(dx, 5)*lens_ipow(lambda, 4) + -9.98376e-12 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*dy + -9.96985e-12 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + -3.49065e-06 *y + -0.00386883 *lens_ipow(dx, 2)*dy + -0.000132568 *x*dx*dy + -1.92719e-08 *lens_ipow(x, 2)*y + -0.00732367 *lens_ipow(dy, 3)*lambda + -0.000295803 *y*lens_ipow(dy, 2)*lambda + -5.41993e-07 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -5.69835e-07 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -4.91703e-06 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 3) + -1.30764e-09 *lens_ipow(x, 4)*y*lens_ipow(dx, 2) + -1.66396e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy + -9.96985e-12 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dy, 2)+0.0f;
const double dx42 =  + -0.886686 *dx*lens_ipow(dy, 2) + -0.00773765 *y*dx*dy + -0.00408317 *x*lens_ipow(dy, 2) + -0.000132568 *x*y*dy + -0.000213152 *lens_ipow(x, 2)*dx + -2.82253 *lens_ipow(dx, 3)*lambda + -0.0266751 *x*lens_ipow(dx, 2)*lambda + 1.92299 *lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -2.84917e-07 *lens_ipow(y, 4)*dx + -1.30764e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx + 0.20266 *x*lens_ipow(dx, 4)*lens_ipow(lambda, 4) + -3.32792e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)*dy + -103.367 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx43 =  + -0.886686 *lens_ipow(dx, 2)*dy + -0.00386883 *y*lens_ipow(dx, 2) + -0.00816633 *x*dx*dy + -0.000132568 *x*y*dx + -7.75621e-05 *lens_ipow(x, 2)*dy + -2.75145 *lens_ipow(dy, 3)*lambda + -0.021971 *y*lens_ipow(dy, 2)*lambda + -0.000295803 *lens_ipow(y, 2)*dy*lambda + 1.84457 *lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -2.70997e-07 *lens_ipow(y, 4)*dy + -1.63901e-06 *lens_ipow(y, 3)*lens_ipow(lambda, 3) + -3.32792e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx + -4.98493e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)*dy + -103.367 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx44 =  + 1.14869  + -2.90607 *lambda + 4.16411 *lens_ipow(lambda, 3) + -0.687862 *lens_ipow(dy, 4) + -0.705634 *lens_ipow(dx, 4) + -0.00732367 *y*lens_ipow(dy, 3) + -0.000147902 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0088917 *x*lens_ipow(dx, 3) + -2.97167 *lens_ipow(lambda, 5) + 0.922284 *lens_ipow(dy, 4)*lambda + 0.961493 *lens_ipow(dx, 4)*lambda + -4.91703e-06 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + 0.162128 *x*lens_ipow(dx, 5)*lens_ipow(lambda, 3) + -77.5255 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
} break;
