case nikon__unknown__2014__40mm:
{
const double dx00 =  + -0.224477  + 0.440636 *lambda + -0.318652 *lens_ipow(lambda, 2) + 0.273237 *lens_ipow(dy, 2) + 0.315266 *lens_ipow(dx, 2) + 0.0111227 *y*dy + -0.000528349 *lens_ipow(y, 2) + 0.0345131 *x*dx + -0.00170978 *lens_ipow(x, 2) + 0.00136646 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -7.98498e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 7.49907e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.00376756 *lens_ipow(y, 2)*lens_ipow(dy, 4) + -4.01218e-09 *lens_ipow(y, 6) + -2.57655e-08 *lens_ipow(x, 6) + 2.07346e-08 *lens_ipow(x, 6)*lambda + -2.91813e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + -8.79164e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + 1.0073e-11 *lens_ipow(y, 8)*lambda + -1.22879e-09 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(dx, 2)+0.0f;
const double dx01 =  + 0.0116063 *y*dx + 0.0111227 *x*dy + -0.0010567 *x*y + -5.32332e-06 *lens_ipow(x, 3)*y + 4.99938e-06 *lens_ipow(x, 3)*y*lambda + 1.71438e-07 *lens_ipow(y, 5)*dx + 0.00753513 *x*y*lens_ipow(dy, 4) + -2.40731e-08 *x*lens_ipow(y, 5) + -2.1886e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + -7.03331e-11 *lens_ipow(x, 5)*lens_ipow(y, 3) + 8.05838e-11 *x*lens_ipow(y, 7)*lambda + -3.51082e-10 *lens_ipow(x, 7)*y*lens_ipow(dx, 2)+0.0f;
const double dx02 =  + 39.8922  + 0.713132 *lambda + -16.3693 *lens_ipow(dy, 2) + -55.2443 *lens_ipow(dx, 2) + 0.00580314 *lens_ipow(y, 2) + 0.630532 *x*dx + 0.0172566 *lens_ipow(x, 2) + 70.1657 *lens_ipow(dx, 4) + 2.8573e-08 *lens_ipow(y, 6) + 10755.1 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + -7.29534e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + -3.51082e-10 *lens_ipow(x, 7)*lens_ipow(y, 2)*dx+0.0f;
const double dx03 =  + -32.7385 *dx*dy + 0.546473 *x*dy + 0.0111227 *x*y + 0.000910972 *lens_ipow(x, 3)*dy + 0.0150703 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + 8604.07 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + -7.29534e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx+0.0f;
const double dx04 =  + 0.713132 *dx + 0.440636 *x + -0.637304 *x*lambda + 2.49969e-06 *lens_ipow(x, 3)*lens_ipow(y, 2) + 2.96208e-09 *lens_ipow(x, 7) + 1.0073e-11 *x*lens_ipow(y, 8)+0.0f;
const double dx10 =  + 0.0111455 *y*dx + -0.0015221 *x*y + 0.0387208 *x*dy*lambda + 0.000653416 *x*y*lambda + -0.0369711 *x*dy*lens_ipow(lambda, 2) + 3.66594e-05 *lens_ipow(x, 3)*dy + 0.00736907 *x*y*lens_ipow(dx, 4) + -9.74813e-09 *x*lens_ipow(y, 5) + -2.40561e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -2.18282e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + -9.87277e-09 *lens_ipow(x, 5)*y + -6.39772e-08 *x*lens_ipow(y, 5)*lens_ipow(dy, 2)+0.0f;
const double dx11 =  + -0.208809  + 0.415465 *lambda + -0.321879 *lens_ipow(lambda, 2) + 0.314293 *lens_ipow(dy, 2) + 0.273129 *lens_ipow(dx, 2) + 0.034279 *y*dy + -0.00226461 *lens_ipow(y, 2) + 0.0111455 *x*dx + -0.00076105 *lens_ipow(x, 2) + 0.000950836 *lens_ipow(y, 2)*lambda + 0.000326708 *lens_ipow(x, 2)*lambda + 0.001347 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.35583e-08 *lens_ipow(y, 6) + 0.00368453 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -2.43703e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.60374e-05 *lens_ipow(x, 3)*y*dx*dy + -1.63712e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -1.64546e-09 *lens_ipow(x, 6) + -1.59943e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2)+0.0f;
const double dx12 =  + -32.9753 *dx*dy + 0.546259 *y*dx + 0.0111455 *x*y + 0.000897999 *lens_ipow(y, 3)*dx + 0.0147381 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + -8.0187e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 9174.12 *lens_ipow(dx, 3)*lens_ipow(dy, 5)+0.0f;
const double dx13 =  + 39.8663  + 0.763325 *lambda + -52.1362 *lens_ipow(dy, 2) + -16.4877 *lens_ipow(dx, 2) + 0.628586 *y*dy + 0.0171395 *lens_ipow(y, 2) + 0.0193604 *lens_ipow(x, 2)*lambda + -0.0184855 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 9.16485e-06 *lens_ipow(x, 4) + 340.603 *lens_ipow(dy, 6) + -8.0187e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 11467.6 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + -6.39772e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy+0.0f;
const double dx14 =  + 0.763325 *dy + 0.415465 *y + -0.643759 *y*lambda + 0.000316945 *lens_ipow(y, 3) + 0.0193604 *lens_ipow(x, 2)*dy + 0.000326708 *lens_ipow(x, 2)*y + -0.0369711 *lens_ipow(x, 2)*dy*lambda+0.0f;
const double dx20 =  + -0.0234753  + -0.00315627 *lens_ipow(dy, 2) + 0.0029825 *lens_ipow(dx, 2) + -0.000177841 *y*dy + 2.71062e-05 *lens_ipow(y, 2) + -0.000213529 *x*dx + 5.91083e-05 *lens_ipow(x, 2) + -4.68395e-05 *lens_ipow(y, 2)*lambda + -4.45564e-05 *lens_ipow(x, 2)*lambda + 3.52393e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -2.60649e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 2.75558e-11 *lens_ipow(y, 6) + 2.96048e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 7.58559e-07 *lens_ipow(x, 3)*y*dx*dy + 5.15549e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 4.57075e-10 *lens_ipow(x, 6) + 8.18852e-08 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lambda + 3.10186e-07 *lens_ipow(x, 4)*lens_ipow(lambda, 3) + -8.74112e-10 *lens_ipow(x, 6)*lambda + 1.98927e-09 *x*lens_ipow(y, 5)*dx*dy + -4.1321e-11 *lens_ipow(x, 7)*dx+0.0f;
const double dx21 =  + 0.00273822 *dx*dy + 0.000137688 *y*dx + -0.000177841 *x*dy + 5.42123e-05 *x*y + -9.36791e-05 *x*y*lambda + 0.000743485 *y*lens_ipow(dx, 3) + 7.04787e-05 *x*y*lens_ipow(lambda, 2) + 1.65335e-10 *x*lens_ipow(y, 5) + 3.94731e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 1.8964e-07 *lens_ipow(x, 4)*dx*dy + 2.0622e-10 *lens_ipow(x, 5)*y + 3.27541e-07 *x*lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + 4.97318e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy+0.0f;
const double dx22 =  + -0.654993  + 1.0576 *lens_ipow(dx, 2) + 0.00273822 *y*dy + 6.8844e-05 *lens_ipow(y, 2) + 0.005965 *x*dx + -0.000106765 *lens_ipow(x, 2) + 0.843587 *lens_ipow(dy, 2)*lambda + -0.701828 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.00111523 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.8964e-07 *lens_ipow(x, 4)*y*dy + 9.94636e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy + -5.16512e-12 *lens_ipow(x, 8)+0.0f;
const double dx23 =  + 0.00273822 *y*dx + -0.00631253 *x*dy + -0.000177841 *x*y + 1.68717 *dx*dy*lambda + -1.40366 *dx*dy*lens_ipow(lambda, 2) + -1.73766e-05 *lens_ipow(x, 3)*dy + 1.8964e-07 *lens_ipow(x, 4)*y*dx + 1.6377e-07 *x*lens_ipow(y, 4)*dy*lambda + 9.94636e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx+0.0f;
const double dx24 =  + 0.843587 *dx*lens_ipow(dy, 2) + -4.68395e-05 *x*lens_ipow(y, 2) + -1.48521e-05 *lens_ipow(x, 3) + -1.40366 *dx*lens_ipow(dy, 2)*lambda + 7.04787e-05 *x*lens_ipow(y, 2)*lambda + 8.18852e-08 *x*lens_ipow(y, 4)*lens_ipow(dy, 2) + 1.86112e-07 *lens_ipow(x, 5)*lens_ipow(lambda, 2) + -1.24873e-10 *lens_ipow(x, 7)+0.0f;
const double dx30 =  + 0.0106999 *dx*dy + -0.000197824 *y*dx + 4.54554e-05 *x*y + 0.000111536 *x*dy*lambda + -7.04011e-05 *x*y*lambda + 0.000962752 *x*lens_ipow(dy, 3) + 4.99866e-05 *x*y*lens_ipow(lambda, 2) + 6.5218e-08 *lens_ipow(x, 3)*y + -9.7339e-06 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 2.91602e-10 *x*lens_ipow(y, 5) + -1.61787e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -1.12036e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx+0.0f;
const double dx31 =  + -0.0234866  + 0.00263039 *lens_ipow(dy, 2) + -0.000201038 *y*dy + 7.67104e-05 *lens_ipow(y, 2) + -0.000197824 *x*dx + 2.27277e-05 *lens_ipow(x, 2) + -0.00674076 *lens_ipow(dx, 2)*lambda + -0.000115117 *lens_ipow(y, 2)*lambda + -3.52006e-05 *lens_ipow(x, 2)*lambda + 7.98518e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 2.49933e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 1.63045e-08 *lens_ipow(x, 4) + -0.00140898 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -9.33921e-09 *lens_ipow(y, 5)*dy + 1.49996e-10 *lens_ipow(y, 6) + -2.92017e-05 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 7.29006e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + -8.08935e-09 *lens_ipow(x, 4)*y*dy + 0.00300443 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -6.72214e-11 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + -0.00210772 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 5) + -5.055e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx32 =  + 0.945287 *dx*dy + 0.0106999 *x*dy + -0.000197824 *x*y + -0.0134815 *y*dx*lambda + -0.000939322 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 2) + -9.7339e-06 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.00200295 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 3) + -2.24071e-11 *lens_ipow(x, 5)*lens_ipow(y, 3) + -0.00140514 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 5) + -2.022e-06 *lens_ipow(y, 5)*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx33 =  + -0.653677  + 1.02052 *lens_ipow(dy, 2) + 0.472643 *lens_ipow(dx, 2) + 0.00526077 *y*dy + -0.000100519 *lens_ipow(y, 2) + 0.0106999 *x*dx + 5.57678e-05 *lens_ipow(x, 2)*lambda + 0.00144413 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -1.55653e-09 *lens_ipow(y, 6) + -1.94678e-05 *x*lens_ipow(y, 3)*dx*dy + -4.04468e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + -2.022e-06 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx34 =  + -0.00674076 *y*lens_ipow(dx, 2) + -3.83722e-05 *lens_ipow(y, 3) + 5.57678e-05 *lens_ipow(x, 2)*dy + -3.52006e-05 *lens_ipow(x, 2)*y + 5.32346e-05 *lens_ipow(y, 3)*lambda + 4.99866e-05 *lens_ipow(x, 2)*y*lambda + -0.000939322 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda + 0.00300443 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.00351286 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -1.011e-06 *lens_ipow(y, 5)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx40 =  + -0.000801993 *dx*lambda + -0.000215954 *x*lens_ipow(dy, 2) + -0.00046503 *x*lens_ipow(dx, 2) + -3.08341e-07 *x*lens_ipow(y, 2) + -1.38255e-07 *lens_ipow(x, 3) + -0.0207565 *lens_ipow(dx, 5) + 3.25479e-08 *lens_ipow(y, 4)*dx + -6.41019e-06 *lens_ipow(x, 2)*y*dx*dy + 2.67678e-09 *x*lens_ipow(y, 4)*lambda + -0.000105535 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lambda + 5.45772e-10 *lens_ipow(x, 6)*dx + 3.25369e-12 *x*lens_ipow(y, 7)*dy + 1.20998e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)*dx + 9.02414e-12 *lens_ipow(x, 5)*lens_ipow(y, 3)*dy+0.0f;
const double dx41 =  + -0.000573572 *dy*lens_ipow(lambda, 2) + -0.00471003 *lens_ipow(dy, 3) + -0.000503736 *y*lens_ipow(dy, 2) + -1.6445e-07 *lens_ipow(y, 3) + -3.08341e-07 *lens_ipow(x, 2)*y + -0.000228662 *y*lens_ipow(dx, 2)*lambda + 1.30192e-07 *x*lens_ipow(y, 3)*dx + -2.13673e-06 *lens_ipow(x, 3)*dx*dy + -0.010202 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + 5.35356e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*lambda + 3.62389e-10 *lens_ipow(y, 6)*dy + 1.13879e-11 *lens_ipow(x, 2)*lens_ipow(y, 6)*dy + 9.67987e-12 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx + 4.51207e-12 *lens_ipow(x, 6)*lens_ipow(y, 2)*dy+0.0f;
const double dx42 =  + -0.000801993 *x*lambda + -0.933175 *lens_ipow(dx, 3) + -0.00046503 *lens_ipow(x, 2)*dx + -1.42269 *dx*lens_ipow(dy, 2)*lambda + -0.000228662 *lens_ipow(y, 2)*dx*lambda + -0.103783 *x*lens_ipow(dx, 4) + 3.25479e-08 *x*lens_ipow(y, 4) + -2.13673e-06 *lens_ipow(x, 3)*y*dy + -0.0204041 *y*dx*dy*lens_ipow(lambda, 3) + -3.51783e-05 *lens_ipow(x, 3)*lens_ipow(dy, 2)*lambda + 7.79675e-11 *lens_ipow(x, 7) + 2.41997e-12 *lens_ipow(x, 5)*lens_ipow(y, 4)+0.0f;
const double dx43 =  + -0.895095 *lens_ipow(dy, 3) + -0.000573572 *y*lens_ipow(lambda, 2) + -0.0141301 *y*lens_ipow(dy, 2) + -0.000503736 *lens_ipow(y, 2)*dy + -0.000215954 *lens_ipow(x, 2)*dy + -1.42269 *lens_ipow(dx, 2)*dy*lambda + -2.13673e-06 *lens_ipow(x, 3)*y*dx + -0.010202 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -7.03567e-05 *lens_ipow(x, 3)*dx*dy*lambda + 5.17698e-11 *lens_ipow(y, 7) + 1.62684e-12 *lens_ipow(x, 2)*lens_ipow(y, 7) + 1.50402e-12 *lens_ipow(x, 6)*lens_ipow(y, 3)+0.0f;
const double dx44 =  + 1.14841  + -2.90314 *lambda + -0.000801993 *x*dx + 4.13916 *lens_ipow(lambda, 3) + -0.00114714 *y*dy*lambda + -0.711344 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000114331 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.93065 *lens_ipow(lambda, 5) + -0.0306061 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 1.33839e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -3.51783e-05 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2)+0.0f;
} break;
