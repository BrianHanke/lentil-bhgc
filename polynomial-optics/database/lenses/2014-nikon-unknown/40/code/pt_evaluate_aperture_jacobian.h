case nikon__unknown__2014__40mm:
{
const double dx00 =  + 0.293882  + 0.235593 *lambda + -0.172285 *lens_ipow(lambda, 2) + -0.0859977 *lens_ipow(dy, 2) + -0.142121 *lens_ipow(dx, 2) + 0.00187845 *y*dy + -0.000250022 *lens_ipow(y, 2) + 0.00706487 *x*dx + -0.000618202 *lens_ipow(x, 2) + 0.000110974 *lens_ipow(y, 2)*lambda + -4.19305e-07 *lens_ipow(y, 4) + -0.0409114 *x*dx*lens_ipow(dy, 2) + -0.0208881 *x*lens_ipow(dx, 3) + -2.34447e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.97496e-06 *lens_ipow(x, 4) + 2.44714e-06 *lens_ipow(x, 4)*lambda + -0.0688526 *y*lens_ipow(dy, 5) + -1.27675e-09 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy + 1.26231e-09 *lens_ipow(x, 7)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx01 =  + 0.00414671 *y*dx + 0.00187845 *x*dy + -0.000500045 *x*y + 0.000221948 *x*y*lambda + -0.345645 *dx*lens_ipow(dy, 3) + -0.438949 *lens_ipow(dx, 3)*dy + -0.0242101 *y*lens_ipow(dx, 3) + -1.67722e-06 *x*lens_ipow(y, 3) + -1.56298e-06 *lens_ipow(x, 3)*y + -0.0688526 *x*lens_ipow(dy, 5) + -6.38374e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx*dy+0.0f;
const double dx02 =  + 25.7302  + 6.58463 *lambda + -4.54122 *lens_ipow(lambda, 2) + -12.8642 *lens_ipow(dy, 2) + -38.2676 *lens_ipow(dx, 2) + 0.00207335 *lens_ipow(y, 2) + -0.284241 *x*dx + 0.00353244 *lens_ipow(x, 2) + -0.345645 *y*lens_ipow(dy, 3) + -1.31685 *y*lens_ipow(dx, 2)*dy + -0.0363151 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0204557 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.0313321 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -2.12791e-10 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy + 1.57789e-10 *lens_ipow(x, 8)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + -25.7285 *dx*dy + -0.171995 *x*dy + 0.00187845 *x*y + -1.03693 *y*dx*lens_ipow(dy, 2) + -0.438949 *y*lens_ipow(dx, 3) + -0.0409114 *lens_ipow(x, 2)*dx*dy + -0.344263 *x*y*lens_ipow(dy, 4) + -2.12791e-10 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx+0.0f;
const double dx04 =  + 6.58463 *dx + 0.235593 *x + -9.08245 *dx*lambda + -0.34457 *x*lambda + 0.000110974 *x*lens_ipow(y, 2) + 4.89429e-07 *lens_ipow(x, 5) + 3.15577e-10 *lens_ipow(x, 8)*dx*lambda+0.0f;
const double dx10 =  + 0.00186033 *y*dx + 0.00403695 *x*dy + -0.00048603 *x*y + 0.000195755 *x*y*lambda + -0.459062 *dx*lens_ipow(dy, 3) + -0.295035 *lens_ipow(dx, 3)*dy + -0.0234765 *x*lens_ipow(dy, 3) + -1.59173e-06 *x*lens_ipow(y, 3) + -1.64243e-06 *lens_ipow(x, 3)*y + -0.202996 *y*lens_ipow(dx, 5)*lens_ipow(lambda, 2) + -1.06211e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy+0.0f;
const double dx11 =  + 0.29468  + 0.235435 *lambda + -0.171039 *lens_ipow(lambda, 2) + -0.160455 *lens_ipow(dy, 2) + -0.000951057 *lens_ipow(y, 2) + 0.00186033 *x*dx + -0.000243015 *lens_ipow(x, 2) + -0.153224 *lens_ipow(dx, 2)*lambda + 0.00739073 *y*dy*lambda + 0.000378771 *lens_ipow(y, 2)*lambda + 9.78775e-05 *lens_ipow(x, 2)*lambda + 0.00156374 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 5.65832e-05 *lens_ipow(y, 3)*dy + -2.3876e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -4.10607e-07 *lens_ipow(x, 4) + -0.0736432 *y*lens_ipow(dx, 2)*dy*lambda + -4.54001e-09 *lens_ipow(y, 6) + -0.202996 *x*lens_ipow(dx, 5)*lens_ipow(lambda, 2) + -1.41615e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx12 =  + -25.6136 *dx*dy + 0.00186033 *x*y + -0.306448 *y*dx*lambda + -0.459062 *x*lens_ipow(dy, 3) + -0.885106 *x*lens_ipow(dx, 2)*dy + -0.0736432 *lens_ipow(y, 2)*dx*dy*lambda + -1.01498 *x*y*lens_ipow(dx, 4)*lens_ipow(lambda, 2) + -3.54037e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy+0.0f;
const double dx13 =  + 25.8075  + 6.44578 *lambda + -4.47832 *lens_ipow(lambda, 2) + -38.9232 *lens_ipow(dy, 2) + -12.8068 *lens_ipow(dx, 2) + -0.320909 *y*dy + 0.00201847 *lens_ipow(x, 2) + 0.00369536 *lens_ipow(y, 2)*lambda + 0.00104249 *lens_ipow(y, 3)*dy + 1.41458e-05 *lens_ipow(y, 4) + -1.37719 *x*dx*lens_ipow(dy, 2) + -0.295035 *x*lens_ipow(dx, 3) + -0.0352147 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.0368216 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -3.54037e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx+0.0f;
const double dx14 =  + 6.44578 *dy + 0.235435 *y + -8.95665 *dy*lambda + -0.342078 *y*lambda + -0.153224 *y*lens_ipow(dx, 2) + 0.00369536 *lens_ipow(y, 2)*dy + 0.000126257 *lens_ipow(y, 3) + 9.78775e-05 *lens_ipow(x, 2)*y + -0.0368216 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.405992 *x*y*lens_ipow(dx, 5)*lambda+0.0f;
const double dx20 =  + -0.0355676  + 0.0136166 *lambda + -0.010679 *lens_ipow(lambda, 2) + -0.00698354 *lens_ipow(dy, 2) + -0.0191151 *lens_ipow(dx, 2) + -2.97416e-05 *lens_ipow(y, 2) + -6.03613e-05 *lens_ipow(x, 2) + 1.36788e-05 *lens_ipow(y, 2)*lambda + 5.93156e-06 *lens_ipow(x, 2)*y*dy + -6.06873e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 7.32182e-06 *lens_ipow(x, 3)*dx + -2.45403e-07 *lens_ipow(x, 4) + 4.09862e-07 *lens_ipow(x, 4)*lambda + 8.59367e-09 *lens_ipow(y, 5)*dy + 2.27876e-08 *x*lens_ipow(y, 4)*dx + -7.14611e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -3.79124e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + -9.46741e-10 *lens_ipow(x, 6)*lens_ipow(lambda, 2) + 0.000197827 *lens_ipow(x, 3)*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 7.72408e-13 *lens_ipow(x, 7)*lens_ipow(y, 2)*dx+0.0f;
const double dx21 =  + -0.0130144 *dx*dy + -5.94832e-05 *x*y + 2.73577e-05 *x*y*lambda + 1.97719e-06 *lens_ipow(x, 3)*dy + -4.04582e-08 *lens_ipow(x, 3)*y + 5.96067e-09 *lens_ipow(y, 5)*dx + 4.29684e-08 *x*lens_ipow(y, 4)*dy + 4.55753e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -4.76407e-07 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + -3.03299e-12 *lens_ipow(x, 5)*lens_ipow(y, 3) + 4.94568e-05 *lens_ipow(x, 4)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 1.93102e-13 *lens_ipow(x, 8)*y*dx+0.0f;
const double dx22 =  + 0.334302  + -0.0239044 *lambda + -0.364943 *lens_ipow(dy, 2) + -1.22914 *lens_ipow(dx, 2) + -0.0130144 *y*dy + -0.0382303 *x*dx + 1.83045e-06 *lens_ipow(x, 4) + 14.9173 *lens_ipow(dx, 6) + 9.93445e-10 *lens_ipow(y, 6) + 1.13938e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + -4.76407e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 474.383 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + 0.00014837 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 9.6551e-14 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const double dx23 =  + -0.729886 *dx*dy + -0.0130144 *y*dx + -0.0139671 *x*dy + 1.97719e-06 *lens_ipow(x, 3)*y + 8.59367e-09 *x*lens_ipow(y, 5) + 379.507 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + 0.00014837 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx24 =  + -0.0239044 *dx + 0.0136166 *x + -0.0213579 *x*lambda + 1.36788e-05 *x*lens_ipow(y, 2) + 8.19724e-08 *lens_ipow(x, 5) + -2.70497e-10 *lens_ipow(x, 7)*lambda+0.0f;
const double dx30 =  + -0.0118753 *dx*dy + 0.000205025 *y*dx + -3.89122e-05 *x*y + 4.05663e-06 *x*lens_ipow(y, 2)*dy + -8.58825e-08 *lens_ipow(x, 3)*y + -1.09082e-09 *x*lens_ipow(y, 5) + 4.53719e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 7.73769e-09 *lens_ipow(x, 5)*dy + -0.00355184 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + 1.31421e-09 *x*lens_ipow(y, 5)*lambda + 6.36547e-11 *lens_ipow(x, 6)*y*dx + -5.47161e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dy, 2)+0.0f;
const double dx31 =  + -0.0366104  + 0.0160443 *lambda + -0.0115659 *lens_ipow(lambda, 2) + -0.0196326 *lens_ipow(dy, 2) + -6.42516e-05 *lens_ipow(y, 2) + 0.000205025 *x*dx + -1.94561e-05 *lens_ipow(x, 2) + -0.0121327 *lens_ipow(dx, 2)*lambda + 8.03727e-06 *lens_ipow(y, 3)*dy + 4.05663e-06 *lens_ipow(x, 2)*y*dy + -2.14706e-08 *lens_ipow(x, 4) + -0.00298434 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -2.72704e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 4.53719e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -0.00355184 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + 3.28553e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + -3.5741e-09 *lens_ipow(y, 6)*lens_ipow(dx, 2) + -1.05422e-12 *lens_ipow(y, 8) + 9.09353e-12 *lens_ipow(x, 7)*dx + -6.43814e-07 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -6.83952e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(dy, 2)+0.0f;
const double dx32 =  + -0.0118753 *x*dy + 0.000205025 *x*y + -1.32122 *dx*dy*lambda + -0.0242654 *y*dx*lambda + 1.5124e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.0106555 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -1.02117e-09 *lens_ipow(y, 7)*dx + 9.09353e-12 *lens_ipow(x, 7)*y + 367.815 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 4) + -2.14605e-07 *lens_ipow(y, 6)*dx*dy*lens_ipow(lambda, 2)+0.0f;
const double dx33 =  + 0.319863  + -1.27342 *lens_ipow(dy, 2) + -0.0392653 *y*dy + -0.0118753 *x*dx + -0.66061 *lens_ipow(dx, 2)*lambda + 2.70018 *lens_ipow(dy, 4) + 2.00932e-06 *lens_ipow(y, 4) + 2.02832e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00447651 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 1.28962e-09 *lens_ipow(x, 6) + 275.861 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -1.07302e-07 *lens_ipow(y, 6)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -2.73581e-11 *lens_ipow(x, 4)*lens_ipow(y, 5)*dy+0.0f;
const double dx34 =  + 0.0160443 *y + -0.0231318 *y*lambda + -0.66061 *lens_ipow(dx, 2)*dy + -0.0121327 *y*lens_ipow(dx, 2) + -0.00298434 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda + -0.0106555 *x*y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 6.57105e-10 *lens_ipow(x, 2)*lens_ipow(y, 5) + 367.815 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -2.14605e-07 *lens_ipow(y, 6)*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx40 =  + -0.00453513 *lens_ipow(dx, 3) + -1.49454e-07 *x*lens_ipow(y, 2) + -0.0065653 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 2.62743e-05 *lens_ipow(y, 2)*lens_ipow(dx, 3) + 4.10116e-05 *x*y*lens_ipow(dy, 3) + 0.000126761 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -8.35736e-07 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -5.55054e-10 *lens_ipow(x, 5) + -0.000792628 *lens_ipow(x, 2)*lens_ipow(dx, 5)*lambda + 0.168718 *y*lens_ipow(dx, 3)*lens_ipow(dy, 5) + -2.06577e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx41 =  + -0.000430282 *dy*lambda + 7.4457e-06 *lens_ipow(y, 2)*dy + -6.59466e-08 *lens_ipow(y, 3) + -1.49454e-07 *lens_ipow(x, 2)*y + -0.00411704 *lens_ipow(dx, 2)*dy*lambda + -0.0160762 *lens_ipow(dy, 5) + 5.25486e-05 *x*y*lens_ipow(dx, 3) + 2.05058e-05 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -4.81057e-09 *lens_ipow(y, 5)*lens_ipow(dx, 2) + 0.168718 *x*lens_ipow(dx, 3)*lens_ipow(dy, 5) + -1.23946e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*dy+0.0f;
const double dx42 =  + -1.16478 *lens_ipow(dx, 3) + -0.0136054 *x*lens_ipow(dx, 2) + -3.96611 *dx*lens_ipow(dy, 2)*lambda + -0.00823408 *y*dx*dy*lambda + 2.64764 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.0065653 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 7.88229e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000126761 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -4.95608 *lens_ipow(dx, 5)*lens_ipow(lambda, 2) + -1.60352e-09 *lens_ipow(y, 6)*dx + -0.00132105 *lens_ipow(x, 3)*lens_ipow(dx, 4)*lambda + 0.506154 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 5) + -4.13155e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)*dy+0.0f;
const double dx43 =  + -0.000430282 *y*lambda + -1.14268 *lens_ipow(dy, 3) + 2.4819e-06 *lens_ipow(y, 3) + -3.96611 *lens_ipow(dx, 2)*dy*lambda + -0.00411704 *y*lens_ipow(dx, 2)*lambda + 2.64764 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.0803808 *y*lens_ipow(dy, 4) + -0.0131306 *x*dx*dy*lens_ipow(lambda, 2) + 6.15174e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -4.17868e-07 *lens_ipow(x, 4)*dy + -5.26234 *lens_ipow(dy, 5)*lens_ipow(lambda, 2) + 0.84359 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -4.13155e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx+0.0f;
const double dx44 =  + 3.03883  + -16.6193 *lambda + 36.2879 *lens_ipow(lambda, 2) + -0.000430282 *y*dy + -36.5392 *lens_ipow(lambda, 3) + 14.1204 *lens_ipow(lambda, 4) + -1.98305 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00411704 *y*lens_ipow(dx, 2)*dy + 2.64764 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.0131306 *x*dx*lens_ipow(dy, 2)*lambda + -1.75411 *lens_ipow(dy, 6)*lambda + -1.65203 *lens_ipow(dx, 6)*lambda + -0.000264209 *lens_ipow(x, 3)*lens_ipow(dx, 5)+0.0f;
} break;
