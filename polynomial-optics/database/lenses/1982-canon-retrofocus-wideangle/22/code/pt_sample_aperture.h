case canon__retrofocus_wideangle__1982__22mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 48.1578 *begin_dx + 0.613031 *begin_x + -0.0839772 *begin_x*begin_lambda + -0.57328 *begin_dx*begin_lambda + 0.0895654 *lens_ipow(begin_x, 2)*begin_dx + 41.9773 *lens_ipow(begin_dx, 3) + 0.0565976 *begin_x*lens_ipow(begin_lambda, 2) + 0.000583207 *lens_ipow(begin_x, 3) + 1.07509 *begin_x*lens_ipow(begin_dy, 2) + 3.89284 *begin_x*lens_ipow(begin_dx, 2) + 0.00322293 *begin_x*lens_ipow(begin_y, 2)*begin_lambda + -6.35753e-05 *lens_ipow(begin_x, 3)*begin_lambda + 0.311239 *begin_x*begin_y*begin_dy*begin_lambda + -0.00847645 *lens_ipow(begin_x, 2)*begin_dx*begin_lambda + 0.159969 *lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 147.044 *begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 10.4036 *begin_y*begin_dx*begin_dy*begin_lambda + -0.00611725 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + -0.273365 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -0.229269 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + -0.579317 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 2) + -336.453 *begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -35.8344 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + 0.00376051 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + 0.350891 *begin_x*begin_y*begin_dy*lens_ipow(begin_lambda, 3) + 32.4265 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 4) + 0.130058 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 4) + 336.919 *begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5);
  pred_y =  + 0.644098 *begin_y + 49.0425 *begin_dy + -2.58483 *begin_dy*begin_lambda + -0.198617 *begin_y*begin_lambda + 2.0023 *begin_x*begin_dx*begin_dy + 0.0389764 *begin_x*begin_y*begin_dx + 0.160109 *begin_y*lens_ipow(begin_lambda, 2) + 0.000547991 *lens_ipow(begin_x, 2)*begin_y + 0.0305401 *lens_ipow(begin_x, 2)*begin_dy + 14.6429 *begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 3.91753 *begin_y*lens_ipow(begin_dx, 2)*begin_lambda + 102.205 *lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + 100.528 *lens_ipow(begin_dy, 3)*begin_lambda + 0.394861 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 0.00273144 *lens_ipow(begin_y, 3)*begin_lambda + 0.0560982 *begin_x*begin_y*begin_dx*begin_lambda + 1.97671 *begin_x*begin_dx*begin_dy*begin_lambda + -0.559247 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 2) + -3.49226 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -0.0503121 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + -0.00427725 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 2) + -13.7314 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -2.06748 *begin_x*begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + 0.228928 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 0.00207471 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 3) + -138.474 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 4) + 5.99617 *begin_dy*lens_ipow(begin_lambda, 6) + -215.631 *lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 5);
  pred_dx =  + 0.0538997 *begin_dx + -0.0197518 *begin_x + -0.00603222 *begin_x*begin_lambda + -0.366628 *begin_dx*begin_lambda + -0.0357674 *begin_y*begin_dx*begin_dy + 0.000637989 *begin_x*begin_y*begin_dy + 0.000892989 *lens_ipow(begin_x, 2)*begin_dx + -3.226 *lens_ipow(begin_dx, 3) + 0.00433235 *begin_x*lens_ipow(begin_lambda, 2) + -3.18309 *begin_dx*lens_ipow(begin_dy, 2) + 9.72737e-06 *begin_x*lens_ipow(begin_y, 2) + 1.04994e-05 *lens_ipow(begin_x, 3) + -0.0132801 *begin_x*lens_ipow(begin_dy, 2) + -0.0499316 *begin_x*lens_ipow(begin_dx, 2) + 0.000105121 *lens_ipow(begin_y, 2)*begin_dx + 0.250723 *begin_dx*lens_ipow(begin_lambda, 2) + -4.65137e-06 *lens_ipow(begin_x, 3)*begin_lambda + -0.00059394 *lens_ipow(begin_x, 2)*begin_dx*begin_lambda + 1.09635e-06 *lens_ipow(begin_x, 4)*begin_dx + -0.0165141 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + 8.092e-09 *lens_ipow(begin_x, 5) + 3.40695e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + -8.64929e-06 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 4.16872e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_lambda + -1.54714e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + 1.40463e-13 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4) + 4.53394e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -4.94081e-06 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 3);
  pred_dy =  + -0.0195979 *begin_y + 0.0692375 *begin_dy + -0.41111 *begin_dy*begin_lambda + -0.0062271 *begin_y*begin_lambda + -0.0153413 *begin_y*lens_ipow(begin_dx, 2) + 0.000542463 *lens_ipow(begin_y, 2)*begin_dy + -0.0560276 *begin_y*lens_ipow(begin_dy, 2) + -0.0370989 *begin_x*begin_dx*begin_dy + 0.00057799 *begin_x*begin_y*begin_dx + -3.19144 *lens_ipow(begin_dx, 2)*begin_dy + 0.00422659 *begin_y*lens_ipow(begin_lambda, 2) + 9.25961e-06 *lens_ipow(begin_x, 2)*begin_y + 0.281868 *begin_dy*lens_ipow(begin_lambda, 2) + 7.72823e-06 *lens_ipow(begin_y, 3) + 8.47331e-05 *lens_ipow(begin_x, 2)*begin_dy + -3.2381 *lens_ipow(begin_dy, 3) + 1.34096e-06 *lens_ipow(begin_y, 4)*begin_dy + -1.83302e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2) + 6.05743e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 9.47497e-09 *lens_ipow(begin_y, 5) + 4.48678e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy + 4.33044e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 0.0674254 *begin_y*lens_ipow(begin_dx, 4)*begin_lambda + 6.43989e-07 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_lambda + 0.000412251 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 8.86631e-14 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -6.82932e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx*begin_dy + 0.000881711 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2);
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 48.1578  + -0.57328 *begin_lambda + 0.0895654 *lens_ipow(begin_x, 2) + 125.932 *lens_ipow(begin_dx, 2) + 7.78569 *begin_x*begin_dx + -0.00847645 *lens_ipow(begin_x, 2)*begin_lambda + 0.159969 *lens_ipow(begin_y, 2)*begin_lambda + 147.044 *lens_ipow(begin_dy, 2)*begin_lambda + 10.4036 *begin_y*begin_dy*begin_lambda + -0.54673 *begin_x*begin_dx*lens_ipow(begin_lambda, 2) + -0.229269 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + -336.453 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -35.8344 *begin_y*begin_dy*lens_ipow(begin_lambda, 3) + 32.4265 *begin_y*begin_dy*lens_ipow(begin_lambda, 4) + 0.130058 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 4) + 336.919 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5)+0.0f;
  dx1_domega0(0, 1) =  + 2.15017 *begin_x*begin_dy + 0.311239 *begin_x*begin_y*begin_lambda + 294.088 *begin_dx*begin_dy*begin_lambda + 10.4036 *begin_y*begin_dx*begin_lambda + -0.579317 *begin_x*begin_y*lens_ipow(begin_lambda, 2) + -672.906 *begin_dx*begin_dy*lens_ipow(begin_lambda, 3) + -35.8344 *begin_y*begin_dx*lens_ipow(begin_lambda, 3) + 0.350891 *begin_x*begin_y*lens_ipow(begin_lambda, 3) + 32.4265 *begin_y*begin_dx*lens_ipow(begin_lambda, 4) + 673.838 *begin_dx*begin_dy*lens_ipow(begin_lambda, 5)+0.0f;
  dx1_domega0(1, 0) =  + 2.0023 *begin_x*begin_dy + 0.0389764 *begin_x*begin_y + 7.83506 *begin_y*begin_dx*begin_lambda + 204.409 *begin_dx*begin_dy*begin_lambda + 0.0560982 *begin_x*begin_y*begin_lambda + 1.97671 *begin_x*begin_dy*begin_lambda + -6.98452 *begin_y*begin_dx*lens_ipow(begin_lambda, 2) + -0.0503121 *begin_x*begin_y*lens_ipow(begin_lambda, 2) + -2.06748 *begin_x*begin_dy*lens_ipow(begin_lambda, 3) + -276.947 *begin_dx*begin_dy*lens_ipow(begin_lambda, 4)+0.0f;
  dx1_domega0(1, 1) =  + 49.0425  + -2.58483 *begin_lambda + 2.0023 *begin_x*begin_dx + 0.0305401 *lens_ipow(begin_x, 2) + 29.2857 *begin_y*begin_dy*begin_lambda + 102.205 *lens_ipow(begin_dx, 2)*begin_lambda + 301.585 *lens_ipow(begin_dy, 2)*begin_lambda + 0.394861 *lens_ipow(begin_y, 2)*begin_lambda + 1.97671 *begin_x*begin_dx*begin_lambda + -0.559247 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + -27.4629 *begin_y*begin_dy*lens_ipow(begin_lambda, 2) + -2.06748 *begin_x*begin_dx*lens_ipow(begin_lambda, 3) + 0.228928 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + -138.474 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 4) + 5.99617 *lens_ipow(begin_lambda, 6) + -646.894 *lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 5)+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
