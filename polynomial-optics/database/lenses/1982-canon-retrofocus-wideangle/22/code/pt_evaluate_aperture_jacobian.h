case canon__retrofocus_wideangle__1982__22mm:
{
const double dx00 =  + 0.613031  + -0.0839772 *lambda + 0.179131 *x*dx + 0.0565976 *lens_ipow(lambda, 2) + 0.00174962 *lens_ipow(x, 2) + 1.07509 *lens_ipow(dy, 2) + 3.89284 *lens_ipow(dx, 2) + 0.00322293 *lens_ipow(y, 2)*lambda + -0.000190726 *lens_ipow(x, 2)*lambda + 0.311239 *y*dy*lambda + -0.0169529 *x*dx*lambda + -0.00611725 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.273365 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.579317 *y*dy*lens_ipow(lambda, 2) + 0.00376051 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 0.350891 *y*dy*lens_ipow(lambda, 3)+0.0f;
const double dx01 =  + 0.00644586 *x*y*lambda + 0.311239 *x*dy*lambda + 0.319939 *y*dx*lambda + 10.4036 *dx*dy*lambda + -0.0122345 *x*y*lens_ipow(lambda, 2) + -0.458538 *y*dx*lens_ipow(lambda, 2) + -0.579317 *x*dy*lens_ipow(lambda, 2) + -35.8344 *dx*dy*lens_ipow(lambda, 3) + 0.00752102 *x*y*lens_ipow(lambda, 3) + 0.350891 *x*dy*lens_ipow(lambda, 3) + 32.4265 *dx*dy*lens_ipow(lambda, 4) + 0.260116 *y*dx*lens_ipow(lambda, 4)+0.0f;
const double dx02 =  + 48.1578  + -0.57328 *lambda + 0.0895654 *lens_ipow(x, 2) + 125.932 *lens_ipow(dx, 2) + 7.78569 *x*dx + -0.00847645 *lens_ipow(x, 2)*lambda + 0.159969 *lens_ipow(y, 2)*lambda + 147.044 *lens_ipow(dy, 2)*lambda + 10.4036 *y*dy*lambda + -0.54673 *x*dx*lens_ipow(lambda, 2) + -0.229269 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -336.453 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -35.8344 *y*dy*lens_ipow(lambda, 3) + 32.4265 *y*dy*lens_ipow(lambda, 4) + 0.130058 *lens_ipow(y, 2)*lens_ipow(lambda, 4) + 336.919 *lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx03 =  + 2.15017 *x*dy + 0.311239 *x*y*lambda + 294.088 *dx*dy*lambda + 10.4036 *y*dx*lambda + -0.579317 *x*y*lens_ipow(lambda, 2) + -672.906 *dx*dy*lens_ipow(lambda, 3) + -35.8344 *y*dx*lens_ipow(lambda, 3) + 0.350891 *x*y*lens_ipow(lambda, 3) + 32.4265 *y*dx*lens_ipow(lambda, 4) + 673.838 *dx*dy*lens_ipow(lambda, 5)+0.0f;
const double dx04 =  + -0.0839772 *x + -0.57328 *dx + 0.113195 *x*lambda + 0.00322293 *x*lens_ipow(y, 2) + -6.35753e-05 *lens_ipow(x, 3) + 0.311239 *x*y*dy + -0.00847645 *lens_ipow(x, 2)*dx + 0.159969 *lens_ipow(y, 2)*dx + 147.044 *dx*lens_ipow(dy, 2) + 10.4036 *y*dx*dy + -0.0122345 *x*lens_ipow(y, 2)*lambda + -0.54673 *x*lens_ipow(dx, 2)*lambda + -0.458538 *lens_ipow(y, 2)*dx*lambda + -1.15863 *x*y*dy*lambda + -1009.36 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -107.503 *y*dx*dy*lens_ipow(lambda, 2) + 0.0112815 *x*lens_ipow(y, 2)*lens_ipow(lambda, 2) + 1.05267 *x*y*dy*lens_ipow(lambda, 2) + 129.706 *y*dx*dy*lens_ipow(lambda, 3) + 0.520232 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 3) + 1684.59 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx10 =  + 2.0023 *dx*dy + 0.0389764 *y*dx + 0.00109598 *x*y + 0.0610802 *x*dy + 0.0560982 *y*dx*lambda + 1.97671 *dx*dy*lambda + -0.0503121 *y*dx*lens_ipow(lambda, 2) + -2.06748 *dx*dy*lens_ipow(lambda, 3)+0.0f;
const double dx11 =  + 0.644098  + -0.198617 *lambda + 0.0389764 *x*dx + 0.160109 *lens_ipow(lambda, 2) + 0.000547991 *lens_ipow(x, 2) + 14.6429 *lens_ipow(dy, 2)*lambda + 3.91753 *lens_ipow(dx, 2)*lambda + 0.789722 *y*dy*lambda + 0.00819433 *lens_ipow(y, 2)*lambda + 0.0560982 *x*dx*lambda + -1.11849 *y*dy*lens_ipow(lambda, 2) + -3.49226 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.0503121 *x*dx*lens_ipow(lambda, 2) + -0.0128317 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -13.7314 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.457856 *y*dy*lens_ipow(lambda, 3) + 0.00622414 *lens_ipow(y, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx12 =  + 2.0023 *x*dy + 0.0389764 *x*y + 7.83506 *y*dx*lambda + 204.409 *dx*dy*lambda + 0.0560982 *x*y*lambda + 1.97671 *x*dy*lambda + -6.98452 *y*dx*lens_ipow(lambda, 2) + -0.0503121 *x*y*lens_ipow(lambda, 2) + -2.06748 *x*dy*lens_ipow(lambda, 3) + -276.947 *dx*dy*lens_ipow(lambda, 4)+0.0f;
const double dx13 =  + 49.0425  + -2.58483 *lambda + 2.0023 *x*dx + 0.0305401 *lens_ipow(x, 2) + 29.2857 *y*dy*lambda + 102.205 *lens_ipow(dx, 2)*lambda + 301.585 *lens_ipow(dy, 2)*lambda + 0.394861 *lens_ipow(y, 2)*lambda + 1.97671 *x*dx*lambda + -0.559247 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -27.4629 *y*dy*lens_ipow(lambda, 2) + -2.06748 *x*dx*lens_ipow(lambda, 3) + 0.228928 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + -138.474 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + 5.99617 *lens_ipow(lambda, 6) + -646.894 *lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx14 =  + -2.58483 *dy + -0.198617 *y + 0.320218 *y*lambda + 14.6429 *y*lens_ipow(dy, 2) + 3.91753 *y*lens_ipow(dx, 2) + 102.205 *lens_ipow(dx, 2)*dy + 100.528 *lens_ipow(dy, 3) + 0.394861 *lens_ipow(y, 2)*dy + 0.00273144 *lens_ipow(y, 3) + 0.0560982 *x*y*dx + 1.97671 *x*dx*dy + -1.11849 *lens_ipow(y, 2)*dy*lambda + -6.98452 *y*lens_ipow(dx, 2)*lambda + -0.100624 *x*y*dx*lambda + -0.0085545 *lens_ipow(y, 3)*lambda + -27.4629 *y*lens_ipow(dy, 2)*lambda + -6.20244 *x*dx*dy*lens_ipow(lambda, 2) + 0.686784 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 0.00622414 *lens_ipow(y, 3)*lens_ipow(lambda, 2) + -553.894 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + 35.977 *dy*lens_ipow(lambda, 5) + -1078.16 *lens_ipow(dy, 3)*lens_ipow(lambda, 4)+0.0f;
const double dx20 =  + -0.0197518  + -0.00603222 *lambda + 0.000637989 *y*dy + 0.00178598 *x*dx + 0.00433235 *lens_ipow(lambda, 2) + 9.72737e-06 *lens_ipow(y, 2) + 3.14982e-05 *lens_ipow(x, 2) + -0.0132801 *lens_ipow(dy, 2) + -0.0499316 *lens_ipow(dx, 2) + -1.39541e-05 *lens_ipow(x, 2)*lambda + -0.00118788 *x*dx*lambda + 4.3854e-06 *lens_ipow(x, 3)*dx + -0.0165141 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 4.046e-08 *lens_ipow(x, 4) + 0.000102208 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -8.64929e-06 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 8.33744e-07 *x*lens_ipow(y, 2)*dx*lambda + -6.18857e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 7.02316e-13 *lens_ipow(x, 4)*lens_ipow(y, 4) + 1.36018e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx21 =  + -0.0357674 *dx*dy + 0.000637989 *x*dy + 1.94547e-05 *x*y + 0.000210241 *y*dx + -1.72986e-05 *x*y*lens_ipow(dy, 2) + 8.33744e-07 *lens_ipow(x, 2)*y*dx*lambda + -4.64143e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + 5.61853e-13 *lens_ipow(x, 5)*lens_ipow(y, 3) + 9.06787e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.97632e-05 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx22 =  + 0.0538997  + -0.366628 *lambda + -0.0357674 *y*dy + 0.000892989 *lens_ipow(x, 2) + -9.67801 *lens_ipow(dx, 2) + -3.18309 *lens_ipow(dy, 2) + -0.0998631 *x*dx + 0.000105121 *lens_ipow(y, 2) + 0.250723 *lens_ipow(lambda, 2) + -0.00059394 *lens_ipow(x, 2)*lambda + 1.09635e-06 *lens_ipow(x, 4) + -0.0330282 *x*dx*lens_ipow(lambda, 2) + 6.81389e-05 *lens_ipow(x, 3)*dx + 4.16872e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -1.54714e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 9.06787e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -1.48224e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx23 =  + -0.0357674 *y*dx + 0.000637989 *x*y + -6.36619 *dx*dy + -0.0265602 *x*dy + -1.72986e-05 *x*lens_ipow(y, 2)*dy + -1.54714e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 9.06787e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy+0.0f;
const double dx24 =  + -0.00603222 *x + -0.366628 *dx + 0.0086647 *x*lambda + 0.501447 *dx*lambda + -4.65137e-06 *lens_ipow(x, 3) + -0.00059394 *lens_ipow(x, 2)*dx + -0.0330282 *x*lens_ipow(dx, 2)*lambda + 4.16872e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + -1.48224e-05 *lens_ipow(y, 4)*lens_ipow(dx, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx30 =  + -0.0370989 *dx*dy + 0.00057799 *y*dx + 1.85192e-05 *x*y + 0.000169466 *x*dy + -3.66603e-05 *x*y*lens_ipow(dx, 2) + 1.21149e-08 *x*lens_ipow(y, 3) + 8.97355e-07 *x*lens_ipow(y, 2)*dy + 6.43989e-07 *lens_ipow(y, 3)*dx*lambda + 0.000824502 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 3.54653e-13 *lens_ipow(x, 3)*lens_ipow(y, 5) + -2.0488e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy+0.0f;
const double dx31 =  + -0.0195979  + -0.0062271 *lambda + -0.0153413 *lens_ipow(dx, 2) + 0.00108493 *y*dy + -0.0560276 *lens_ipow(dy, 2) + 0.00057799 *x*dx + 0.00422659 *lens_ipow(lambda, 2) + 9.25961e-06 *lens_ipow(x, 2) + 2.31847e-05 *lens_ipow(y, 2) + 5.36382e-06 *lens_ipow(y, 3)*dy + -1.83302e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 1.81723e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 4.73749e-08 *lens_ipow(y, 4) + 8.97355e-07 *lens_ipow(x, 2)*y*dy + 0.000129913 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0674254 *lens_ipow(dx, 4)*lambda + 1.93197e-06 *x*lens_ipow(y, 2)*dx*lambda + 0.000412251 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 4.43316e-13 *lens_ipow(x, 4)*lens_ipow(y, 4) + -2.73173e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 0.00264513 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx32 =  + -0.0306826 *y*dx + -0.0370989 *x*dy + 0.00057799 *x*y + -6.38287 *dx*dy + -3.66603e-05 *lens_ipow(x, 2)*y*dx + 0.269702 *y*lens_ipow(dx, 3)*lambda + 6.43989e-07 *x*lens_ipow(y, 3)*lambda + 0.000824502 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -6.82932e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 0.00176342 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx33 =  + 0.0692375  + -0.41111 *lambda + 0.000542463 *lens_ipow(y, 2) + -0.112055 *y*dy + -0.0370989 *x*dx + -3.19144 *lens_ipow(dx, 2) + 0.281868 *lens_ipow(lambda, 2) + 8.47331e-05 *lens_ipow(x, 2) + -9.71428 *lens_ipow(dy, 2) + 1.34096e-06 *lens_ipow(y, 4) + 4.48678e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 8.66088e-05 *lens_ipow(y, 3)*dy + 0.000824502 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -6.82932e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + 0.00176342 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx34 =  + -0.41111 *dy + -0.0062271 *y + 0.00845318 *y*lambda + 0.563737 *dy*lambda + 0.0674254 *y*lens_ipow(dx, 4) + 6.43989e-07 *x*lens_ipow(y, 3)*dx + 0.00176342 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx40 =  + -0.00070285 *dx + -1.28796e-05 *x + -2.05282e-05 *x*y*dy + -1.00176e-05 *lens_ipow(y, 2)*dx + -2.70799e-07 *x*lens_ipow(y, 2) + -3.8902e-06 *lens_ipow(x, 2)*dx + -0.0357254 *dx*lens_ipow(dy, 2) + -0.00108614 *y*dx*dy + -0.000550056 *x*lens_ipow(dy, 2) + -1.17682e-09 *lens_ipow(x, 5) + -7.22135e-10 *lens_ipow(x, 6)*dx + -2.82043e-08 *lens_ipow(x, 5)*lens_ipow(dx, 2) + -5.62442e-09 *lens_ipow(x, 6)*lens_ipow(dx, 3) + -1.11264e-10 *lens_ipow(x, 7)*lens_ipow(dx, 2)+0.0f;
const double dx41 =  + -0.0499571 *lens_ipow(dy, 3) + -0.000517605 *y*lens_ipow(dx, 2) + -1.02641e-05 *lens_ipow(x, 2)*dy + -2.00352e-05 *x*y*dx + -2.70799e-07 *lens_ipow(x, 2)*y + -3.03671e-07 *lens_ipow(y, 3) + -0.0348745 *lens_ipow(dx, 2)*dy + -0.0021974 *y*lens_ipow(dy, 2) + -0.00108614 *x*dx*dy + -3.82789e-05 *lens_ipow(y, 2)*dy+0.0f;
const double dx42 =  + -0.00070285 *x + -0.055108 *dx + -0.000517605 *lens_ipow(y, 2)*dx + -2.67456 *dx*lens_ipow(dy, 2) + -1.00176e-05 *x*lens_ipow(y, 2) + -0.0697489 *y*dx*dy + -1.29673e-06 *lens_ipow(x, 3) + -0.0357254 *x*lens_ipow(dy, 2) + -0.00108614 *x*y*dy + -1.03162e-10 *lens_ipow(x, 7) + -9.40142e-09 *lens_ipow(x, 6)*dx + -2.41047e-09 *lens_ipow(x, 7)*lens_ipow(dx, 2) + -2.7816e-11 *lens_ipow(x, 8)*dx+0.0f;
const double dx43 =  + -0.149871 *y*lens_ipow(dy, 2) + -2.67456 *lens_ipow(dx, 2)*dy + -1.02641e-05 *lens_ipow(x, 2)*y + -3.85306 *lens_ipow(dy, 3) + -0.0348745 *y*lens_ipow(dx, 2) + -0.0021974 *lens_ipow(y, 2)*dy + -0.0714508 *x*dx*dy + -0.00108614 *x*y*dx + -0.000550056 *lens_ipow(x, 2)*dy + -1.27596e-05 *lens_ipow(y, 3)+0.0f;
const double dx44 =  + 1.70004  + -7.03995 *lambda + 10.2965 *lens_ipow(lambda, 2) + -5.19245 *lens_ipow(lambda, 3)+0.0f;
} break;
