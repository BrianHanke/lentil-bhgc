case meyer_optik_goerlitz__primoplan__1936__75mm:
{
const double dx00 =  + 0.587174  + 0.0322488 *y*dy + 0.0721964 *x*dx + 0.000262752 *lens_ipow(y, 2) + 0.778028 *lens_ipow(dy, 2) + 1.69536 *lens_ipow(dx, 2) + 0.00128406 *lens_ipow(x, 2)*lambda + -1.50894e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 5.68624 *lens_ipow(dx, 4)*lambda + -7.01424e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.36181e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.000478003 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 2) + 0.000414493 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -3.37248e-07 *x*lens_ipow(y, 4)*dx + 0.0611854 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 2.07664 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -4.16476e-06 *lens_ipow(x, 4)*lens_ipow(lambda, 2) + -1.09841e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + 81.2628 *lens_ipow(dx, 6)*lens_ipow(lambda, 3) + 7.6954e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.000175841 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 3)*lambda + -1.91792e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx01 =  + 1.33686 *dx*dy + 0.0322488 *x*dy + 0.000525505 *x*y + 0.0297909 *y*dx + -1.00596e-06 *lens_ipow(x, 3)*y + -7.01424e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -1.81575e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.00124348 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -6.74496e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -5.49207e-07 *lens_ipow(x, 4)*y*dx*lambda + 0.000307816 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.000263761 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lambda + -7.67166e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx02 =  + 47.0034  + 1.33686 *y*dy + 0.0360982 *lens_ipow(x, 2) + 46.8766 *lens_ipow(dx, 2) + 21.4697 *lens_ipow(dy, 2) + 3.39072 *x*dx + 0.0148954 *lens_ipow(y, 2) + 22.7449 *x*lens_ipow(dx, 3)*lambda + 0.000119501 *lens_ipow(x, 4)*lens_ipow(lambda, 2) + 0.000828986 *x*lens_ipow(y, 3)*dx*dy + -1.68624e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.0407903 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 2) + 3.11496 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -2.74603e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + 487.577 *x*lens_ipow(dx, 5)*lens_ipow(lambda, 3) + 0.000153908 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 2)*lambda + -8.79204e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 3)*lambda + 29821.5 *lens_ipow(dx, 8)*lens_ipow(lambda, 2) + -7.67166e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + 1.33686 *y*dx + 0.0322488 *x*y + 42.9393 *dx*dy + 1.55606 *x*dy + -2.33808e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.000414493 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + 0.000153908 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy*lambda + -0.000263761 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx04 =  + 0.000428019 *lens_ipow(x, 3) + 5.68624 *x*lens_ipow(dx, 4) + 0.000239002 *lens_ipow(x, 4)*dx*lambda + 0.0407903 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lambda + 2.07664 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lambda + -1.6659e-06 *lens_ipow(x, 5)*lambda + -2.74603e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx + 243.788 *x*lens_ipow(dx, 6)*lens_ipow(lambda, 2) + 7.6954e-05 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -8.79204e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + 6627.01 *lens_ipow(dx, 9)*lambda + -7.67166e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx10 =  + 1.29332 *dx*dy + 0.0322068 *y*dx + 0.000532887 *x*y + 0.0288937 *x*dy + -1.29217e-06 *x*lens_ipow(y, 3) + 0.000741413 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -6.7993e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -1.58481e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + -4.95964e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -7.76225e-07 *x*lens_ipow(y, 4)*dy*lambda + 3.08497e-06 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy*lambda + -9.94703e-08 *x*lens_ipow(y, 5)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx11 =  + 0.591943  + 0.824423 *lens_ipow(dx, 2) + 0.055622 *y*dy + 1.30781 *lens_ipow(dy, 2) + 0.0322068 *x*dx + 0.000266444 *lens_ipow(x, 2) + 0.000816435 *lens_ipow(y, 2)*lambda + -1.93825e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.000535039 *lens_ipow(y, 3)*dy*lambda + 0.0507379 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 13.3259 *lens_ipow(dy, 4)*lambda + 1.68729 *y*lens_ipow(dy, 3)*lambda + 0.000247138 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + -6.7993e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -1.84505 *lens_ipow(dx, 6) + -1.18861e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -2.47982e-07 *lens_ipow(x, 4)*y*dy + 21.6211 *lens_ipow(dy, 6)*lambda + -1.55245e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + 6.16994e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lambda + -2.48676e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx12 =  + 1.64885 *y*dx + 1.29332 *x*dy + 0.0322068 *x*y + 42.3824 *dx*dy + 0.000247138 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + -2.26643e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + -11.0703 *y*lens_ipow(dx, 5) + 3.08497e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy*lambda+0.0f;
const double dx13 =  + 46.4005  + 1.5057 *lambda + 0.027811 *lens_ipow(y, 2) + 2.61562 *y*dy + 1.29332 *x*dx + 21.1912 *lens_ipow(dx, 2) + 0.0144468 *lens_ipow(x, 2) + 32.4963 *lens_ipow(dy, 2) + 0.00013376 *lens_ipow(y, 4)*lambda + 0.0338253 *lens_ipow(y, 3)*dy*lambda + 53.3036 *y*lens_ipow(dy, 3)*lambda + 2.53094 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.000494275 *lens_ipow(x, 3)*y*dx*dy + -1.23991e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + 129.726 *y*lens_ipow(dy, 5)*lambda + 4537.89 *lens_ipow(dy, 6)*lambda + -3.88112e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + 1.54248e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda + -9.94703e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx14 =  + 1.5057 *dy + 0.000272145 *lens_ipow(y, 3) + 0.00013376 *lens_ipow(y, 4)*dy + 0.0169126 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 13.3259 *y*lens_ipow(dy, 4) + 0.843646 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 21.6211 *y*lens_ipow(dy, 6) + 648.27 *lens_ipow(dy, 7) + -3.88112e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + 1.54248e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + -9.94703e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx20 =  + -0.00484464  + 0.00193042 *y*dy + 0.00530198 *x*dx + 2.20572e-05 *lens_ipow(y, 2) + 4.41638e-05 *lens_ipow(x, 2) + 0.0343307 *lens_ipow(dy, 2) + 0.0833062 *lens_ipow(dx, 2) + -1.65411e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00358005 *y*lens_ipow(dx, 2)*dy + 0.000224347 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.000468951 *x*y*dx*dy + 0.0146478 *x*dx*lens_ipow(dy, 2) + 0.00167516 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 9.11059e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 0.000865093 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -2.60623e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 0.000152882 *lens_ipow(x, 4)*lens_ipow(dx, 4) + 5.2664e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 8.84198e-07 *lens_ipow(x, 5)*dx*lens_ipow(dy, 2)*lambda + 9.07989e-06 *lens_ipow(x, 5)*lens_ipow(dx, 5)+0.0f;
const double dx21 =  + 0.00193042 *x*dy + 4.41144e-05 *x*y + 0.00210837 *y*dx + 0.241326 *dx*dy*lambda + -1.10274e-07 *lens_ipow(x, 3)*y + 0.00358005 *x*lens_ipow(dx, 2)*dy + -0.213603 *dx*dy*lens_ipow(lambda, 2) + -0.0646663 *dx*lens_ipow(dy, 3) + 0.000234475 *lens_ipow(x, 2)*dx*dy + 3.03686e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -1.30311e-08 *lens_ipow(x, 4)*y*dx+0.0f;
const double dx22 =  + 1.40451  + -0.160233 *lambda + 0.00265099 *lens_ipow(x, 2) + 4.80084 *lens_ipow(dx, 2) + 1.52955 *lens_ipow(dy, 2) + 0.166612 *x*dx + 0.00105418 *lens_ipow(y, 2) + 0.241326 *y*dy*lambda + 0.00716011 *x*y*dx*dy + -0.213603 *y*dy*lens_ipow(lambda, 2) + -0.0646663 *y*lens_ipow(dy, 3) + 0.000234475 *lens_ipow(x, 2)*y*dy + 0.0073239 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00111677 *lens_ipow(x, 3)*dx + 6.07372e-05 *lens_ipow(x, 3)*y*dx*dy + 0.00064882 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -6.51557e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.000122305 *lens_ipow(x, 5)*lens_ipow(dx, 3) + 2.10656e-05 *lens_ipow(x, 5)*dx*lens_ipow(dy, 2)*lambda + 1.47366e-07 *lens_ipow(x, 6)*lens_ipow(dy, 2)*lambda + 7.56657e-06 *lens_ipow(x, 6)*lens_ipow(dx, 4)+0.0f;
const double dx23 =  + 0.00193042 *x*y + 3.05909 *dx*dy + 0.0686615 *x*dy + 0.241326 *y*dx*lambda + 0.00358005 *x*y*lens_ipow(dx, 2) + -0.213603 *y*dx*lens_ipow(lambda, 2) + 0.000149565 *lens_ipow(x, 3)*dy + -0.193999 *y*dx*lens_ipow(dy, 2) + 0.000234475 *lens_ipow(x, 2)*y*dx + 0.0146478 *lens_ipow(x, 2)*dx*dy + 3.03686e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 2.10656e-05 *lens_ipow(x, 5)*lens_ipow(dx, 2)*dy*lambda + 2.94733e-07 *lens_ipow(x, 6)*dx*dy*lambda+0.0f;
const double dx24 =  + -0.160233 *dx + 0.241326 *y*dx*dy + -0.427206 *y*dx*dy*lambda + 1.05328e-05 *lens_ipow(x, 5)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.47366e-07 *lens_ipow(x, 6)*dx*lens_ipow(dy, 2)+0.0f;
const double dx30 =  + 0.00196059 *y*dx + 4.05852e-05 *x*y + 0.00210239 *x*dy + 0.1406 *dx*dy*lambda + 0.0125684 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -1.08133e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -3.87737e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -1.88544e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + -1.86032 *dx*lens_ipow(dy, 3)*lens_ipow(lambda, 5) + -3.93621e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 3.78415e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 3)+0.0f;
const double dx31 =  + -0.00455927  + 0.0346639 *lens_ipow(dx, 2) + 0.00522016 *y*dy + 0.00196059 *x*dx + 2.02926e-05 *lens_ipow(x, 2) + 3.95353e-05 *lens_ipow(y, 2) + 0.275257 *lens_ipow(dy, 2)*lambda + 0.00836934 *y*lens_ipow(dx, 2)*dy + 0.00014486 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00153645 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.239769 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.000768547 *lens_ipow(y, 3)*lens_ipow(dy, 3) + -8.10997e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + -1.93868e-08 *lens_ipow(x, 4)*y*dy + -1.13126e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + 0.000138473 *lens_ipow(y, 4)*lens_ipow(dy, 4) + -1.57448e-08 *lens_ipow(x, 5)*y*dx*lens_ipow(dy, 3) + 2.27049e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 3) + 8.40805e-06 *lens_ipow(y, 5)*lens_ipow(dy, 5)+0.0f;
const double dx32 =  + 0.0693277 *y*dx + 0.00196059 *x*y + 6.5716 *dx*dy*lambda + 0.1406 *x*dy*lambda + 0.00836934 *lens_ipow(y, 2)*dx*dy + 9.65732e-05 *lens_ipow(y, 3)*dx + 0.0125684 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 2) + -3.77088e-11 *lens_ipow(x, 5)*lens_ipow(y, 3) + -1.86032 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 5) + -7.87241e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dy, 3) + 2.27049e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dx, 2) + -184.022 *dx*lens_ipow(dy, 3)*lens_ipow(lambda, 6)+0.0f;
const double dx33 =  + 1.3564  + 0.00261008 *lens_ipow(y, 2) + -0.122139 *lens_ipow(lambda, 2) + 0.0010512 *lens_ipow(x, 2) + 4.67485 *lens_ipow(dy, 2) + 0.550514 *y*dy*lambda + 3.2858 *lens_ipow(dx, 2)*lambda + 0.1406 *x*dx*lambda + 0.00418467 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.0010243 *lens_ipow(y, 3)*dy + -0.479538 *y*dy*lens_ipow(lambda, 2) + 0.00057641 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 0.0062842 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -9.69342e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.000110778 *lens_ipow(y, 5)*lens_ipow(dy, 3) + -5.58095 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -2.36172e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 7.00671e-06 *lens_ipow(y, 6)*lens_ipow(dy, 4) + -276.032 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6)+0.0f;
const double dx34 =  + -0.244277 *dy*lambda + 0.275257 *y*lens_ipow(dy, 2) + 3.2858 *lens_ipow(dx, 2)*dy + 0.1406 *x*dx*dy + -0.479538 *y*lens_ipow(dy, 2)*lambda + 0.0125684 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy*lambda + -9.30159 *x*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 4) + -552.065 *lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 5)+0.0f;
const double dx40 =  + 0.0112666 *dx + 0.000296188 *x + -0.244759 *lens_ipow(dx, 3) + -0.000260621 *x*y*dy + -3.31458e-06 *x*lens_ipow(y, 2) + -0.0176264 *x*lens_ipow(dx, 2) + -0.000433475 *lens_ipow(x, 2)*dx + -0.201074 *dx*lens_ipow(dy, 2) + -3.68186e-06 *lens_ipow(x, 3) + -0.00571689 *y*dx*dy + -0.00531886 *x*lens_ipow(dy, 2) + -0.000357031 *lens_ipow(y, 2)*dx*lambda + -0.00778223 *y*dx*dy*lambda + 0.00022646 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx41 =  + -0.0789622 *lens_ipow(dy, 3) + -0.000130311 *lens_ipow(x, 2)*dy + -3.31458e-06 *lens_ipow(x, 2)*y + -0.00571689 *x*dx*dy + -0.000714062 *x*y*dx*lambda + -0.00778223 *x*dx*dy*lambda + -0.00870068 *y*lens_ipow(dx, 2)*lambda + -0.340209 *lens_ipow(dx, 2)*dy*lambda + -0.000180099 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -2.18022e-06 *lens_ipow(y, 4)*dy + 0.000452919 *x*y*dx*lens_ipow(lambda, 2) + -3.05949e-05 *lens_ipow(y, 4)*lens_ipow(dy, 3) + -4.41003e-11 *lens_ipow(y, 7) + -2.15722e-06 *lens_ipow(y, 5)*lens_ipow(dy, 4)+0.0f;
const double dx42 =  + 0.0112666 *x + 0.425762 *dx + -11.1151 *lens_ipow(dx, 3) + -0.734278 *x*lens_ipow(dx, 2) + -8.03301 *dx*lens_ipow(dy, 2) + -0.0176264 *lens_ipow(x, 2)*dx + -0.000144492 *lens_ipow(x, 3) + -0.201074 *x*lens_ipow(dy, 2) + -0.00571689 *x*y*dy + -0.000357031 *x*lens_ipow(y, 2)*lambda + -0.00778223 *x*y*dy*lambda + -0.00870068 *lens_ipow(y, 2)*dx*lambda + -0.680417 *y*dx*dy*lambda + 0.00022646 *x*lens_ipow(y, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx43 =  + -0.236887 *y*lens_ipow(dy, 2) + -8.03301 *lens_ipow(dx, 2)*dy + -0.000130311 *lens_ipow(x, 2)*y + -4.54879 *lens_ipow(dy, 3) + -0.402149 *x*dx*dy + -0.00571689 *x*y*dx + -0.00531886 *lens_ipow(x, 2)*dy + -0.00778223 *x*y*dx*lambda + -0.340209 *y*lens_ipow(dx, 2)*lambda + -9.00496e-05 *lens_ipow(y, 4)*dy + -4.36045e-07 *lens_ipow(y, 5) + -1.83569e-05 *lens_ipow(y, 5)*lens_ipow(dy, 2) + -1.43815e-06 *lens_ipow(y, 6)*lens_ipow(dy, 3)+0.0f;
const double dx44 =  + 0.0554039  + -0.000357031 *x*lens_ipow(y, 2)*dx + -0.00778223 *x*y*dx*dy + -0.00435034 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.340209 *y*lens_ipow(dx, 2)*dy + 0.000452919 *x*lens_ipow(y, 2)*dx*lambda+0.0f;
} break;
