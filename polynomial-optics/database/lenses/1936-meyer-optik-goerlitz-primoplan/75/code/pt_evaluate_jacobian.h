case meyer_optik_goerlitz__primoplan__1936__75mm:
{
const double dx00 =  + 0.548261  + 0.0427014 *lambda + 0.0546769 *y*dy + 0.0710054 *x*dx + 0.000502652 *lens_ipow(y, 2) + 0.000922651 *lens_ipow(x, 2) + 1.15636 *lens_ipow(dy, 2) + 0.000628117 *lens_ipow(x, 3)*dx + 22.336 *lens_ipow(dx, 4) + 1.86979 *x*lens_ipow(dx, 3) + 0.0571913 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -9.73128e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -2.26012e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.00104828 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + -2.22818e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.0175371 *lens_ipow(x, 2)*lens_ipow(dy, 4) + 0.000411725 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 2.58558e-05 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -1.88189e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -1.56806e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.64642e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2) + 6.0195e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda+0.0f;
const double dx01 =  + 0.999157 *dx*dy + 0.0546769 *x*dy + 0.0010053 *x*y + 0.0419428 *y*dx + -9.73128e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -3.01349e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + -8.91271e-09 *lens_ipow(x, 5)*y + 0.00123518 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -9.40947e-07 *lens_ipow(x, 4)*y*dx + -6.27223e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 2) + 9.87853e-08 *x*lens_ipow(y, 5)*lens_ipow(dx, 2) + 4.8156e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)*lambda+0.0f;
const double dx02 =  + 74.3729  + 0.999157 *y*dy + 0.0355027 *lens_ipow(x, 2) + -162.265 *lens_ipow(dx, 2) + -16.4536 *lens_ipow(dy, 2) + 0.0209714 *lens_ipow(y, 2) + 0.000157029 *lens_ipow(x, 4) + 89.344 *x*lens_ipow(dx, 3) + 2.80469 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 1197.3 *lens_ipow(dx, 4) + 0.0381276 *lens_ipow(x, 3)*dx + 0.00026207 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 0.00082345 *x*lens_ipow(y, 3)*dx*dy + -4.70474e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + -6.27223e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + 3.29284e-08 *x*lens_ipow(y, 6)*dx+0.0f;
const double dx03 =  + 0.999157 *y*dx + 0.0546769 *x*y + -32.9072 *dx*dy + 2.31272 *x*dy + -3.24376e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.00052414 *lens_ipow(x, 4)*dx*dy + -0.0233828 *lens_ipow(x, 3)*lens_ipow(dy, 3) + 0.000411725 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + 1.03423e-05 *lens_ipow(x, 5)*dy+0.0f;
const double dx04 =  + 0.0427014 *x + 1.2039e-11 *lens_ipow(x, 5)*lens_ipow(y, 4)+0.0f;
const double dx10 =  + 0.957993 *dx*dy + 0.0581066 *y*dx + 0.00105456 *x*y + 0.0412005 *x*dy + 0.00346984 *x*y*lens_ipow(dy, 2)*lambda + 0.368587 *y*dx*lens_ipow(dy, 2)*lambda + 0.0101003 *lens_ipow(y, 2)*dx*dy*lambda + -1.08181e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -5.28286e-09 *x*lens_ipow(y, 5) + -2.95661e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + -4.10471e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + -2.62609e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy*lambda+0.0f;
const double dx11 =  + 0.563745  + 1.40325 *lens_ipow(dx, 2) + 0.0706389 *y*dy + 0.0581066 *x*dx + 0.000527282 *lens_ipow(x, 2) + 0.00301101 *lens_ipow(y, 2)*lambda + -1.12448 *lens_ipow(dx, 4) + 0.000570126 *lens_ipow(y, 3)*dy + 2.01624 *y*lens_ipow(dy, 3) + 24.1404 *lens_ipow(dy, 4) + -0.00211684 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.0579775 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00173492 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 0.456304 *y*lens_ipow(dx, 2)*dy*lambda + 0.368587 *x*dx*lens_ipow(dy, 2)*lambda + 0.0202005 *x*y*dx*dy*lambda + -1.08181e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 9.81969 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.32072e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + -2.21746e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -4.10471e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + -3.50145e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy*lambda+0.0f;
const double dx12 =  + 2.80651 *y*dx + 0.957993 *x*dy + 0.0581066 *x*y + -32.2083 *dx*dy + -4.49794 *y*lens_ipow(dx, 3) + 0.456304 *lens_ipow(y, 2)*dx*dy*lambda + 0.368587 *x*y*lens_ipow(dy, 2)*lambda + 0.0101003 *x*lens_ipow(y, 2)*dy*lambda + -3.60603e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + 19.6394 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -8.75363e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy*lambda+0.0f;
const double dx13 =  + 74.387  + 0.0353195 *lens_ipow(y, 2) + 0.957993 *x*dx + -16.1042 *lens_ipow(dx, 2) + 0.0206002 *lens_ipow(x, 2) + -165.447 *lens_ipow(dy, 2) + 0.000142532 *lens_ipow(y, 4) + 1259.58 *lens_ipow(dy, 4) + 3.02436 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 96.5615 *y*lens_ipow(dy, 3) + 0.0386517 *lens_ipow(y, 3)*dy + 0.00346984 *lens_ipow(x, 2)*y*dy*lambda + 0.228152 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 0.737173 *x*y*dx*dy*lambda + 0.0101003 *x*lens_ipow(y, 2)*dx*lambda + 19.6394 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -1.02618e-09 *lens_ipow(x, 4)*lens_ipow(y, 4) + -8.75363e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lambda+0.0f;
const double dx14 =  + 0.00100367 *lens_ipow(y, 3) + -0.00141123 *lens_ipow(y, 3)*lambda + 0.00173492 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + 0.228152 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 0.368587 *x*y*dx*lens_ipow(dy, 2) + 0.0101003 *x*lens_ipow(y, 2)*dx*dy + 19.6394 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -8.75363e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy+0.0f;
const double dx20 =  + -0.0241991  + -0.000668816 *lambda + -0.000987251 *y*dy + -0.001035 *x*dx + -5.006e-06 *lens_ipow(y, 2) + -0.0268585 *lens_ipow(dy, 2) + -0.00955396 *lens_ipow(dx, 2)*lambda + 3.43795e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 8.72484e-09 *lens_ipow(y, 4) + -0.00108655 *y*lens_ipow(dy, 3) + -3.67636e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -8.87887e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 1.37041e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.00632312 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 7.65957e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 4.25573e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + 1.24156e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + -8.59912e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -2.43643e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 3)+0.0f;
const double dx21 =  + -0.0332679 *dx*dy + -0.000987251 *x*dy + -1.0012e-05 *x*y + -0.000567381 *y*dx + 2.29197e-08 *lens_ipow(x, 3)*y + 9.07977e-07 *lens_ipow(y, 3)*dx + 3.48994e-08 *x*lens_ipow(y, 3) + -0.00321031 *y*dx*lens_ipow(dy, 2) + -0.00108655 *x*lens_ipow(dy, 3) + -7.35272e-05 *x*y*lens_ipow(dy, 2) + -0.0706228 *dx*lens_ipow(dy, 3)*lambda + 1.37041e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 3.82978e-09 *lens_ipow(x, 4)*y*dx + 4.25573e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 9.93247e-13 *lens_ipow(x, 5)*lens_ipow(y, 3) + -8.59912e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -2.43643e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dy, 3)+0.0f;
const double dx22 =  + -1.42183  + -0.0332679 *y*dy + -0.000517502 *lens_ipow(x, 2) + 2.31521 *lens_ipow(dx, 2) + -0.732032 *lens_ipow(dy, 2) + -0.000283691 *lens_ipow(y, 2) + -0.0191079 *x*dx*lambda + 2.26994e-07 *lens_ipow(y, 4) + -0.00160515 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -4.71943 *lens_ipow(dx, 4)*lambda + -0.0706228 *y*lens_ipow(dy, 3)*lambda + -0.00316156 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 1.91489e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 1.06393e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + -5.73274e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx23 =  + -0.0332679 *y*dx + -0.000987251 *x*y + -1.46406 *dx*dy + -0.053717 *x*dy + -0.00321031 *lens_ipow(y, 2)*dx*dy + -0.00325964 *x*y*lens_ipow(dy, 2) + -7.35272e-05 *x*lens_ipow(y, 2)*dy + -0.211868 *y*dx*lens_ipow(dy, 2)*lambda + -5.91924e-05 *lens_ipow(x, 3)*dy*lambda + 4.56802e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.00632312 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 2) + -2.86637e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2) + -2.43643e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dy, 2)+0.0f;
const double dx24 =  + -0.000668816 *x + -0.00955396 *x*lens_ipow(dx, 2) + -0.943887 *lens_ipow(dx, 5) + -0.0706228 *y*dx*lens_ipow(dy, 3) + -2.95962e-05 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -0.00632312 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx30 =  + 0.0497743 *dx*dy + -0.000117589 *y*dx + 6.00682e-06 *x*y + 0.000503213 *x*dy + 0.00587984 *x*lens_ipow(dx, 2)*dy + 1.09738e-06 *lens_ipow(x, 3)*dy + 0.000166786 *lens_ipow(x, 2)*dx*dy + 0.00249138 *y*dx*lens_ipow(dy, 2)*lambda + 5.17532e-05 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -2.49504e-08 *x*lens_ipow(y, 3)*lens_ipow(lambda, 2) + 1.3706e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + 2.784e-13 *lens_ipow(x, 4)*lens_ipow(y, 5)*dx + -2.18235e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + 3.73412e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dx, 2) + 1.51866e-13 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy+0.0f;
const double dx31 =  + -0.0233939  + -0.00399883 *lambda + -0.000887209 *y*dy + -0.000117589 *x*dx + 0.00296588 *lens_ipow(lambda, 2) + 3.00341e-06 *lens_ipow(x, 2) + 0.00249138 *x*dx*lens_ipow(dy, 2)*lambda + 3.54168e-09 *lens_ipow(y, 5)*dy + -1.69178e-07 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.000103506 *x*y*dx*dy*lens_ipow(lambda, 2) + -3.74256e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + 3.12571e-13 *lens_ipow(y, 8) + 1.71325e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + 2.784e-13 *lens_ipow(x, 5)*lens_ipow(y, 4)*dx + -3.63725e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + 4.66765e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(dx, 2) + 2.27798e-13 *lens_ipow(x, 4)*lens_ipow(y, 5)*dy+0.0f;
const double dx32 =  + 0.0497743 *x*dy + -0.000117589 *x*y + 4.672 *dx*dy + 0.00587984 *lens_ipow(x, 2)*dx*dy + -3.9529 *dx*lens_ipow(dy, 3) + 5.55952e-05 *lens_ipow(x, 3)*dy + -9.18068 *lens_ipow(dx, 3)*dy + 0.00249138 *x*y*lens_ipow(dy, 2)*lambda + -6.76711e-08 *lens_ipow(y, 5)*dx + 5.17532e-05 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 5.56799e-14 *lens_ipow(x, 5)*lens_ipow(y, 5) + -7.27451e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dy, 2) + 1.86706e-12 *lens_ipow(x, 4)*lens_ipow(y, 5)*dx+0.0f;
const double dx33 =  + -1.4288  + -0.000443605 *lens_ipow(y, 2) + 0.0497743 *x*dx + 2.336 *lens_ipow(dx, 2) + 0.000251606 *lens_ipow(x, 2) + 2.57481 *lens_ipow(dy, 2) + 0.00293992 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -5.92935 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.74344e-07 *lens_ipow(x, 4) + -2.53197 *lens_ipow(dy, 4) + 5.55952e-05 *lens_ipow(x, 3)*dx + -2.29517 *lens_ipow(dx, 4) + 0.00498276 *x*y*dx*dy*lambda + 5.9028e-10 *lens_ipow(y, 6) + 5.17532e-05 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -1.4549e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy + 3.79664e-14 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx34 =  + -0.00399883 *y + 0.00593177 *y*lambda + 0.00249138 *x*y*dx*lens_ipow(dy, 2) + 0.000103506 *x*lens_ipow(y, 2)*dx*dy*lambda + -2.49504e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*lambda+0.0f;
const double dx40 =  + 0.00954575 *dx + 0.000241629 *x + -0.207842 *lens_ipow(dx, 3) + -0.000216134 *x*y*dy + -0.000107596 *lens_ipow(y, 2)*dx + -2.74256e-06 *x*lens_ipow(y, 2) + -0.0146439 *x*lens_ipow(dx, 2) + -0.000352828 *lens_ipow(x, 2)*dx + -0.178241 *dx*lens_ipow(dy, 2) + -2.95133e-06 *lens_ipow(x, 3) + -0.00867062 *y*dx*dy + -0.00446107 *x*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + -0.0547166 *lens_ipow(dy, 3) + -0.0043293 *y*lens_ipow(dx, 2) + -0.000108067 *lens_ipow(x, 2)*dy + -0.000215193 *x*y*dx + -2.74256e-06 *lens_ipow(x, 2)*y + -0.172062 *lens_ipow(dx, 2)*dy + -0.00867062 *x*dx*dy + -0.000150912 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -2.16402e-06 *lens_ipow(y, 4)*dy + -2.64878e-05 *lens_ipow(y, 4)*lens_ipow(dy, 3) + 2.1268e-09 *lens_ipow(y, 6)*dy + -3.19112e-11 *lens_ipow(y, 7) + -1.81813e-06 *lens_ipow(y, 5)*lens_ipow(dy, 4)+0.0f;
const double dx42 =  + 0.00954575 *x + 0.388226 *dx + -9.74664 *lens_ipow(dx, 3) + -0.0043293 *lens_ipow(y, 2)*dx + -0.623525 *x*lens_ipow(dx, 2) + -7.58152 *dx*lens_ipow(dy, 2) + -0.000107596 *x*lens_ipow(y, 2) + -0.0146439 *lens_ipow(x, 2)*dx + -0.344123 *y*dx*dy + -0.000117609 *lens_ipow(x, 3) + -0.178241 *x*lens_ipow(dy, 2) + -0.00867062 *x*y*dy+0.0f;
const double dx43 =  + -0.16415 *y*lens_ipow(dy, 2) + -7.58152 *lens_ipow(dx, 2)*dy + -0.000108067 *lens_ipow(x, 2)*y + -3.2802 *lens_ipow(dy, 3) + -0.172062 *y*lens_ipow(dx, 2) + -0.356481 *x*dx*dy + -0.00867062 *x*y*dx + -0.00446107 *lens_ipow(x, 2)*dy + -7.54562e-05 *lens_ipow(y, 4)*dy + -4.32804e-07 *lens_ipow(y, 5) + -1.58927e-05 *lens_ipow(y, 5)*lens_ipow(dy, 2) + 3.03829e-10 *lens_ipow(y, 7) + -1.21209e-06 *lens_ipow(y, 6)*lens_ipow(dy, 3)+0.0f;
const double dx44 =  + 0.30352  + -0.410336 *lambda+0.0f;
} break;
