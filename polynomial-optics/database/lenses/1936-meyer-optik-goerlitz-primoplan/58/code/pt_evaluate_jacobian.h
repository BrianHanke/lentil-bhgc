case meyer_optik_goerlitz__primoplan__1936__58mm:
{
const double dx00 =  + 0.489361  + 0.0649287 *lambda + 0.00416611 *lens_ipow(x, 2) + 2.43864 *lens_ipow(dx, 2) + 1.35248 *lens_ipow(dy, 2) + 0.228783 *x*dx + 0.00125479 *lens_ipow(y, 2) + 0.0751718 *y*dy + -0.000614592 *lens_ipow(x, 3)*dx + -1.83139e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.177628 *x*lens_ipow(dx, 3) + -2.1939e-06 *lens_ipow(y, 4) + -1.73232e-05 *lens_ipow(x, 4) + -2.94863e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -3.11985e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.08881e-06 *x*lens_ipow(y, 4)*dx + -0.000309516 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*dy + -3.33112e-10 *lens_ipow(x, 4)*lens_ipow(y, 4) + -1.15577e-08 *lens_ipow(x, 6)*y*dy*lambda + -0.000806933 *lens_ipow(x, 3)*y*dx*lens_ipow(dy, 3)*lambda+0.0f;
const double dx01 =  + 1.2327 *dx*dy + 0.00250959 *x*y + 0.0751718 *x*dy + 0.055308 *y*dx + -1.22093e-05 *lens_ipow(x, 3)*y + -8.77559e-06 *x*lens_ipow(y, 3) + -1.47432e-06 *lens_ipow(x, 4)*y*dx + -3.11985e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -2.17762e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -0.000464274 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + -2.6649e-10 *lens_ipow(x, 5)*lens_ipow(y, 3) + -1.65109e-09 *lens_ipow(x, 7)*dy*lambda + -0.000201733 *lens_ipow(x, 4)*dx*lens_ipow(dy, 3)*lambda+0.0f;
const double dx02 =  + 56.2187  + 4.87728 *x*dx + 1.2327 *y*dy + -34.5466 *lens_ipow(dx, 2) + 0.114392 *lens_ipow(x, 2) + 0.027654 *lens_ipow(y, 2) + -0.000153648 *lens_ipow(x, 4) + 0.266442 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -7.37159e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + -5.44404e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -0.000464274 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -0.000201733 *lens_ipow(x, 4)*y*lens_ipow(dy, 3)*lambda+0.0f;
const double dx03 =  + 1.2327 *y*dx + 2.70497 *x*dy + 0.0751718 *x*y + -1.03995e-06 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.000154758 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 3) + -1.65109e-09 *lens_ipow(x, 7)*y*lambda + -0.0006052 *lens_ipow(x, 4)*y*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx04 =  + 0.0649287 *x + -1.65109e-09 *lens_ipow(x, 7)*y*dy + -0.000201733 *lens_ipow(x, 4)*y*dx*lens_ipow(dy, 3)+0.0f;
const double dx10 =  + 0.813514 *dx*dy + 0.0623186 *y*dx + 0.0423235 *x*dy + -0.000227887 *lens_ipow(x, 2)*y*dx + 2.31259e-05 *x*lens_ipow(y, 3) + -1.25913e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + 3.88636e-05 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + -1.00276e-07 *x*lens_ipow(y, 5) + -8.71508e-09 *x*lens_ipow(y, 6)*dy + -0.000480983 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -1.02733e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx + -1.83284e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy*lambda + -2.9679e-07 *x*lens_ipow(y, 5)*lens_ipow(dy, 2)*lambda + -0.000205678 *lens_ipow(y, 4)*lens_ipow(dx, 3)*dy*lambda+0.0f;
const double dx11 =  + 0.606993  + 0.774043 *lens_ipow(dx, 2) + 1.90683 *lens_ipow(dy, 2) + 0.178215 *y*dy + 0.0623186 *x*dx + 0.00137357 *lens_ipow(y, 2)*lambda + -0.000190503 *lens_ipow(y, 3)*dy + 0.00630028 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -7.59623e-05 *lens_ipow(x, 3)*dx + 3.46889e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -9.4435e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + 9.7159e-06 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -2.5069e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -2.61453e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy + -0.000320656 *lens_ipow(x, 3)*y*dx*lens_ipow(dy, 3) + -1.71221e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + -1.83284e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy*lambda + -7.41975e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2)*lambda + -0.000822712 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*dy*lambda+0.0f;
const double dx12 =  + 1.54809 *y*dx + 0.813514 *x*dy + 0.0623186 *x*y + -25.262 *dx*dy + 0.00420019 *lens_ipow(y, 3)*dx + -7.59623e-05 *lens_ipow(x, 3)*y + -0.000160328 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dy, 3) + -3.42443e-09 *lens_ipow(x, 3)*lens_ipow(y, 5) + -0.000617034 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx13 =  + 56.8264  + -31.6087 *lens_ipow(dy, 2) + 3.81366 *y*dy + 0.813514 *x*dx + 0.0891075 *lens_ipow(y, 2) + -12.631 *lens_ipow(dx, 2) + 0.0211618 *lens_ipow(x, 2) + -4.76257e-05 *lens_ipow(y, 4) + 1.94318e-05 *lens_ipow(x, 4)*y*dy + -4.35754e-09 *lens_ipow(x, 2)*lens_ipow(y, 6) + -0.000480983 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -4.58209e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda + -2.9679e-07 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy*lambda + -0.000205678 *x*lens_ipow(y, 4)*lens_ipow(dx, 3)*lambda+0.0f;
const double dx14 =  + 0.000457857 *lens_ipow(y, 3) + -4.58209e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*dy + -1.48395e-07 *lens_ipow(x, 2)*lens_ipow(y, 5)*lens_ipow(dy, 2) + -0.000205678 *x*lens_ipow(y, 4)*lens_ipow(dx, 3)*dy+0.0f;
const double dx20 =  + -0.0315599  + -0.0346819 *lens_ipow(dy, 2) + -1.50935e-05 *lens_ipow(y, 2) + -0.00179976 *y*dy + -0.00301819 *x*dx*lambda + -4.95731e-05 *lens_ipow(x, 2)*lambda + 8.08402e-06 *lens_ipow(x, 2)*y*dy + 3.47551e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.11265e-06 *lens_ipow(y, 3)*dy + -0.00211411 *y*lens_ipow(dx, 2)*dy + 4.64987e-08 *lens_ipow(y, 4) + 2.18983e-07 *lens_ipow(x, 4) + 4.64932e-06 *x*lens_ipow(y, 2)*dx*lambda + -2.25371e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 3.95577e-08 *lens_ipow(x, 5)*dx*lambda + 0.00744614 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + -2.57381e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 3)+0.0f;
const double dx21 =  + -0.03921 *dx*dy + -3.0187e-05 *x*y + -0.00179976 *x*dy + -0.000703942 *y*dx + 2.69467e-06 *lens_ipow(x, 3)*dy + 2.31701e-07 *lens_ipow(x, 3)*y + 6.33794e-06 *x*lens_ipow(y, 2)*dy + -0.00211411 *x*lens_ipow(dx, 2)*dy + 1.85995e-07 *x*lens_ipow(y, 3) + 4.64932e-06 *lens_ipow(x, 2)*y*dx*lambda + -0.00830696 *y*dx*lens_ipow(dy, 4) + -1.50247e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 0.00372307 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + -1.28691e-07 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)+0.0f;
const double dx22 =  + -1.42801  + -0.03921 *y*dy + -0.708683 *lens_ipow(dy, 2) + -0.000351971 *lens_ipow(y, 2) + -0.00150909 *lens_ipow(x, 2)*lambda + 4.72642 *lens_ipow(dx, 2)*lambda + -0.00422823 *x*y*dx*dy + 2.32466e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -0.00415348 *lens_ipow(y, 2)*lens_ipow(dy, 4) + -1.50247e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 6.59296e-09 *lens_ipow(x, 6)*lambda + -29.4552 *lens_ipow(dx, 4)*lens_ipow(lambda, 4) + 0.0111692 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -1.93036e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2)+0.0f;
const double dx23 =  + -0.03921 *y*dx + -0.0693638 *x*dy + -1.41737 *dx*dy + -0.00179976 *x*y + 2.69467e-06 *lens_ipow(x, 3)*y + 2.11265e-06 *x*lens_ipow(y, 3) + -0.00211411 *x*y*lens_ipow(dx, 2) + -0.0166139 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 0.0111692 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx24 =  + -0.00150909 *lens_ipow(x, 2)*dx + 1.57547 *lens_ipow(dx, 3) + -1.65244e-05 *lens_ipow(x, 3) + 2.32466e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + 6.59296e-09 *lens_ipow(x, 6)*dx + -23.5642 *lens_ipow(dx, 5)*lens_ipow(lambda, 3)+0.0f;
const double dx30 =  + 0.0674778 *dx*dy + -0.000272704 *y*dx + 0.000947809 *x*dy + 9.69269e-08 *lens_ipow(x, 3)*y + 1.15675e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + 3.66861e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 6.3981e-10 *x*lens_ipow(y, 5) + 2.50305e-08 *x*lens_ipow(y, 4)*dy + 3.69828e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + 1.48886e-08 *lens_ipow(x, 4)*y*dx*lambda + 8.45591e-07 *lens_ipow(y, 4)*dx*lens_ipow(dy, 3) + 1.16858e-11 *lens_ipow(y, 7)*dx + 6.83395e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lambda+0.0f;
const double dx31 =  + -0.031682  + -0.00166826 *y*dy + -0.000272704 *x*dx + -1.85195e-05 *lens_ipow(y, 2)*lambda + 2.42317e-08 *lens_ipow(x, 4) + 8.11971e-10 *lens_ipow(y, 6) + 8.6756e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 3.66861e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -1.53316e-05 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 3.99644e-08 *lens_ipow(y, 5)*dy + 1.59953e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 5.00609e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -9.29643e-07 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda + 1.84914e-08 *lens_ipow(x, 4)*y*dy*lambda + 2.97772e-09 *lens_ipow(x, 5)*dx*lambda + 3.38236e-06 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + 8.18007e-11 *x*lens_ipow(y, 6)*dx + -0.000357018 *lens_ipow(y, 3)*lens_ipow(dx, 4)*dy*lambda + 4.55597e-06 *lens_ipow(x, 3)*y*dx*lens_ipow(dy, 3)*lambda+0.0f;
const double dx32 =  + 0.0674778 *x*dy + -0.000272704 *x*y + 4.37707 *dx*dy + 1.22287e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + -3.71857e-07 *lens_ipow(y, 5)*dx*lambda + 2.97772e-09 *lens_ipow(x, 5)*y*lambda + 8.45591e-07 *x*lens_ipow(y, 4)*lens_ipow(dy, 3) + 1.16858e-11 *x*lens_ipow(y, 7) + -0.000357018 *lens_ipow(y, 4)*lens_ipow(dx, 3)*dy*lambda + 2.27798e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx33 =  + -1.42523  + 2.34735 *lens_ipow(dy, 2) + 0.0674778 *x*dx + -0.000834132 *lens_ipow(y, 2) + 2.18853 *lens_ipow(dx, 2) + 0.000473905 *lens_ipow(x, 2) + -1.14987e-05 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 6.66074e-09 *lens_ipow(y, 6) + 1.25152e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 9.24569e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + 2.53677e-06 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + -8.92544e-05 *lens_ipow(y, 4)*lens_ipow(dx, 4)*lambda + 6.83395e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx34 =  + -6.17318e-06 *lens_ipow(y, 3) + -1.85928e-07 *lens_ipow(y, 5)*lens_ipow(dx, 2) + 9.24569e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy + 2.97772e-09 *lens_ipow(x, 5)*y*dx + -8.92544e-05 *lens_ipow(y, 4)*lens_ipow(dx, 4)*dy + 2.27798e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3)+0.0f;
const double dx40 =  + -4.71137e-06 *lens_ipow(x, 3) + -2.71582e-06 *x*lens_ipow(y, 2) + -0.000251987 *lens_ipow(y, 2)*dx*lambda + -0.000461273 *x*y*dy*lambda + -0.000792646 *lens_ipow(x, 2)*dx*lambda + -3.85264e-06 *x*lens_ipow(y, 2)*lambda + -0.465596 *lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -0.0227789 *y*dx*dy*lens_ipow(lambda, 2) + -0.0437419 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.223545 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -3.30824 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.0126868 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.000169173 *lens_ipow(x, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx41 =  + -0.000517384 *lens_ipow(y, 2)*dy + -0.00278639 *y*lens_ipow(dx, 2) + -0.0993797 *lens_ipow(dy, 3) + -0.0141776 *y*lens_ipow(dy, 2) + -5.2e-06 *lens_ipow(y, 3) + -2.71582e-06 *lens_ipow(x, 2)*y + -0.000503973 *x*y*dx*lambda + -0.000230636 *lens_ipow(x, 2)*dy*lambda + -3.85264e-06 *lens_ipow(x, 2)*y*lambda + -0.0227789 *x*dx*dy*lens_ipow(lambda, 2) + -0.280991 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -5.80778e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx42 =  + -0.00278639 *lens_ipow(y, 2)*dx + -0.000251987 *x*lens_ipow(y, 2)*lambda + -11.0879 *lens_ipow(dx, 3)*lambda + -0.000264215 *lens_ipow(x, 3)*lambda + -1.39679 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.0227789 *x*y*dy*lens_ipow(lambda, 2) + -0.0437419 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 2) + -0.561981 *y*dx*dy*lens_ipow(lambda, 2) + -0.223545 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -2.90389e-05 *lens_ipow(y, 4)*dx*lens_ipow(lambda, 3) + -9.92474 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.00422892 *lens_ipow(x, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx43 =  + -0.282829 *dy + -0.000172461 *lens_ipow(y, 3) + -0.298139 *y*lens_ipow(dy, 2) + -0.0141776 *lens_ipow(y, 2)*dy + -0.000230636 *lens_ipow(x, 2)*y*lambda + -0.0227789 *x*y*dx*lens_ipow(lambda, 2) + -0.280991 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.223545 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -6.61649 *x*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 3) + -0.00845784 *lens_ipow(x, 3)*dx*dy*lens_ipow(lambda, 3) + -8.45867e-05 *lens_ipow(x, 4)*dy*lens_ipow(lambda, 3)+0.0f;
const double dx44 =  + 0.0782943  + -0.000251987 *x*lens_ipow(y, 2)*dx + -0.000230636 *lens_ipow(x, 2)*y*dy + -2.77198 *lens_ipow(dx, 4) + -0.000264215 *lens_ipow(x, 3)*dx + -1.92632e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.931192 *x*lens_ipow(dx, 3)*lambda + -0.0455578 *x*y*dx*dy*lambda + -0.0437419 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -0.561981 *y*lens_ipow(dx, 2)*dy*lambda + -0.223545 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -4.35583e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -9.92474 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.0126868 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00012688 *lens_ipow(x, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
} break;
