case meyer_optik_goerlitz__primoplan__1936__58mm:
{
const double dx00 =  + 0.576039  + 0.00205605 *lens_ipow(x, 2) + 2.40303 *lens_ipow(dx, 2) + 0.739001 *lens_ipow(dy, 2) + 0.148964 *x*dx + 0.0484408 *y*dy + 0.0011795 *lens_ipow(y, 2)*lambda + -0.000244024 *lens_ipow(x, 2)*y*dy + -0.000484237 *lens_ipow(x, 3)*dx + -1.12592e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.000261117 *x*lens_ipow(y, 2)*dx + 0.182117 *x*lens_ipow(dx, 3) + -7.98964e-05 *lens_ipow(y, 3)*dy + 0.119697 *y*lens_ipow(dx, 2)*dy + -1.0245e-05 *lens_ipow(x, 4) + -3.43656e-06 *lens_ipow(y, 4)*lambda+0.0f;
const double dx01 =  + 1.49373 *dx*dy + 0.0484408 *x*dy + 0.002359 *x*y*lambda + 0.0848314 *y*dx*lambda + -8.13414e-05 *lens_ipow(x, 3)*dy + 0.117328 *y*dx*lens_ipow(dy, 2) + -7.50612e-06 *lens_ipow(x, 3)*y + -0.000261117 *lens_ipow(x, 2)*y*dx + -0.000239689 *x*lens_ipow(y, 2)*dy + 0.119697 *x*lens_ipow(dx, 2)*dy + -1.37463e-05 *x*lens_ipow(y, 3)*lambda + -0.000578233 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 3)+0.0f;
const double dx02 =  + 35.8897  + 4.80606 *x*dx + 1.49373 *y*dy + 65.2168 *lens_ipow(dx, 2) + 15.4411 *lens_ipow(dy, 2) + 0.0744818 *lens_ipow(x, 2) + 0.0424157 *lens_ipow(y, 2)*lambda + -0.000121059 *lens_ipow(x, 4) + 0.058664 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000130558 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.273175 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -157.582 *lens_ipow(dx, 4) + 0.239395 *x*y*dx*dy + -0.000144558 *lens_ipow(y, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx03 =  + 1.49373 *y*dx + 1.478 *x*dy + 30.8823 *dx*dy + 0.0484408 *x*y + -8.13414e-05 *lens_ipow(x, 3)*y + 0.117328 *lens_ipow(y, 2)*dx*dy + -7.98964e-05 *x*lens_ipow(y, 3) + 0.119697 *x*y*lens_ipow(dx, 2)+0.0f;
const double dx04 =  + 0.0011795 *x*lens_ipow(y, 2) + 0.0424157 *lens_ipow(y, 2)*dx + -3.43656e-06 *x*lens_ipow(y, 4) + -0.000433675 *lens_ipow(y, 4)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx10 =  + 1.15644 *dx*dy + 0.0379861 *y*dx + 0.0339373 *x*dy + 0.000642147 *x*y + -0.00033916 *x*lens_ipow(y, 2)*dy + -5.86267e-06 *x*lens_ipow(y, 3) + -0.00397019 *x*y*lens_ipow(dy, 2)*lambda + -8.53176e-05 *lens_ipow(y, 3)*dx*lambda + -3.14268e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.0123992 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -0.015491 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + -1.18179e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx+0.0f;
const double dx11 =  + 0.561308  + 0.04417 *lambda + 0.746089 *lens_ipow(dx, 2) + 2.17322 *lens_ipow(dy, 2) + 0.00148708 *lens_ipow(y, 2) + 0.134187 *y*dy + 0.0379861 *x*dx + 0.000321073 *lens_ipow(x, 2) + -0.00033916 *lens_ipow(x, 2)*y*dy + -8.79401e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00198509 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -0.000255953 *x*lens_ipow(y, 2)*dx*lambda + -4.2101e-08 *lens_ipow(y, 6) + -2.35701e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.0247983 *x*y*dx*lens_ipow(dy, 3) + -0.030982 *x*y*lens_ipow(dx, 3)*dy + -1.18179e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -5.28923e-05 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -3.08445e-06 *lens_ipow(y, 5)*dy+0.0f;
const double dx12 =  + 1.49218 *y*dx + 1.15644 *x*dy + 0.0379861 *x*y + 51.227 *dx*dy*lambda + -8.53176e-05 *x*lens_ipow(y, 3)*lambda + -0.0123992 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.046473 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -3.9393e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const double dx13 =  + 36.2185  + 48.8159 *lens_ipow(dy, 2) + 4.34643 *y*dy + 1.15644 *x*dx + 0.0670934 *lens_ipow(y, 2) + 0.0169686 *lens_ipow(x, 2) + 25.6135 *lens_ipow(dx, 2)*lambda + -0.00016958 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00397019 *lens_ipow(x, 2)*y*dy*lambda + -0.0371975 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -0.015491 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + -2.11569e-05 *lens_ipow(y, 5)*dy + -5.14074e-07 *lens_ipow(y, 6)+0.0f;
const double dx14 =  + 0.04417 *y + 25.6135 *lens_ipow(dx, 2)*dy + -0.00198509 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -8.53176e-05 *x*lens_ipow(y, 3)*dx+0.0f;
const double dx20 =  + -0.00679193  + 0.000168789 *lens_ipow(x, 2) + 0.15385 *lens_ipow(dx, 2) + 0.0525253 *lens_ipow(dy, 2) + 0.0112098 *x*dx + 0.00302633 *y*dy + 7.72769e-05 *lens_ipow(y, 2)*lambda + -2.47916e-05 *lens_ipow(x, 3)*dx + 0.011263 *x*lens_ipow(dx, 3) + -5.85374e-07 *lens_ipow(x, 4) + -7.36688e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + -1.06692e-05 *x*lens_ipow(y, 2)*dx*lambda + -0.00166253 *x*y*lens_ipow(dx, 3)*dy + -0.00813306 *x*y*dx*lens_ipow(dy, 5) + 0.000538798 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -4.30884e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + -7.57106e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + -2.73516e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx21 =  + 0.0886328 *dx*dy + 0.00302633 *x*dy + 0.00340903 *y*dx + 0.000154554 *x*y*lambda + -0.000147338 *x*y*lens_ipow(lambda, 3) + -1.06692e-05 *lens_ipow(x, 2)*y*dx*lambda + -0.000831263 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -0.00406653 *lens_ipow(x, 2)*dx*lens_ipow(dy, 5) + 0.000538798 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -4.30884e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + -4.54264e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*dy + -2.18812e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx22 =  + 1.37106  + -0.150105 *lambda + 0.307699 *x*dx + 0.0886328 *y*dy + 5.67482 *lens_ipow(dx, 2) + 2.12187 *lens_ipow(dy, 2) + 0.0056049 *lens_ipow(x, 2) + 0.00170452 *lens_ipow(y, 2) + -6.19791e-06 *lens_ipow(x, 4) + 0.0168945 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -5.33458e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -0.00249379 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -0.00406653 *lens_ipow(x, 2)*y*lens_ipow(dy, 5) + 0.000808197 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.07721e-10 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx23 =  + 0.0886328 *y*dx + 0.105051 *x*dy + 4.24374 *dx*dy + 0.00302633 *x*y + -0.000831263 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + -0.0203327 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 4) + 0.000538798 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + -1.51421e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx24 =  + -0.150105 *dx + 7.72769e-05 *x*lens_ipow(y, 2) + -0.000221007 *x*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -5.33458e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx+0.0f;
const double dx30 =  + 0.057263 *dx*dy + 0.00253277 *y*dx + 0.00149216 *x*dy + 6.20738e-05 *x*y*lambda + -1.22648e-05 *lens_ipow(x, 2)*y*dx + -0.223687 *lens_ipow(dx, 3)*dy + 0.000594566 *x*y*lens_ipow(dy, 2) + 0.0172543 *x*lens_ipow(dy, 3) + -1.27439e-09 *lens_ipow(x, 5)*y + -5.34867e-10 *x*lens_ipow(y, 5) + -4.21334e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const double dx31 =  + -0.00601762 *lambda + 0.0133623 *lens_ipow(dx, 2) + 0.0805154 *lens_ipow(dy, 2) + 0.00675541 *y*dy + 0.00253277 *x*dx + 9.39063e-05 *lens_ipow(y, 2)*lambda + 3.10369e-05 *lens_ipow(x, 2)*lambda + -4.08825e-06 *lens_ipow(x, 3)*dx + 0.000297283 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.0515767 *y*lens_ipow(dx, 2)*dy*lambda + 0.00149362 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -2.12399e-10 *lens_ipow(x, 6) + -1.33717e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.18291 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + -0.000646275 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -5.26667e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + -1.54363e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx32 =  + 0.0267246 *y*dx + 0.057263 *x*dy + 0.00253277 *x*y + -4.08825e-06 *lens_ipow(x, 3)*y + -0.671061 *x*lens_ipow(dx, 2)*dy + 0.0515767 *lens_ipow(y, 2)*dx*dy*lambda + 0.000995748 *lens_ipow(y, 3)*dx*lambda + 0.18291 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lambda + -0.000323137 *lens_ipow(y, 4)*dx*dy*lens_ipow(lambda, 2) + -6.17454e-06 *lens_ipow(y, 5)*dx*lens_ipow(lambda, 3)+0.0f;
const double dx33 =  + 1.55946  + -0.202926 *lambda + 0.161031 *y*dy + 0.057263 *x*dx + 0.00337771 *lens_ipow(y, 2) + 0.000746082 *lens_ipow(x, 2) + 21.5613 *lens_ipow(dy, 4) + -0.223687 *x*lens_ipow(dx, 3) + 0.000594566 *lens_ipow(x, 2)*y*dy + 0.0258814 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.0257883 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 0.274365 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.000161569 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx34 =  + -0.202926 *dy + -0.00601762 *y + 3.13021e-05 *lens_ipow(y, 3) + 3.10369e-05 *lens_ipow(x, 2)*y + 0.0257883 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 0.000497874 *lens_ipow(y, 3)*lens_ipow(dx, 2) + 0.0914548 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.000323137 *lens_ipow(y, 4)*lens_ipow(dx, 2)*dy*lambda + -9.26181e-06 *lens_ipow(y, 5)*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx40 =  + -0.000574632 *x + -0.0157052 *dx + -0.000114714 *lens_ipow(y, 2)*dx*lambda + -0.00811731 *y*dx*dy*lambda + -0.00206315 *x*y*lens_ipow(dy, 3) + -0.000150801 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -4.07872e-06 *x*lens_ipow(y, 3)*dy + -3.22245e-08 *x*lens_ipow(y, 4) + -9.20264e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + -4.25345e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + -2.61887e-06 *lens_ipow(y, 4)*lens_ipow(dx, 3) + -1.76692e-10 *lens_ipow(x, 5)*lens_ipow(y, 2) + 0.0314813 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -4.61366e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -5.76481e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + -0.0164267 *dy + -0.000512818 *y + 0.0170285 *lens_ipow(dy, 3) + -0.000229427 *x*y*dx*lambda + -0.00811731 *x*dx*dy*lambda + -0.00103157 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -0.000150801 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -6.11808e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -6.44491e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + -9.20264e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2) + -2.83564e-06 *lens_ipow(x, 3)*y*dx + -0.00205075 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lambda + -1.04755e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 3) + -5.88975e-11 *lens_ipow(x, 6)*y + -4.61366e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -2.74013e-07 *lens_ipow(y, 5)*lens_ipow(dx, 2)*lambda + -2.30592e-08 *lens_ipow(x, 5)*y*dx*lens_ipow(dy, 2)+0.0f;
const double dx42 =  + -0.564991 *dx + -0.0157052 *x + -0.000114714 *x*lens_ipow(y, 2)*lambda + -0.00811731 *x*y*dy*lambda + -9.20264e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + -1.41782e-06 *lens_ipow(x, 3)*lens_ipow(y, 2) + -0.00136717 *lens_ipow(y, 3)*dx*dy*lambda + -7.85661e-06 *x*lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.0314813 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.53789e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -9.13377e-08 *lens_ipow(y, 6)*dx*lambda + -1.15296e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dy, 2)+0.0f;
const double dx43 =  + -0.0164267 *y + -0.517942 *dy + 0.0510854 *y*lens_ipow(dy, 2) + -0.00811731 *x*y*dx*lambda + -0.00309472 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -0.000150801 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -2.03936e-06 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.000683584 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda + 0.0314813 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -1.53789e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -2.30592e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*dy+0.0f;
const double dx44 =  + 0.0540429  + -0.000114714 *x*lens_ipow(y, 2)*dx + -0.00811731 *x*y*dx*dy + -0.000683584 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 0.0314813 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -4.56689e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2)+0.0f;
} break;
