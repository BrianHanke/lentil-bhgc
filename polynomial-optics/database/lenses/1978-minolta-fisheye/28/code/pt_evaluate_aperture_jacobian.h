case minolta__fisheye__1978__28mm:
{
const double dx00 =  + 0.76074  + -0.133134 *lambda + 0.0913347 *lens_ipow(lambda, 2) + 4.37835 *lens_ipow(dx, 2) + 0.102415 *x*dx + 0.000520225 *lens_ipow(x, 2) + 5.9538 *lens_ipow(dy, 2)*lambda + 0.16575 *y*dy*lambda + 0.000949947 *lens_ipow(y, 2)*lambda + -10.8685 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.301757 *y*dy*lens_ipow(lambda, 2) + -0.00169969 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 6.52783 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.180696 *y*dy*lens_ipow(lambda, 3) + 0.00100043 *lens_ipow(y, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx01 =  + 3.315 *dx*dy + 0.0429659 *y*dx + 0.16575 *x*dy*lambda + 0.00189989 *x*y*lambda + -0.301757 *x*dy*lens_ipow(lambda, 2) + -0.00339937 *x*y*lens_ipow(lambda, 2) + 0.180696 *x*dy*lens_ipow(lambda, 3) + 0.00200086 *x*y*lens_ipow(lambda, 3)+0.0f;
const double dx02 =  + 65.9378  + -4.69765 *lambda + 111.311 *lens_ipow(dy, 2) + 333.726 *lens_ipow(dx, 2) + 3.315 *y*dy + 0.021483 *lens_ipow(y, 2) + 8.7567 *x*dx + 0.0512073 *lens_ipow(x, 2) + 3.0545 *lens_ipow(lambda, 3)+0.0f;
const double dx03 =  + 222.623 *dx*dy + 3.315 *y*dx + 11.9076 *x*dy*lambda + 0.16575 *x*y*lambda + -21.737 *x*dy*lens_ipow(lambda, 2) + -0.301757 *x*y*lens_ipow(lambda, 2) + 13.0557 *x*dy*lens_ipow(lambda, 3) + 0.180696 *x*y*lens_ipow(lambda, 3)+0.0f;
const double dx04 =  + -4.69765 *dx + -0.133134 *x + 0.182669 *x*lambda + 9.1635 *dx*lens_ipow(lambda, 2) + 5.9538 *x*lens_ipow(dy, 2) + 0.16575 *x*y*dy + 0.000949947 *x*lens_ipow(y, 2) + -21.737 *x*lens_ipow(dy, 2)*lambda + -0.603513 *x*y*dy*lambda + -0.00339937 *x*lens_ipow(y, 2)*lambda + 19.5835 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.542089 *x*y*dy*lens_ipow(lambda, 2) + 0.00300128 *x*lens_ipow(y, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx10 =  + 3.29932 *dx*dy + 0.0425361 *x*dy + 0.000348517 *x*y + 0.167621 *y*dx*lambda + 0.322193 *dx*lens_ipow(dy, 3) + -0.308168 *y*dx*lens_ipow(lambda, 2) + 0.00834017 *x*lens_ipow(dy, 3) + 0.185918 *y*dx*lens_ipow(lambda, 3)+0.0f;
const double dx11 =  + 0.760083  + -0.130819 *lambda + 0.0891919 *lens_ipow(lambda, 2) + 4.38218 *lens_ipow(dy, 2) + 0.102542 *y*dy + 0.000521279 *lens_ipow(y, 2) + 0.000174259 *lens_ipow(x, 2) + 5.34431 *lens_ipow(dx, 2)*lambda + 0.167621 *x*dx*lambda + -7.3717 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.308168 *x*dx*lens_ipow(lambda, 2) + 0.185918 *x*dx*lens_ipow(lambda, 3) + 3.97146 *lens_ipow(dx, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx12 =  + 222.655 *dx*dy + 3.29932 *x*dy + 10.6886 *y*dx*lambda + 0.167621 *x*y*lambda + -14.7434 *y*dx*lens_ipow(lambda, 2) + 0.322193 *x*lens_ipow(dy, 3) + -0.308168 *x*y*lens_ipow(lambda, 2) + 0.185918 *x*y*lens_ipow(lambda, 3) + 7.94292 *y*dx*lens_ipow(lambda, 4)+0.0f;
const double dx13 =  + 66.4563  + -7.53454 *lambda + 5.12406 *lens_ipow(lambda, 2) + 333.872 *lens_ipow(dy, 2) + 111.328 *lens_ipow(dx, 2) + 8.76437 *y*dy + 0.0512712 *lens_ipow(y, 2) + 3.29932 *x*dx + 0.021268 *lens_ipow(x, 2) + 0.966579 *x*dx*lens_ipow(dy, 2) + 0.0125102 *lens_ipow(x, 2)*lens_ipow(dy, 2)+0.0f;
const double dx14 =  + -7.53454 *dy + -0.130819 *y + 10.2481 *dy*lambda + 0.178384 *y*lambda + 5.34431 *y*lens_ipow(dx, 2) + 0.167621 *x*y*dx + -14.7434 *y*lens_ipow(dx, 2)*lambda + -0.616336 *x*y*dx*lambda + 0.557755 *x*y*dx*lens_ipow(lambda, 2) + 15.8858 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx20 =  + -0.0204242  + -0.0068016 *lambda + 0.0044704 *lens_ipow(lambda, 2) + 0.016849 *lens_ipow(dy, 2) + 0.0368385 *lens_ipow(dx, 2) + 0.000893973 *y*dy + 4.64716e-06 *lens_ipow(y, 2) + 0.00220885 *x*dx + 1.3911e-05 *lens_ipow(x, 2) + 0.0176663 *lens_ipow(dy, 4) + -0.00617787 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -3.85059e-11 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda+0.0f;
const double dx21 =  + 0.0209847 *dx*dy + 0.000462366 *y*dx + 0.000893973 *x*dy + 9.29433e-06 *x*y + -0.020381 *dx*lens_ipow(dy, 3) + -0.00294047 *y*lens_ipow(dx, 3)*lambda + -0.214948 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + -1.54023e-11 *lens_ipow(x, 5)*y*lambda+0.0f;
const double dx22 =  + -0.477124  + -0.460016 *lambda + 0.306345 *lens_ipow(lambda, 2) + -1.36997 *lens_ipow(dy, 2) + -4.02825 *lens_ipow(dx, 2) + 0.0209847 *y*dy + 0.000231183 *lens_ipow(y, 2) + 0.073677 *x*dx + 0.00110442 *lens_ipow(x, 2) + -0.020381 *y*lens_ipow(dy, 3) + -0.0044107 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.644844 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.00308894 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx23 =  + -2.73994 *dx*dy + 0.0209847 *y*dx + 0.033698 *x*dy + 0.000893973 *x*y + -0.061143 *y*dx*lens_ipow(dy, 2) + 0.070665 *x*lens_ipow(dy, 3) + -0.214948 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -0.00617787 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 3)+0.0f;
const double dx24 =  + -0.460016 *dx + -0.0068016 *x + 0.612691 *dx*lambda + 0.00894081 *x*lambda + -0.00147023 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -0.429896 *y*lens_ipow(dx, 3)*dy*lambda + -0.00926681 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -7.70117e-12 *lens_ipow(x, 5)*lens_ipow(y, 2)+0.0f;
const double dx30 =  + 0.0231768 *dx*dy + 0.000933759 *y*dx + 0.000518829 *x*dy + 1.02709e-05 *x*y + 0.00486326 *y*dx*lens_ipow(dy, 2)*lambda + -0.00412632 *x*lens_ipow(dy, 3)*lambda + -0.185061 *dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.000120673 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -1.57389e-08 *x*lens_ipow(y, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx31 =  + -0.0204441  + -0.00705896 *lambda + 0.004854 *lens_ipow(lambda, 2) + 0.0402509 *lens_ipow(dy, 2) + 0.0200021 *lens_ipow(dx, 2) + 0.00227976 *y*dy + 1.42703e-05 *lens_ipow(y, 2) + 0.000933759 *x*dx + 5.13545e-06 *lens_ipow(x, 2) + 0.00486326 *x*dx*lens_ipow(dy, 2)*lambda + 0.000241345 *x*y*dx*dy*lens_ipow(lambda, 2) + -2.36084e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx32 =  + -2.3511 *dx*dy + 0.0400042 *y*dx + 0.0231768 *x*dy + 0.000933759 *x*y + -5.68043 *dx*lens_ipow(dy, 3) + 0.00486326 *x*y*lens_ipow(dy, 2)*lambda + -0.185061 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.000120673 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx33 =  + -0.47896  + -0.471637 *lambda + 0.322065 *lens_ipow(lambda, 2) + -3.70519 *lens_ipow(dy, 2) + -1.17555 *lens_ipow(dx, 2) + 0.0805018 *y*dy + 0.00113988 *lens_ipow(y, 2) + 0.0231768 *x*dx + 0.000259414 *lens_ipow(x, 2) + -8.52065 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00972653 *x*y*dx*dy*lambda + -0.00618948 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -0.555184 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.000120673 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx34 =  + -0.471637 *dy + -0.00705896 *y + 0.644131 *dy*lambda + 0.009708 *y*lambda + 0.00486326 *x*y*dx*lens_ipow(dy, 2) + -0.00206316 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -0.370123 *x*dx*lens_ipow(dy, 3)*lambda + 0.000241345 *x*lens_ipow(y, 2)*dx*dy*lambda + -1.57389e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*lambda+0.0f;
const double dx40 =  + -0.183314 *dx*lens_ipow(dy, 2) + -0.281211 *lens_ipow(dx, 3) + -0.00292389 *y*dx*dy + -7.58854e-06 *lens_ipow(y, 2)*dx + -0.00158452 *x*lens_ipow(dy, 2) + -0.00864747 *x*lens_ipow(dx, 2) + -2.08281e-05 *x*y*dy + -9.04985e-05 *lens_ipow(x, 2)*dx + -3.58297e-07 *lens_ipow(x, 3)+0.0f;
const double dx41 =  + -0.0032676 *dy + -4.04677e-05 *y + -0.168967 *lens_ipow(dx, 2)*dy + -0.00115897 *y*lens_ipow(dx, 2) + -0.00292389 *x*dx*dy + -1.51771e-05 *x*y*dx + -1.04141e-05 *lens_ipow(x, 2)*dy + -1.97901 *lens_ipow(dy, 5) + -0.0363837 *y*lens_ipow(dy, 4)+0.0f;
const double dx42 =  + -19.6174 *dx*lens_ipow(dy, 2) + -27.3363 *lens_ipow(dx, 3) + -0.337934 *y*dx*dy + -0.00115897 *lens_ipow(y, 2)*dx + -0.183314 *x*lens_ipow(dy, 2) + -0.843634 *x*lens_ipow(dx, 2) + -0.00292389 *x*y*dy + -7.58854e-06 *x*lens_ipow(y, 2) + -0.00864747 *lens_ipow(x, 2)*dx + -3.01662e-05 *lens_ipow(x, 3)+0.0f;
const double dx43 =  + -0.262053 *dy + -0.0032676 *y + -19.6174 *lens_ipow(dx, 2)*dy + -0.168967 *y*lens_ipow(dx, 2) + -0.366628 *x*dx*dy + -0.00292389 *x*y*dx + -0.00158452 *lens_ipow(x, 2)*dy + -1.04141e-05 *lens_ipow(x, 2)*y + -330.758 *lens_ipow(dy, 5) + -9.89506 *y*lens_ipow(dy, 4) + -0.0727673 *lens_ipow(y, 2)*lens_ipow(dy, 3)+0.0f;
const double dx44 =  + 0.224075  + -0.307007 *lambda+0.0f;
} break;
