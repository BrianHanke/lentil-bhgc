case minolta__fisheye__1978__28mm:
{
const double dx00 =  + -0.381626  + -0.248894 *lambda + 0.184291 *lens_ipow(lambda, 2) + 0.412994 *lens_ipow(dy, 2) + 0.0130952 *y*dy + 8.1243e-05 *lens_ipow(y, 2) + 2.41294 *lens_ipow(dx, 2)*lambda + 0.128078 *x*dx*lambda + 0.000762693 *lens_ipow(x, 2)*lambda + -0.00100373 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + -4.03276 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.495169 *x*dx*lens_ipow(lambda, 4) + 0.40733 *x*dx*lens_ipow(lambda, 5)+0.0f;
const double dx01 =  + 0.488427 *dx*dy + 0.0177608 *y*dx + 0.0130952 *x*dy + 0.000162486 *x*y + 10.4037 *lens_ipow(dx, 5)*dy*lambda + 0.395636 *y*lens_ipow(dx, 5)*lambda+0.0f;
const double dx02 =  + 27.7218  + 1.11455 *lambda + 6.40713 *lens_ipow(dy, 2) + 0.488427 *y*dy + 0.00888042 *lens_ipow(y, 2) + 4.82588 *x*dx*lambda + 0.064039 *lens_ipow(x, 2)*lambda + 574.149 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -811.437 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -8.06553 *x*dx*lens_ipow(lambda, 4) + -0.247584 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + 52.0183 *y*lens_ipow(dx, 4)*dy*lambda + 0.989091 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lambda + 0.203665 *lens_ipow(x, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx03 =  + 12.8143 *dx*dy + 0.488427 *y*dx + 0.825988 *x*dy + 0.0130952 *x*y + 10.4037 *y*lens_ipow(dx, 5)*lambda+0.0f;
const double dx04 =  + 1.11455 *dx + -0.248894 *x + 0.368582 *x*lambda + 2.41294 *x*lens_ipow(dx, 2) + 0.064039 *lens_ipow(x, 2)*dx + 0.000254231 *lens_ipow(x, 3) + 574.149 *lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -0.00100373 *lens_ipow(x, 3)*lens_ipow(lambda, 2) + -1081.92 *lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -16.1311 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.990338 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 3) + 10.4037 *y*lens_ipow(dx, 5)*dy + 0.197818 *lens_ipow(y, 2)*lens_ipow(dx, 5) + 1.01833 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 4)+0.0f;
const double dx10 =  + 0.461555 *dx*dy + 0.0130355 *y*dx + 0.0171198 *x*dy + 0.000162807 *x*y + 1.76142 *dx*lens_ipow(dy, 3)*lambda + 0.0549099 *x*lens_ipow(dy, 3)*lambda+0.0f;
const double dx11 =  + -0.377339  + -0.208813 *lambda + 0.419395 *lens_ipow(dx, 2) + 0.0130355 *x*dx + 8.14035e-05 *lens_ipow(x, 2) + 0.170939 *lens_ipow(lambda, 3) + 9.33143 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.448041 *y*dy*lens_ipow(lambda, 2) + 0.0161336 *y*lens_ipow(dx, 2)*dy + -11.0729 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.531511 *y*dy*lens_ipow(lambda, 3) + 0.00612801 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + -0.008123 *lens_ipow(y, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx12 =  + 11.4775 *dx*dy + 0.83879 *y*dx + 0.461555 *x*dy + 0.0130355 *x*y + 0.0161336 *lens_ipow(y, 2)*dx*dy + 1.76142 *x*lens_ipow(dy, 3)*lambda+0.0f;
const double dx13 =  + 28.2551  + 5.73877 *lens_ipow(dx, 2) + 0.461555 *x*dx + 0.00855988 *lens_ipow(x, 2) + 114.084 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 18.6629 *y*dy*lens_ipow(lambda, 2) + 0.224021 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.00806679 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -22.1458 *y*dy*lens_ipow(lambda, 3) + -0.265756 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 5.28427 *x*dx*lens_ipow(dy, 2)*lambda + 0.0823648 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 3.29809 *lens_ipow(lambda, 7) + -264.202 *lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx14 =  + -0.208813 *y + 0.512816 *y*lens_ipow(lambda, 2) + 76.0557 *lens_ipow(dy, 3)*lambda + 18.6629 *y*lens_ipow(dy, 2)*lambda + 0.448041 *lens_ipow(y, 2)*dy*lambda + -33.2187 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.797266 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 0.00612801 *lens_ipow(y, 3)*lens_ipow(lambda, 2) + 1.76142 *x*dx*lens_ipow(dy, 3) + 0.0274549 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -0.0108307 *lens_ipow(y, 3)*lens_ipow(lambda, 3) + 23.0866 *dy*lens_ipow(lambda, 6) + -440.336 *lens_ipow(dy, 3)*lens_ipow(lambda, 4)+0.0f;
const double dx20 =  + -0.0315891  + 0.000532788 *lambda + 4.47098e-06 *lens_ipow(y, 2) + 0.00723584 *lens_ipow(dy, 2)*lambda + 0.0363482 *lens_ipow(dx, 2)*lambda + 0.000122196 *y*dy*lambda + 0.00112197 *x*dx*lambda + 4.2765e-05 *lens_ipow(x, 2)*lambda + -0.00251738 *y*lens_ipow(dx, 2)*dy + 0.00473266 *x*dx*lens_ipow(dy, 2) + 6.40039e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 6.22382e-07 *lens_ipow(x, 2)*y*dy + -8.37235e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + -0.00054451 *x*dx*lens_ipow(lambda, 4) + 5.44567e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx21 =  + 0.000102411 *y*dx + 8.94196e-06 *x*y + 0.000401664 *y*dx*lambda + 0.000122196 *x*dy*lambda + 0.00200986 *y*lens_ipow(dx, 3) + -0.00251738 *x*lens_ipow(dx, 2)*dy + 2.07461e-07 *lens_ipow(x, 3)*dy + 0.0427969 *dx*dy*lens_ipow(lambda, 3)+0.0f;
const double dx22 =  + -0.23344  + 5.12056e-05 *lens_ipow(y, 2) + 3.14261 *lens_ipow(dx, 2)*lambda + 0.000200832 *lens_ipow(y, 2)*lambda + 0.0726964 *x*dx*lambda + 0.000560984 *lens_ipow(x, 2)*lambda + 0.00301479 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00503476 *x*y*dx*dy + 0.00236633 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.8501 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.0427969 *y*dy*lens_ipow(lambda, 3) + -0.000272255 *lens_ipow(x, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx23 =  + 0.0144717 *x*dy*lambda + 0.000122196 *x*y*lambda + -0.00251738 *x*y*lens_ipow(dx, 2) + 0.00473266 *lens_ipow(x, 2)*dx*dy + 4.26693e-05 *lens_ipow(x, 3)*dy + 2.07461e-07 *lens_ipow(x, 3)*y + 3.7002 *dx*dy*lens_ipow(lambda, 3) + 0.0427969 *y*dx*lens_ipow(lambda, 3)+0.0f;
const double dx24 =  + 0.000532788 *x + 1.04754 *lens_ipow(dx, 3) + 0.000200832 *lens_ipow(y, 2)*dx + 0.00723584 *x*lens_ipow(dy, 2) + 0.0363482 *x*lens_ipow(dx, 2) + 0.000122196 *x*y*dy + 0.000560984 *lens_ipow(x, 2)*dx + 1.4255e-05 *lens_ipow(x, 3) + 5.5503 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.128391 *y*dx*dy*lens_ipow(lambda, 2) + -8.37235e-05 *lens_ipow(x, 3)*lens_ipow(lambda, 2) + -0.00108902 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 3) + 7.26089e-05 *lens_ipow(x, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx30 =  + 0.0162727 *dx*dy + 8.70047e-05 *y*dx + 8.73462e-06 *x*y + 0.00118187 *x*dy*lambda + -0.00120023 *x*dy*lens_ipow(lambda, 2) + 2.43206e-06 *x*lens_ipow(y, 2)*dy + 9.98996e-09 *x*lens_ipow(y, 3) + 0.160929 *dx*lens_ipow(dy, 3)*lambda + 0.00232056 *y*dx*lens_ipow(dy, 2)*lambda + 0.0222534 *x*lens_ipow(dy, 3)*lambda + 0.00075047 *x*y*lens_ipow(dy, 2)*lambda + -0.0161077 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.0006362 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx31 =  + -0.0312466  + 0.00665683 *lens_ipow(dx, 2) + 8.70047e-05 *x*dx + 4.36731e-06 *lens_ipow(x, 2) + 3.0256e-05 *lens_ipow(y, 2)*lambda + -1.21581e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 2.43206e-06 *lens_ipow(x, 2)*y*dy + 1.49849e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0720382 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.00206553 *y*dy*lens_ipow(lambda, 3) + 0.00232056 *x*dx*lens_ipow(dy, 2)*lambda + 0.000375235 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -0.0003181 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx32 =  + 1.43864 *dx*dy + 0.0133137 *y*dx + 0.0162727 *x*dy + 8.70047e-05 *x*y + 0.160929 *x*lens_ipow(dy, 3)*lambda + 0.00232056 *x*y*lens_ipow(dy, 2)*lambda+0.0f;
const double dx33 =  + -0.231761  + 0.719318 *lens_ipow(dx, 2) + 0.0162727 *x*dx + 0.000590934 *lens_ipow(x, 2)*lambda + 4.00188 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000600117 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 1.21603e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.144076 *y*dy*lens_ipow(lambda, 3) + 0.00103276 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 0.482787 *x*dx*lens_ipow(dy, 2)*lambda + 0.00464112 *x*y*dx*dy*lambda + 0.0333802 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 0.00075047 *lens_ipow(x, 2)*y*dy*lambda + -0.0241615 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.0006362 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 2)+0.0f;
const double dx34 =  + 1.00853e-05 *lens_ipow(y, 3) + 0.000590934 *lens_ipow(x, 2)*dy + 2.66792 *lens_ipow(dy, 3)*lambda + -8.10541e-06 *lens_ipow(y, 3)*lambda + -0.00120023 *lens_ipow(x, 2)*dy*lambda + 0.216115 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.00309829 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 0.160929 *x*dx*lens_ipow(dy, 3) + 0.00232056 *x*y*dx*lens_ipow(dy, 2) + 0.0111267 *lens_ipow(x, 2)*lens_ipow(dy, 3) + 0.000375235 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -0.0161077 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda + -0.0006362 *lens_ipow(x, 2)*y*lens_ipow(dy, 2)*lambda+0.0f;
const double dx40 =  + -0.00405603 *dx + -4.99552e-05 *x + -0.0785865 *dx*lens_ipow(dy, 2) + -0.104404 *lens_ipow(dx, 3) + 8.12739e-06 *lens_ipow(y, 2)*dx + -0.000704766 *x*lens_ipow(dy, 2) + -0.00158928 *x*lens_ipow(dx, 2)+0.0f;
const double dx41 =  + -0.0737708 *lens_ipow(dx, 2)*dy + 1.62548e-05 *x*y*dx + -15.9793 *lens_ipow(dy, 5) + -0.849694 *y*lens_ipow(dy, 4) + -0.0174839 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.000176148 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -9.70129e-07 *lens_ipow(y, 4)*dy + -2.92913e-09 *lens_ipow(y, 5)+0.0f;
const double dx42 =  + -0.265398 *dx + -0.00405603 *x + -13.8582 *dx*lens_ipow(dy, 2) + -15.1609 *lens_ipow(dx, 3) + -0.147542 *y*dx*dy + -0.0785865 *x*lens_ipow(dy, 2) + -0.313211 *x*lens_ipow(dx, 2) + 8.12739e-06 *x*lens_ipow(y, 2) + -0.00158928 *lens_ipow(x, 2)*dx+0.0f;
const double dx43 =  + -13.8582 *lens_ipow(dx, 2)*dy + -0.0737708 *y*lens_ipow(dx, 2) + -0.157173 *x*dx*dy + -0.000704766 *lens_ipow(x, 2)*dy + -1479.26 *lens_ipow(dy, 5) + -79.8964 *y*lens_ipow(dy, 4) + -1.69939 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.0174839 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -8.80738e-05 *lens_ipow(y, 4)*dy + -1.94026e-07 *lens_ipow(y, 5)+0.0f;
const double dx44 =  + 2.44404  + -11.0965 *lambda + 17.6999 *lens_ipow(lambda, 2) + -9.67672 *lens_ipow(lambda, 3)+0.0f;
} break;
