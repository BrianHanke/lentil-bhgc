case minolta__fisheye__1978__16mm:
{
const double dx00 =  + 0.759009  + -0.126328 *lambda + 0.0534087 *y*dy + 0.178088 *x*dx + 0.0854813 *lens_ipow(lambda, 2) + 0.0005434 *lens_ipow(y, 2) + 0.00157355 *lens_ipow(x, 2) + 1.09803 *lens_ipow(dy, 2) + 4.35379 *lens_ipow(dx, 2) + -7.71222e-08 *lens_ipow(y, 4) + 0.00843765 *y*lens_ipow(dy, 3) + 0.00036693 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -8.10063e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + -2.56448e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx01 =  + 3.3061 *dx*dy + 0.0534087 *x*dy + 0.0010868 *x*y + 0.0752217 *y*dx + -2.7511e-05 *lens_ipow(y, 3)*dx + -3.08489e-07 *x*lens_ipow(y, 3) + 0.122007 *y*dx*lens_ipow(dy, 2) + 2.98404 *dx*lens_ipow(dy, 3) + 0.00843765 *x*lens_ipow(dy, 3) + 0.000733861 *x*y*lens_ipow(dy, 2) + 0.639147 *lens_ipow(dx, 3)*dy*lambda + 0.0186164 *y*lens_ipow(dx, 3)*lambda + -8.10063e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + -2.05158e-12 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx02 =  + 37.6685  + -2.62285 *lambda + 3.3061 *y*dy + 0.0890442 *lens_ipow(x, 2) + 189.395 *lens_ipow(dx, 2) + 63.1171 *lens_ipow(dy, 2) + 8.70759 *x*dx + 0.0376109 *lens_ipow(y, 2) + 1.66962 *lens_ipow(lambda, 3) + -6.87775e-06 *lens_ipow(y, 4) + 41.8824 *lens_ipow(dy, 4) + 0.0610037 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 2.98404 *y*lens_ipow(dy, 3) + 1.91744 *y*lens_ipow(dx, 2)*dy*lambda + 0.0279246 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 38.0956 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -2.02516e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx03 =  + 3.3061 *y*dx + 0.0534087 *x*y + 126.234 *dx*dy + 2.19606 *x*dy + 167.529 *dx*lens_ipow(dy, 3) + 0.122007 *lens_ipow(y, 2)*dx*dy + 8.95211 *y*dx*lens_ipow(dy, 2) + 0.025313 *x*y*lens_ipow(dy, 2) + 0.000733861 *x*lens_ipow(y, 2)*dy + 0.639147 *y*lens_ipow(dx, 3)*lambda + 25.3971 *lens_ipow(dx, 3)*dy*lambda+0.0f;
const double dx04 =  + -0.126328 *x + -2.62285 *dx + 0.170963 *x*lambda + 5.00885 *dx*lens_ipow(lambda, 2) + 0.639147 *y*lens_ipow(dx, 3)*dy + 0.0093082 *lens_ipow(y, 2)*lens_ipow(dx, 3) + 12.6985 *lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx10 =  + 3.20535 *dx*dy + 0.0518898 *y*dx + 0.0010449 *x*y + 0.0723893 *x*dy + 0.174097 *x*lens_ipow(dx, 2)*dy + 3.96772 *lens_ipow(dx, 3)*dy + 0.575586 *dx*lens_ipow(dy, 3) + 0.0167127 *x*lens_ipow(dy, 3) + 0.00179282 *lens_ipow(x, 2)*dx*dy + 7.34058e-09 *lens_ipow(y, 5)*dx*lambda + 0.000132682 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + -3.24862e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy*lambda + -5.34545e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)*lambda+0.0f;
const double dx11 =  + 0.758933  + -0.126325 *lambda + 1.07499 *lens_ipow(dx, 2) + 0.178255 *y*dy + 4.35648 *lens_ipow(dy, 2) + 0.0518898 *x*dx + 0.0859262 *lens_ipow(lambda, 2) + 0.000522451 *lens_ipow(x, 2) + 0.00157776 *lens_ipow(y, 2) + 3.67029e-08 *x*lens_ipow(y, 4)*dx*lambda + 1.1674e-05 *lens_ipow(y, 4)*lens_ipow(dx, 4)*lambda + 0.000398047 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + -3.24862e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy*lambda + -6.68181e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda+0.0f;
const double dx12 =  + 2.14999 *y*dx + 3.20535 *x*dy + 0.0518898 *x*y + 122.824 *dx*dy + 0.174097 *lens_ipow(x, 2)*dx*dy + 11.9032 *x*lens_ipow(dx, 2)*dy + 18.8975 *dx*lens_ipow(dy, 3) + 0.575586 *x*lens_ipow(dy, 3) + 0.000597607 *lens_ipow(x, 3)*dy + 235.762 *lens_ipow(dx, 3)*dy + 7.34058e-09 *x*lens_ipow(y, 5)*lambda + 9.33924e-06 *lens_ipow(y, 5)*lens_ipow(dx, 3)*lambda + 0.000398047 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx13 =  + 37.6595  + -2.58853 *lambda + 0.0891274 *lens_ipow(y, 2) + 8.71295 *y*dy + 3.20535 *x*dx + 61.4121 *lens_ipow(dx, 2) + 0.0361946 *lens_ipow(x, 2) + 189.424 *lens_ipow(dy, 2) + 1.67249 *lens_ipow(lambda, 3) + 0.0870487 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 3.96772 *x*lens_ipow(dx, 3) + 28.3463 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.72676 *x*dx*lens_ipow(dy, 2) + 0.025069 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.000597607 *lens_ipow(x, 3)*dx + 58.9404 *lens_ipow(dx, 4) + 0.000265365 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*dy*lambda + -8.12154e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda+0.0f;
const double dx14 =  + -2.58853 *dy + -0.126325 *y + 0.171852 *y*lambda + 5.01746 *dy*lens_ipow(lambda, 2) + 7.34058e-09 *x*lens_ipow(y, 5)*dx + 2.33481e-06 *lens_ipow(y, 5)*lens_ipow(dx, 4) + 0.000132682 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -8.12154e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)*dy + -1.33636e-12 *lens_ipow(x, 4)*lens_ipow(y, 5)+0.0f;
const double dx20 =  + -0.0381291  + -0.00325389 *lambda + 0.00290472 *y*dy + 0.00695342 *x*dx + 2.36465e-05 *lens_ipow(y, 2) + 7.17118e-05 *lens_ipow(x, 2) + 0.0405608 *lens_ipow(dy, 2) + 0.0769936 *lens_ipow(dx, 2) + -0.00289385 *lens_ipow(y, 2)*lens_ipow(dx, 4) + 8.0955e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -4.00963e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 1.35529e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + -9.76549e-09 *x*lens_ipow(y, 4)*dx + -0.0201436 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 2.12652e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 0.0179605 *y*lens_ipow(dx, 4)*dy + -1.39425e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 3) + -3.33012e-10 *lens_ipow(x, 6)*lambda + 1.06234e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.000729123 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx21 =  + 0.0409161 *dx*dy + 0.00290472 *x*dy + 4.7293e-05 *x*y + 0.00130724 *y*dx + -0.118385 *y*lens_ipow(dx, 5) + -0.00578769 *x*y*lens_ipow(dx, 4) + 5.397e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + -5.34617e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 5.42116e-10 *lens_ipow(x, 5)*y + -1.9531e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -0.239949 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 1.06326e-07 *lens_ipow(x, 4)*y*dx + 0.0179605 *x*lens_ipow(dx, 4)*dy + -4.64749e-06 *lens_ipow(x, 3)*lens_ipow(dy, 3)+0.0f;
const double dx22 =  + -0.569545  + -0.127254 *lambda + 0.0409161 *y*dy + 0.00347671 *lens_ipow(x, 2) + -3.19276 *lens_ipow(dx, 2) + -1.02167 *lens_ipow(dy, 2) + 0.153987 *x*dx + 0.000653619 *lens_ipow(y, 2) + -0.295963 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -0.0115754 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + 5.397e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -4.88275e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -0.0302153 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.719847 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 5.31631e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.071842 *x*y*lens_ipow(dx, 3)*dy + 4.24937e-07 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 2) + -0.000972164 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx23 =  + 0.0409161 *y*dx + 0.00290472 *x*y + -2.04335 *dx*dy + 0.0811215 *x*dy + -0.0201436 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -0.719847 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.0179605 *x*y*lens_ipow(dx, 4) + -1.39425e-05 *lens_ipow(x, 3)*y*lens_ipow(dy, 2)+0.0f;
const double dx24 =  + -0.00325389 *x + -0.127254 *dx + -4.75732e-11 *lens_ipow(x, 7) + 4.24937e-07 *lens_ipow(x, 5)*lens_ipow(dx, 2)*lambda + -0.000729123 *lens_ipow(x, 3)*lens_ipow(dx, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx30 =  + 0.0464106 *dx*dy + 0.0029632 *y*dx + 4.75181e-05 *x*y + 0.00140334 *x*dy + -0.0298889 *lens_ipow(dx, 3)*dy + -0.134006 *dx*lens_ipow(dy, 3) + -0.000779137 *y*lens_ipow(dx, 3) + -0.00496526 *x*lens_ipow(dy, 3) + 1.09635e-07 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + -8.82875e-11 *x*lens_ipow(y, 5) + -2.86787e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 9.58771e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dy, 2)+0.0f;
const double dx31 =  + -0.0378894  + -0.00331425 *lambda + 0.0377427 *lens_ipow(dx, 2) + 0.00533456 *y*dy + 0.0448751 *lens_ipow(dy, 2) + 0.0029632 *x*dx + 2.37591e-05 *lens_ipow(x, 2) + 5.04719e-05 *lens_ipow(y, 2) + -0.000779137 *x*lens_ipow(dx, 3) + -0.00318862 *y*lens_ipow(dx, 2)*dy + 0.000163885 *lens_ipow(y, 3)*dy*lambda + 0.00882168 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 1.0034e-06 *lens_ipow(y, 4)*lambda + 0.994959 *lens_ipow(dy, 4)*lambda + 0.179255 *y*lens_ipow(dy, 3)*lambda + 1.64452e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.20719e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + -2.1509e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 7.19078e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dy, 2)+0.0f;
const double dx32 =  + 0.0754853 *y*dx + 0.0464106 *x*dy + 0.0029632 *x*y + -2.16204 *dx*dy + -0.0896666 *x*lens_ipow(dx, 2)*dy + -0.134006 *x*lens_ipow(dy, 3) + -0.00233741 *x*y*lens_ipow(dx, 2) + -0.00318862 *lens_ipow(y, 2)*dx*dy + 1.09635e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx+0.0f;
const double dx33 =  + -0.561379  + -0.126194 *lambda + 0.00266728 *lens_ipow(y, 2) + 0.0897502 *y*dy + 0.0464106 *x*dx + -1.08102 *lens_ipow(dx, 2) + 0.000701671 *lens_ipow(x, 2) + -4.43977 *lens_ipow(dy, 2) + -0.0298889 *x*lens_ipow(dx, 3) + -0.402017 *x*dx*lens_ipow(dy, 2) + -0.00159431 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0074479 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 4.09711e-05 *lens_ipow(y, 4)*lambda + 0.00588112 *lens_ipow(y, 3)*dy*lambda + 3.97984 *y*lens_ipow(dy, 3)*lambda + 0.268882 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 4.79386e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy+0.0f;
const double dx34 =  + -0.126194 *dy + -0.00331425 *y + 4.09711e-05 *lens_ipow(y, 4)*dy + 0.00294056 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 2.00679e-07 *lens_ipow(y, 5) + 0.994959 *y*lens_ipow(dy, 4) + 0.0896274 *lens_ipow(y, 2)*lens_ipow(dy, 3)+0.0f;
const double dx40 =  + -0.00269778 *dx + -4.15388e-05 *x + -0.317365 *lens_ipow(dx, 3) + -2.38671e-07 *x*lens_ipow(y, 2) + -0.0169626 *x*lens_ipow(dx, 2) + -0.000309667 *lens_ipow(x, 2)*dx + -2.01184e-06 *lens_ipow(x, 3) + 0.000256292 *y*dx*dy + -0.000206787 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 4.6536e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + 0.2157 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx41 =  + -0.00662356 *dy + -0.000117526 *y + -2.38671e-07 *lens_ipow(x, 2)*y + 0.000256292 *x*dx*dy + -0.0354373 *y*lens_ipow(dy, 4) + -1.28309 *lens_ipow(dy, 5) + -0.693263 *lens_ipow(dy, 7) + -0.000206787 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00501728 *lens_ipow(y, 2)*lens_ipow(dy, 5) + 0.000127547 *lens_ipow(y, 3)*lens_ipow(dy, 4) + 4.6536e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + 0.2157 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx42 =  + -0.00269778 *x + -0.162149 *dx + -17.9712 *lens_ipow(dx, 3) + -0.952094 *x*lens_ipow(dx, 2) + -0.282444 *dx*lens_ipow(dy, 2) + -0.0169626 *lens_ipow(x, 2)*dx + -0.000103222 *lens_ipow(x, 3) + 0.000256292 *x*y*dy + -0.000206787 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 1.5512e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -575.456 *lens_ipow(dx, 3)*lens_ipow(dy, 4) + 0.647099 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const double dx43 =  + -0.00662356 *y + -0.362458 *dy + -0.282444 *lens_ipow(dx, 2)*dy + 0.000256292 *x*y*dx + -141.531 *lens_ipow(dy, 5) + -0.0708747 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -6.41544 *y*lens_ipow(dy, 4) + -4.85284 *y*lens_ipow(dy, 6) + -0.000206787 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 0.00836213 *lens_ipow(y, 3)*lens_ipow(dy, 4) + 0.000127547 *lens_ipow(y, 4)*lens_ipow(dy, 3) + 1.5512e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -575.456 *lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.647099 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx44 =  + 0.562539  + -1.5606 *lambda + 1.14225 *lens_ipow(lambda, 2)+0.0f;
} break;
