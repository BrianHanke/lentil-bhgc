case minolta__fisheye__1978__16mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 37.6685 *begin_dx + 0.759009 *begin_x + -0.126328 *begin_x*begin_lambda + -2.62285 *begin_dx*begin_lambda + 3.3061 *begin_y*begin_dx*begin_dy + 0.0534087 *begin_x*begin_y*begin_dy + 0.0890442 *lens_ipow(begin_x, 2)*begin_dx + 63.1316 *lens_ipow(begin_dx, 3) + 0.0854813 *begin_x*lens_ipow(begin_lambda, 2) + 63.1171 *begin_dx*lens_ipow(begin_dy, 2) + 0.0005434 *begin_x*lens_ipow(begin_y, 2) + 0.000524518 *lens_ipow(begin_x, 3) + 1.09803 *begin_x*lens_ipow(begin_dy, 2) + 4.35379 *begin_x*lens_ipow(begin_dx, 2) + 0.0376109 *lens_ipow(begin_y, 2)*begin_dx + 1.66962 *begin_dx*lens_ipow(begin_lambda, 3) + -6.87775e-06 *lens_ipow(begin_y, 4)*begin_dx + -7.71222e-08 *begin_x*lens_ipow(begin_y, 4) + 41.8824 *begin_dx*lens_ipow(begin_dy, 4) + 0.0610037 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 2.98404 *begin_y*begin_dx*lens_ipow(begin_dy, 3) + 0.00843765 *begin_x*begin_y*lens_ipow(begin_dy, 3) + 0.00036693 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.639147 *begin_y*lens_ipow(begin_dx, 3)*begin_dy*begin_lambda + 0.0093082 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_lambda + 12.6985 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*begin_lambda + -2.02516e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dx + -5.12895e-13 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4);
  pred_y =  + 0.758933 *begin_y + 37.6595 *begin_dy + -2.58853 *begin_dy*begin_lambda + -0.126325 *begin_y*begin_lambda + 1.07499 *begin_y*lens_ipow(begin_dx, 2) + 0.0891274 *lens_ipow(begin_y, 2)*begin_dy + 4.35648 *begin_y*lens_ipow(begin_dy, 2) + 3.20535 *begin_x*begin_dx*begin_dy + 0.0518898 *begin_x*begin_y*begin_dx + 61.4121 *lens_ipow(begin_dx, 2)*begin_dy + 0.0859262 *begin_y*lens_ipow(begin_lambda, 2) + 0.000522451 *lens_ipow(begin_x, 2)*begin_y + 0.00052592 *lens_ipow(begin_y, 3) + 0.0361946 *lens_ipow(begin_x, 2)*begin_dy + 63.1414 *lens_ipow(begin_dy, 3) + 1.67249 *begin_dy*lens_ipow(begin_lambda, 3) + 0.0870487 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + 3.96772 *begin_x*lens_ipow(begin_dx, 3)*begin_dy + 9.44877 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 0.575586 *begin_x*begin_dx*lens_ipow(begin_dy, 3) + 0.00835634 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 0.000597607 *lens_ipow(begin_x, 3)*begin_dx*begin_dy + 58.9404 *lens_ipow(begin_dx, 4)*begin_dy + 7.34058e-09 *begin_x*lens_ipow(begin_y, 5)*begin_dx*begin_lambda + 2.33481e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 4)*begin_lambda + 0.000132682 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*begin_lambda + -8.12154e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dy*begin_lambda + -1.33636e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5)*begin_lambda;
  pred_dx =  + -0.569545 *begin_dx + -0.0381291 *begin_x + -0.00325389 *begin_x*begin_lambda + -0.127254 *begin_dx*begin_lambda + 0.0409161 *begin_y*begin_dx*begin_dy + 0.00290472 *begin_x*begin_y*begin_dy + 0.00347671 *lens_ipow(begin_x, 2)*begin_dx + -1.06425 *lens_ipow(begin_dx, 3) + -1.02167 *begin_dx*lens_ipow(begin_dy, 2) + 2.36465e-05 *begin_x*lens_ipow(begin_y, 2) + 2.39039e-05 *lens_ipow(begin_x, 3) + 0.0405608 *begin_x*lens_ipow(begin_dy, 2) + 0.0769936 *begin_x*lens_ipow(begin_dx, 2) + 0.000653619 *lens_ipow(begin_y, 2)*begin_dx + -0.0591927 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -0.00289385 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + 2.6985e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -1.33654e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4) + 2.71058e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + -4.88275e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx + -0.0100718 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -0.239949 *begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + 5.31631e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dx + 0.0179605 *begin_x*begin_y*lens_ipow(begin_dx, 4)*begin_dy + -4.64749e-06 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dy, 3) + -4.75732e-11 *lens_ipow(begin_x, 7)*begin_lambda + 2.12469e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -0.000243041 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 3);
  pred_dy =  + -0.0378894 *begin_y + -0.561379 *begin_dy + -0.126194 *begin_dy*begin_lambda + -0.00331425 *begin_y*begin_lambda + 0.0377427 *begin_y*lens_ipow(begin_dx, 2) + 0.00266728 *lens_ipow(begin_y, 2)*begin_dy + 0.0448751 *begin_y*lens_ipow(begin_dy, 2) + 0.0464106 *begin_x*begin_dx*begin_dy + 0.0029632 *begin_x*begin_y*begin_dx + -1.08102 *lens_ipow(begin_dx, 2)*begin_dy + 2.37591e-05 *lens_ipow(begin_x, 2)*begin_y + 1.6824e-05 *lens_ipow(begin_y, 3) + 0.000701671 *lens_ipow(begin_x, 2)*begin_dy + -1.47992 *lens_ipow(begin_dy, 3) + -0.0298889 *begin_x*lens_ipow(begin_dx, 3)*begin_dy + -0.134006 *begin_x*begin_dx*lens_ipow(begin_dy, 3) + -0.000779137 *begin_x*begin_y*lens_ipow(begin_dx, 3) + -0.00159431 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + -0.00248263 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 4.09711e-05 *lens_ipow(begin_y, 4)*begin_dy*begin_lambda + 0.00294056 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2)*begin_lambda + 2.00679e-07 *lens_ipow(begin_y, 5)*begin_lambda + 0.994959 *begin_y*lens_ipow(begin_dy, 4)*begin_lambda + 0.0896274 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3)*begin_lambda + 5.48173e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -4.41438e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5) + -7.16968e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3) + 2.39693e-10 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2);
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 37.6685  + -2.62285 *begin_lambda + 3.3061 *begin_y*begin_dy + 0.0890442 *lens_ipow(begin_x, 2) + 189.395 *lens_ipow(begin_dx, 2) + 63.1171 *lens_ipow(begin_dy, 2) + 8.70759 *begin_x*begin_dx + 0.0376109 *lens_ipow(begin_y, 2) + 1.66962 *lens_ipow(begin_lambda, 3) + -6.87775e-06 *lens_ipow(begin_y, 4) + 41.8824 *lens_ipow(begin_dy, 4) + 0.0610037 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 2.98404 *begin_y*lens_ipow(begin_dy, 3) + 1.91744 *begin_y*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + 0.0279246 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_lambda + 38.0956 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -2.02516e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)+0.0f;
  dx1_domega0(0, 1) =  + 3.3061 *begin_y*begin_dx + 0.0534087 *begin_x*begin_y + 126.234 *begin_dx*begin_dy + 2.19606 *begin_x*begin_dy + 167.529 *begin_dx*lens_ipow(begin_dy, 3) + 0.122007 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 8.95211 *begin_y*begin_dx*lens_ipow(begin_dy, 2) + 0.025313 *begin_x*begin_y*lens_ipow(begin_dy, 2) + 0.000733861 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 0.639147 *begin_y*lens_ipow(begin_dx, 3)*begin_lambda + 25.3971 *lens_ipow(begin_dx, 3)*begin_dy*begin_lambda+0.0f;
  dx1_domega0(1, 0) =  + 2.14999 *begin_y*begin_dx + 3.20535 *begin_x*begin_dy + 0.0518898 *begin_x*begin_y + 122.824 *begin_dx*begin_dy + 0.174097 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + 11.9032 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + 18.8975 *begin_dx*lens_ipow(begin_dy, 3) + 0.575586 *begin_x*lens_ipow(begin_dy, 3) + 0.000597607 *lens_ipow(begin_x, 3)*begin_dy + 235.762 *lens_ipow(begin_dx, 3)*begin_dy + 7.34058e-09 *begin_x*lens_ipow(begin_y, 5)*begin_lambda + 9.33924e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 3)*begin_lambda + 0.000398047 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda+0.0f;
  dx1_domega0(1, 1) =  + 37.6595  + -2.58853 *begin_lambda + 0.0891274 *lens_ipow(begin_y, 2) + 8.71295 *begin_y*begin_dy + 3.20535 *begin_x*begin_dx + 61.4121 *lens_ipow(begin_dx, 2) + 0.0361946 *lens_ipow(begin_x, 2) + 189.424 *lens_ipow(begin_dy, 2) + 1.67249 *lens_ipow(begin_lambda, 3) + 0.0870487 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 3.96772 *begin_x*lens_ipow(begin_dx, 3) + 28.3463 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 1.72676 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + 0.025069 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + 0.000597607 *lens_ipow(begin_x, 3)*begin_dx + 58.9404 *lens_ipow(begin_dx, 4) + 0.000265365 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*begin_dy*begin_lambda + -8.12154e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_lambda+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
