case minolta__fisheye__1978__16mm:
{
const double dx00 =  + -0.379064  + -0.238489 *lambda + 0.0683946 *x*dx + 0.15748 *lens_ipow(lambda, 2) + 0.000701007 *lens_ipow(x, 2) + 0.724948 *lens_ipow(dx, 2) + 0.743366 *lens_ipow(dy, 2)*lambda + 0.0003848 *lens_ipow(y, 2)*lambda + 0.0400315 *y*dy*lambda + 2.63163e-05 *lens_ipow(x, 3)*dx + -3.59621 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0045124 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000342411 *x*lens_ipow(y, 2)*dx*lambda + -7.89476e-05 *lens_ipow(x, 3)*y*dx*dy + -0.00165918 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 3.99064e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.393168 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 9.28723e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 2.38314e-05 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 1.53606 *lens_ipow(dy, 6)*lambda + -8.47081 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx01 =  + 0.291671 *dx*dy + 0.0211947 *y*dx + 0.000769599 *x*y*lambda + 0.0400315 *x*dy*lambda + 0.0090248 *x*y*lens_ipow(dx, 2) + -0.00106017 *lens_ipow(y, 2)*dx*dy + 0.254006 *y*lens_ipow(dx, 3) + 0.000342411 *lens_ipow(x, 2)*y*dx*lambda + -1.97369e-05 *lens_ipow(x, 4)*dx*dy + -0.00055306 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 2.66042e-06 *lens_ipow(x, 3)*y*lens_ipow(lambda, 2) + -0.393168 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 3.71489e-09 *lens_ipow(x, 5)*y + -7.84 *lens_ipow(dx, 5)*dy*lambda+0.0f;
const double dx02 =  + 16.2952  + 0.291671 *y*dy + 0.0341973 *lens_ipow(x, 2) + 1.4499 *x*dx + 0.0105974 *lens_ipow(y, 2) + 6.57908e-06 *lens_ipow(x, 4) + -7.19241 *x*dx*lens_ipow(dy, 2) + 0.0090248 *x*lens_ipow(y, 2)*dx + -0.000353389 *lens_ipow(y, 3)*dy + 0.381009 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -280.737 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000171206 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -1.97369e-05 *lens_ipow(x, 4)*y*dy + -0.00110612 *lens_ipow(x, 3)*y*dx*dy + -0.786335 *x*y*dx*dy*lens_ipow(lambda, 2) + -39.2 *y*lens_ipow(dx, 4)*dy*lambda + -16.9416 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx03 =  + 0.291671 *y*dx + 1.48673 *x*dy*lambda + 0.0400315 *x*y*lambda + -7.19241 *x*lens_ipow(dx, 2)*dy + -0.000353389 *lens_ipow(y, 3)*dx + -187.158 *lens_ipow(dx, 3)*dy + -1.97369e-05 *lens_ipow(x, 4)*y*dx + -0.00055306 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + -0.393168 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 9.53256e-06 *lens_ipow(x, 5)*dy + -7.84 *y*lens_ipow(dx, 5)*lambda + 9.21636 *x*lens_ipow(dy, 5)*lambda + -16.9416 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3)+0.0f;
const double dx04 =  + -0.238489 *x + 0.31496 *x*lambda + 0.743366 *x*lens_ipow(dy, 2) + 0.0003848 *x*lens_ipow(y, 2) + 0.0400315 *x*y*dy + 0.000171206 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + 2.66042e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lambda + -0.786335 *x*y*lens_ipow(dx, 2)*dy*lambda + -7.84 *y*lens_ipow(dx, 5)*dy + 1.53606 *x*lens_ipow(dy, 6) + -25.4124 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx10 =  + 0.291355 *dx*dy + 0.0237644 *x*dy + 0.0366091 *y*dx*lambda + 0.000767082 *x*y*lambda + 0.177445 *dx*dy*lens_ipow(lambda, 2) + 0.0594512 *y*dx*lens_ipow(dy, 2) + -0.00108246 *lens_ipow(x, 2)*dx*dy + -8.13375e-05 *x*lens_ipow(y, 2)*dy*lambda + -2.86901 *dx*lens_ipow(dy, 3)*lambda + -0.0183229 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -1.13922 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.448809 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx11 =  + -0.377566  + -0.254022 *lambda + 0.0850698 *y*dy + 1.08476 *lens_ipow(dy, 2) + 0.173301 *lens_ipow(lambda, 2) + 0.000992028 *lens_ipow(y, 2) + 0.578615 *lens_ipow(dx, 2)*lambda + -0.00023073 *lens_ipow(y, 2)*lambda + 0.0366091 *x*dx*lambda + 0.000383541 *lens_ipow(x, 2)*lambda + 2.06685e-05 *lens_ipow(y, 3)*dy + 0.0594512 *x*dx*lens_ipow(dy, 2) + -8.13375e-05 *lens_ipow(x, 2)*y*dy*lambda + 0.124862 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.0141642 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.0366458 *x*y*dx*dy*lens_ipow(lambda, 2) + -1.13922 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -14.5614 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 1.56218 *lens_ipow(dx, 6)*lambda+0.0f;
const double dx12 =  + 0.291355 *x*dy + 1.15723 *y*dx*lambda + 0.0366091 *x*y*lambda + 0.177445 *x*dy*lens_ipow(lambda, 2) + -145.073 *dx*lens_ipow(dy, 3) + 0.0594512 *x*y*lens_ipow(dy, 2) + -0.00036082 *lens_ipow(x, 3)*dy + -2.86901 *x*lens_ipow(dy, 3)*lambda + 0.00944277 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 2) + -0.0183229 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -1.13922 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -29.1228 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 9.37311 *y*lens_ipow(dx, 5)*lambda+0.0f;
const double dx13 =  + 16.1692  + 0.0425349 *lens_ipow(y, 2) + 2.16952 *y*dy + 0.291355 *x*dx + 0.0118822 *lens_ipow(x, 2) + 18.4621 *lens_ipow(dy, 2) + 0.177445 *x*dx*lens_ipow(lambda, 2) + -217.61 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 5.16712e-06 *lens_ipow(y, 4) + 0.118902 *x*y*dx*dy + -0.00036082 *lens_ipow(x, 3)*dx + -4.06687e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -8.60704 *x*dx*lens_ipow(dy, 2)*lambda + 0.249724 *y*dy*lens_ipow(lambda, 3) + -0.0183229 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + -2.27845 *x*y*dx*dy*lens_ipow(lambda, 2) + -29.1228 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 0.673213 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx14 =  + -0.254022 *y + 0.346601 *y*lambda + 0.578615 *y*lens_ipow(dx, 2) + -7.69099e-05 *lens_ipow(y, 3) + 0.0366091 *x*y*dx + 0.000383541 *lens_ipow(x, 2)*y + 0.35489 *x*dx*dy*lambda + -4.06687e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -2.86901 *x*dx*lens_ipow(dy, 3) + 0.374586 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.00944277 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda + -0.0366458 *x*lens_ipow(y, 2)*dx*dy*lambda + -2.27845 *x*y*dx*lens_ipow(dy, 2)*lambda + -29.1228 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.448809 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda + 1.56218 *y*lens_ipow(dx, 6)+0.0f;
const double dx20 =  + -0.0554835  + 0.00272005 *lambda + 0.000255957 *x*dx + -0.00170713 *lens_ipow(lambda, 2) + 2.03853e-05 *lens_ipow(y, 2) + 6.26126e-05 *lens_ipow(x, 2) + 1.24215e-06 *lens_ipow(x, 3)*dx + 0.04149 *lens_ipow(dy, 4) + 0.0014028 *y*lens_ipow(dy, 3) + 0.000896044 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.000887185 *x*y*dx*dy*lambda + 1.9252e-05 *x*lens_ipow(y, 2)*dx*lambda + -1.59244e-05 *lens_ipow(x, 2)*y*dy*lambda + 0.04497 *lens_ipow(dy, 4)*lambda + 0.000376118 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00977441 *x*dx*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + 3.48966e-06 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 6)+0.0f;
const double dx21 =  + 4.07707e-05 *x*y + 0.000428473 *y*dx + 0.268884 *lens_ipow(dx, 3)*dy + 0.0162993 *y*lens_ipow(dx, 3) + 0.0014028 *x*lens_ipow(dy, 3) + 0.0151497 *y*dx*lens_ipow(dy, 2)*lambda + 0.00179209 *x*y*lens_ipow(dx, 2)*lambda + -0.000443593 *lens_ipow(x, 2)*dx*dy*lambda + 1.21827e-05 *lens_ipow(y, 3)*dx*lambda + 1.9252e-05 *lens_ipow(x, 2)*y*dx*lambda + 0.000803043 *lens_ipow(y, 2)*dx*dy*lambda + -5.30812e-06 *lens_ipow(x, 3)*dy*lambda + 0.0355684 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 0.302398 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 3) + -1.93601e-05 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 6) + 1.0469e-05 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 6)+0.0f;
const double dx22 =  + -0.220124  + 0.000127978 *lens_ipow(x, 2) + 0.000214237 *lens_ipow(y, 2) + 3.10537e-07 *lens_ipow(x, 4) + 0.806653 *y*lens_ipow(dx, 2)*dy + 0.0244489 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 9.52708 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00757486 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.00179209 *x*lens_ipow(y, 2)*dx*lambda + -0.000443593 *lens_ipow(x, 2)*y*dy*lambda + 3.04567e-06 *lens_ipow(y, 4)*lambda + 9.62599e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.000267681 *lens_ipow(y, 3)*dy*lambda + 0.0533527 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.907195 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + 0.000250745 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00488721 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -4.84004e-06 *lens_ipow(y, 4)*lens_ipow(lambda, 6)+0.0f;
const double dx23 =  + 0.268884 *y*lens_ipow(dx, 3) + 0.16596 *x*lens_ipow(dy, 3) + 0.0042084 *x*y*lens_ipow(dy, 2) + 6.35139 *lens_ipow(dx, 3)*dy + 0.0151497 *lens_ipow(y, 2)*dx*dy*lambda + -0.000443593 *lens_ipow(x, 2)*y*dx*lambda + 0.000267681 *lens_ipow(y, 3)*dx*lambda + -5.30812e-06 *lens_ipow(x, 3)*y*lambda + 0.17988 *x*lens_ipow(dy, 3)*lambda + 0.302398 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + 0.000250745 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.0195488 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 3.48966e-06 *x*lens_ipow(y, 3)*lens_ipow(lambda, 6)+0.0f;
const double dx24 =  + 0.00272005 *x + -0.00341427 *x*lambda + 0.00757486 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.000896044 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.000443593 *lens_ipow(x, 2)*y*dx*dy + 3.04567e-06 *lens_ipow(y, 4)*dx + 9.62599e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + 0.000267681 *lens_ipow(y, 3)*dx*dy + -5.30812e-06 *lens_ipow(x, 3)*y*dy + 0.04497 *x*lens_ipow(dy, 4) + 0.0355684 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + 0.907195 *y*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + 0.000250745 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.00977441 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4)*lambda + -2.90402e-05 *lens_ipow(y, 4)*dx*lens_ipow(lambda, 5) + 2.0938e-05 *x*lens_ipow(y, 3)*dy*lens_ipow(lambda, 5)+0.0f;
const double dx30 =  + 0.0185986 *dx*dy + 4.1837e-05 *x*y + 0.000655039 *x*dy + 1.34053e-06 *lens_ipow(y, 3)*dx + 0.145204 *dx*lens_ipow(dy, 3) + 1.52911e-07 *x*lens_ipow(y, 3) + 0.0254052 *x*lens_ipow(dy, 3) + 2.26913e-05 *x*lens_ipow(y, 2)*dy + 0.00123434 *x*y*lens_ipow(dy, 2) + -1.22813e-06 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + -0.102348 *lens_ipow(dx, 5)*dy + -2.48579e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.00468692 *y*lens_ipow(dx, 5) + -3.13245e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 1.65197e-06 *lens_ipow(x, 4)*dx*lens_ipow(dy, 3) + 0.00123424 *lens_ipow(x, 2)*dx*lens_ipow(dy, 5)*lambda+0.0f;
const double dx31 =  + -0.0556336  + 0.00353503 *lambda + 0.00257455 *lens_ipow(dx, 2) + -0.00327772 *lens_ipow(dy, 2) + -0.00244663 *lens_ipow(lambda, 2) + 2.09185e-05 *lens_ipow(x, 2) + 5.7307e-05 *lens_ipow(y, 2) + 1.11675e-06 *lens_ipow(y, 3)*dy + 4.02159e-06 *x*lens_ipow(y, 2)*dx + 0.00844378 *y*lens_ipow(dx, 2)*dy + 2.29366e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.000264248 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 2.26913e-05 *lens_ipow(x, 2)*y*dy + 0.00061717 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -3.07033e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 0.228126 *lens_ipow(dx, 6) + -1.86434e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.00468692 *x*lens_ipow(dx, 5) + -1.56622e-08 *lens_ipow(x, 4)*y*dy+0.0f;
const double dx32 =  + 0.0051491 *y*dx + 0.0185986 *x*dy + 0.82357 *dx*dy + 1.34053e-06 *x*lens_ipow(y, 3) + 0.145204 *x*lens_ipow(dy, 3) + 0.00844378 *lens_ipow(y, 2)*dx*dy + 0.000176165 *lens_ipow(y, 3)*dx + -0.511738 *x*lens_ipow(dx, 4)*dy + 1.36875 *y*lens_ipow(dx, 5) + 0.0234346 *x*y*lens_ipow(dx, 4) + 3.30393e-07 *lens_ipow(x, 5)*lens_ipow(dy, 3) + 0.000411412 *lens_ipow(x, 3)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx33 =  + -0.222065  + -0.00655545 *y*dy + 0.0185986 *x*dx + 0.411785 *lens_ipow(dx, 2) + 0.00032752 *lens_ipow(x, 2) + 2.79188e-07 *lens_ipow(y, 4) + 0.435612 *x*dx*lens_ipow(dy, 2) + 0.00422189 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.0381077 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.13456e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00123434 *lens_ipow(x, 2)*y*dy + -6.14066e-07 *lens_ipow(x, 4)*y*dy + -0.102348 *x*lens_ipow(dx, 5) + -7.83111e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 9.9118e-07 *lens_ipow(x, 5)*dx*lens_ipow(dy, 2) + 0.00205706 *lens_ipow(x, 3)*dx*lens_ipow(dy, 4)*lambda+0.0f;
const double dx34 =  + 0.00353503 *y + -0.00489325 *y*lambda + 0.000411412 *lens_ipow(x, 3)*dx*lens_ipow(dy, 5)+0.0f;
const double dx40 =  + -0.00878109 *dx + -0.0325456 *lens_ipow(dx, 3) + -2.80307e-06 *x*lens_ipow(y, 2) + -3.5127e-06 *lens_ipow(x, 3) + 0.000848054 *y*dx*dy*lambda + -4.80179e-06 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.05912 *x*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 4.00805e-10 *lens_ipow(x, 3)*lens_ipow(y, 4) + 1.21538e-10 *lens_ipow(x, 7) + -8.31128e-13 *lens_ipow(x, 3)*lens_ipow(y, 6) + 4.3657e-07 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*dy + -1.25228e-12 *lens_ipow(x, 5)*lens_ipow(y, 4) + -3.60784e-13 *lens_ipow(x, 9) + 2.20726e-14 *lens_ipow(x, 2)*lens_ipow(y, 7)*dx + 4.50687e-07 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx41 =  + -0.00976144 *dy + -2.80307e-06 *lens_ipow(x, 2)*y + -3.55892e-06 *lens_ipow(y, 3) + 0.000848054 *x*dx*dy*lambda + -0.172762 *lens_ipow(dy, 5) + -4.80179e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lambda + 0.388079 *lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 4.00805e-10 *lens_ipow(x, 4)*lens_ipow(y, 3) + 1.30169e-10 *lens_ipow(y, 7) + -3.89052e-13 *lens_ipow(y, 9) + -1.24669e-12 *lens_ipow(x, 4)*lens_ipow(y, 5) + 8.73139e-08 *lens_ipow(x, 5)*lens_ipow(dx, 3)*dy + -8.34853e-13 *lens_ipow(x, 6)*lens_ipow(y, 3) + 5.15027e-14 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx + 9.01374e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx42 =  + -0.00878109 *x + -0.455705 *dx + -4.17127 *lens_ipow(dx, 3) + -0.0976369 *x*lens_ipow(dx, 2) + 0.000848054 *x*y*dy*lambda + -4.80179e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lambda + 0.776158 *y*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.11824 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 2.61942e-07 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*dy + 7.35753e-15 *lens_ipow(x, 3)*lens_ipow(y, 7) + 4.50687e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx43 =  + -0.00976144 *y + -0.523101 *dy + 0.000848054 *x*y*dx*lambda + -34.3675 *lens_ipow(dy, 5) + -0.86381 *y*lens_ipow(dy, 4) + 1.16424 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.05912 *lens_ipow(x, 2)*lens_ipow(dx, 4)*dy + 8.73139e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 3) + 4.50687e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx44 =  + 0.358447  + -0.484094 *lambda + 0.000848054 *x*y*dx*dy + -2.40089e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.776158 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 2.25344e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
} break;
