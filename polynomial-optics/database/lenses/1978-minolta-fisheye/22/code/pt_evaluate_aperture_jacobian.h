case minolta__fisheye__1978__22mm:
{
const double dx00 =  + 0.733929  + -0.0326085 *lambda + 4.36432 *lens_ipow(dx, 2) + 0.000116309 *lens_ipow(y, 2) + 0.129901 *x*dx + 0.000837057 *lens_ipow(x, 2) + 3.00329 *lens_ipow(dy, 2)*lambda + 0.106223 *y*dy*lambda + 0.000408303 *lens_ipow(y, 2)*lambda + -3.23379 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.11432 *y*dy*lens_ipow(lambda, 3) + -0.000573832 *lens_ipow(y, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx01 =  + 0.000232617 *x*y + 9.57984 *dx*dy*lambda + 0.201762 *y*dx*lambda + 0.106223 *x*dy*lambda + 0.000816606 *x*y*lambda + -0.18243 *y*dx*lens_ipow(lambda, 2) + -13.3903 *dx*dy*lens_ipow(lambda, 3) + -0.11432 *x*dy*lens_ipow(lambda, 3) + 4.03962 *dx*dy*lens_ipow(lambda, 4) + -0.00114766 *x*y*lens_ipow(lambda, 4)+0.0f;
const double dx02 =  + 51.0305  + -1.48794 *lambda + 261.381 *lens_ipow(dx, 2) + 8.72865 *x*dx + 0.0649506 *lens_ipow(x, 2) + 243.947 *lens_ipow(dy, 2)*lambda + 9.57984 *y*dy*lambda + 0.100881 *lens_ipow(y, 2)*lambda + -0.0912152 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -262.888 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -13.3903 *y*dy*lens_ipow(lambda, 3) + 4.03962 *y*dy*lens_ipow(lambda, 4)+0.0f;
const double dx03 =  + 487.894 *dx*dy*lambda + 9.57984 *y*dx*lambda + 6.00657 *x*dy*lambda + 0.106223 *x*y*lambda + -525.775 *dx*dy*lens_ipow(lambda, 3) + -13.3903 *y*dx*lens_ipow(lambda, 3) + -6.46758 *x*dy*lens_ipow(lambda, 3) + -0.11432 *x*y*lens_ipow(lambda, 3) + 4.03962 *y*dx*lens_ipow(lambda, 4)+0.0f;
const double dx04 =  + -1.48794 *dx + -0.0326085 *x + 243.947 *dx*lens_ipow(dy, 2) + 9.57984 *y*dx*dy + 0.100881 *lens_ipow(y, 2)*dx + 3.00329 *x*lens_ipow(dy, 2) + 0.106223 *x*y*dy + 0.000408303 *x*lens_ipow(y, 2) + -0.18243 *lens_ipow(y, 2)*dx*lambda + -788.663 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -40.171 *y*dx*dy*lens_ipow(lambda, 2) + -9.70138 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.34296 *x*y*dy*lens_ipow(lambda, 2) + 16.1585 *y*dx*dy*lens_ipow(lambda, 3) + -0.00229533 *x*lens_ipow(y, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx10 =  + 0.0272728 *x*dy + 0.000501101 *x*y + 12.349 *dx*dy*lambda + 0.142015 *y*dx*lambda + 0.0765548 *x*dy*lambda + -11.2652 *dx*dy*lens_ipow(lambda, 2) + -0.129422 *y*dx*lens_ipow(lambda, 2) + 0.000359193 *x*y*lens_ipow(lambda, 2) + -0.083823 *x*dy*lens_ipow(lambda, 3) + -0.000808136 *x*y*lens_ipow(lambda, 5)+0.0f;
const double dx11 =  + 0.733959  + -0.0327609 *lambda + 4.37067 *lens_ipow(dy, 2) + 0.13015 *y*dy + 0.000839875 *lens_ipow(y, 2) + 0.000250551 *lens_ipow(x, 2) + 4.01016 *lens_ipow(dx, 2)*lambda + 0.142015 *x*dx*lambda + -3.65448 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.129422 *x*dx*lens_ipow(lambda, 2) + 0.000179597 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -0.000404068 *lens_ipow(x, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx12 =  + 653.056 *dx*dy*lambda + 8.02031 *y*dx*lambda + 12.349 *x*dy*lambda + 0.142015 *x*y*lambda + -596.625 *dx*dy*lens_ipow(lambda, 2) + -7.30895 *y*dx*lens_ipow(lambda, 2) + -11.2652 *x*dy*lens_ipow(lambda, 2) + -0.129422 *x*y*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 51.028  + -1.48445 *lambda + 261.755 *lens_ipow(dy, 2) + 8.74133 *y*dy + 0.0650749 *lens_ipow(y, 2) + 0.0136364 *lens_ipow(x, 2) + 326.528 *lens_ipow(dx, 2)*lambda + 12.349 *x*dx*lambda + 0.0382774 *lens_ipow(x, 2)*lambda + -298.312 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -11.2652 *x*dx*lens_ipow(lambda, 2) + -0.0419115 *lens_ipow(x, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx14 =  + -1.48445 *dy + -0.0327609 *y + 326.528 *lens_ipow(dx, 2)*dy + 4.01016 *y*lens_ipow(dx, 2) + 12.349 *x*dx*dy + 0.142015 *x*y*dx + 0.0382774 *lens_ipow(x, 2)*dy + -596.625 *lens_ipow(dx, 2)*dy*lambda + -7.30895 *y*lens_ipow(dx, 2)*lambda + -22.5304 *x*dx*dy*lambda + -0.258844 *x*y*dx*lambda + 0.000359193 *lens_ipow(x, 2)*y*lambda + -0.125734 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 2) + -0.00202034 *lens_ipow(x, 2)*y*lens_ipow(lambda, 4)+0.0f;
const double dx20 =  + -0.0277402  + -0.0024019 *lambda + 0.0269963 *lens_ipow(dy, 2) + 0.0598293 *lens_ipow(dx, 2) + 0.00151506 *y*dy + 9.9866e-06 *lens_ipow(y, 2) + 0.00391306 *x*dx + 3.00954e-05 *lens_ipow(x, 2) + -0.285124 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.0105053 *x*dx*lens_ipow(dy, 2) + -6.10678e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -1.39793e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0126913 *lens_ipow(dy, 4)*lambda+0.0f;
const double dx21 =  + 0.0341049 *dx*dy + 0.000853296 *y*dx + 0.00151506 *x*dy + 1.99732e-05 *x*y + -0.149428 *lens_ipow(dx, 3)*dy + -0.0036706 *y*lens_ipow(dx, 3) + -9.31951e-09 *lens_ipow(x, 3)*y+0.0f;
const double dx22 =  + -0.573366  + -0.124679 *lambda + -0.923432 *lens_ipow(dy, 2) + -3.10151 *lens_ipow(dx, 2) + 0.0341049 *y*dy + 0.000426648 *lens_ipow(y, 2) + 0.119659 *x*dx + 0.00195653 *lens_ipow(x, 2) + -24.3011 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.448283 *y*lens_ipow(dx, 2)*dy + -0.0055059 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.570249 *x*dx*lens_ipow(dy, 2) + -0.00525264 *lens_ipow(x, 2)*lens_ipow(dy, 2)+0.0f;
const double dx23 =  + -1.84686 *dx*dy + 0.0341049 *y*dx + 0.0539925 *x*dy + 0.00151506 *x*y + -16.2007 *lens_ipow(dx, 3)*dy + -0.149428 *y*lens_ipow(dx, 3) + -0.570249 *x*lens_ipow(dx, 2)*dy + -0.0105053 *lens_ipow(x, 2)*dx*dy + -4.07119e-05 *lens_ipow(x, 3)*dy + 0.0507651 *x*lens_ipow(dy, 3)*lambda+0.0f;
const double dx24 =  + -0.124679 *dx + -0.0024019 *x + 0.0126913 *x*lens_ipow(dy, 4)+0.0f;
const double dx30 =  + 0.0318267 *dx*dy + 0.00152576 *y*dx + 0.000800014 *x*dy + 1.9743e-05 *x*y + -0.102437 *dx*lens_ipow(dy, 3) + -0.00294505 *x*lens_ipow(dy, 3) + -9.13232e-09 *x*lens_ipow(y, 3) + -0.0425594 *lens_ipow(dx, 3)*dy*lambda + -0.000882806 *y*lens_ipow(dx, 3)*lambda+0.0f;
const double dx31 =  + -0.0257295  + -0.00968482 *lambda + 0.00659297 *lens_ipow(lambda, 2) + 0.0540254 *lens_ipow(dy, 2) + 0.0246594 *lens_ipow(dx, 2) + 0.00374246 *y*dy + 2.88541e-05 *lens_ipow(y, 2) + 0.00152576 *x*dx + 9.87151e-06 *lens_ipow(x, 2) + -0.00222884 *y*lens_ipow(dx, 2)*dy + -1.36985e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.000882806 *x*lens_ipow(dx, 3)*lambda+0.0f;
const double dx32 =  + -2.37731 *dx*dy + 0.0493188 *y*dx + 0.0318267 *x*dy + 0.00152576 *x*y + -0.00222884 *lens_ipow(y, 2)*dx*dy + -0.102437 *x*lens_ipow(dy, 3) + -0.127678 *x*lens_ipow(dx, 2)*dy*lambda + -0.00264842 *x*y*lens_ipow(dx, 2)*lambda+0.0f;
const double dx33 =  + -0.464996  + -0.510045 *lambda + 0.346828 *lens_ipow(lambda, 2) + -3.52861 *lens_ipow(dy, 2) + -1.18866 *lens_ipow(dx, 2) + 0.108051 *y*dy + 0.00187123 *lens_ipow(y, 2) + 0.0318267 *x*dx + 0.000400007 *lens_ipow(x, 2) + -0.00111442 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.30731 *x*dx*lens_ipow(dy, 2) + -0.00441757 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.0425594 *x*lens_ipow(dx, 3)*lambda+0.0f;
const double dx34 =  + -0.510045 *dy + -0.00968482 *y + 0.693657 *dy*lambda + 0.0131859 *y*lambda + -0.0425594 *x*lens_ipow(dx, 3)*dy + -0.000882806 *x*y*lens_ipow(dx, 3)+0.0f;
const double dx40 =  + -0.00221358 *dx + -2.72763e-05 *x + -0.216117 *lens_ipow(dx, 3) + 0.000371191 *y*dx*dy + -0.00813992 *x*lens_ipow(dx, 2) + -1.05203e-07 *x*lens_ipow(y, 2) + -0.000104947 *lens_ipow(x, 2)*dx + -4.82724e-07 *lens_ipow(x, 3)+0.0f;
const double dx41 =  + -0.00466919 *dy + -6.31092e-05 *y + 0.000371191 *x*dx*dy + -1.05203e-07 *lens_ipow(x, 2)*y + -1.98696 *lens_ipow(dy, 5) + -0.0684565 *y*lens_ipow(dy, 4) + -0.000574381 *lens_ipow(y, 2)*lens_ipow(dy, 3)+0.0f;
const double dx42 =  + -0.164689 *dx + -0.00221358 *x + -1.49955 *dx*lens_ipow(dy, 2) + -17.3886 *lens_ipow(dx, 3) + -0.64835 *x*lens_ipow(dx, 2) + 0.000371191 *x*y*dy + -0.00813992 *lens_ipow(x, 2)*dx + -3.49823e-05 *lens_ipow(x, 3)+0.0f;
const double dx43 =  + -0.34402 *dy + -0.00466919 *y + -1.49955 *lens_ipow(dx, 2)*dy + 0.000371191 *x*y*dx + -227.93 *lens_ipow(dy, 5) + -9.93481 *y*lens_ipow(dy, 4) + -0.136913 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.000574381 *lens_ipow(y, 3)*lens_ipow(dy, 2)+0.0f;
const double dx44 =  + 0.556675  + -1.53287 *lambda + 1.11259 *lens_ipow(lambda, 2)+0.0f;
} break;
