case minolta__fisheye__1978__22mm:
{
const double dx00 =  + -0.428004  + -0.0608449 *lambda + 0.000111309 *lens_ipow(y, 2) + 0.000298817 *lens_ipow(x, 2) + 0.725951 *lens_ipow(dy, 2)*lambda + 1.77434 *lens_ipow(dx, 2)*lambda + 0.0456289 *y*dy*lambda + 0.131932 *x*dx*lambda + -0.0340894 *y*dy*lens_ipow(lambda, 2) + -0.00257384 *x*y*dx*dy + 0.000341076 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.00120509 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00213764 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.0767217 *x*dx*lens_ipow(lambda, 3) + -0.565547 *lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx01 =  + 0.322731 *dx*dy + 0.0191236 *y*dx + 0.000222617 *x*y + 0.0456289 *x*dy*lambda + -0.0340894 *x*dy*lens_ipow(lambda, 2) + -0.00128692 *lens_ipow(x, 2)*dx*dy + 7.83337 *lens_ipow(dx, 3)*dy*lambda + 0.285146 *y*lens_ipow(dx, 3)*lambda + 0.00427529 *x*y*lens_ipow(dx, 2)*lambda+0.0f;
const double dx02 =  + 22.2439  + 0.322731 *y*dy + 0.00956178 *lens_ipow(y, 2) + 3.54868 *x*dx*lambda + 0.0659662 *lens_ipow(x, 2)*lambda + -0.00128692 *lens_ipow(x, 2)*y*dy + 93.9369 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 23.5001 *y*lens_ipow(dx, 2)*dy*lambda + 0.427719 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 0.00427529 *x*lens_ipow(y, 2)*dx*lambda + -0.0383609 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 733.106 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + 0.322731 *y*dx + 1.4519 *x*dy*lambda + 0.0456289 *x*y*lambda + -0.0340894 *x*y*lens_ipow(lambda, 2) + -0.00128692 *lens_ipow(x, 2)*y*dx + 0.000803394 *lens_ipow(x, 3)*dy + 7.83337 *y*lens_ipow(dx, 3)*lambda + 488.737 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + -1.13109 *x*dy*lens_ipow(lambda, 4)+0.0f;
const double dx04 =  + -0.0608449 *x + 0.725951 *x*lens_ipow(dy, 2) + 1.77434 *x*lens_ipow(dx, 2) + 0.0456289 *x*y*dy + 0.0659662 *lens_ipow(x, 2)*dx + -0.0681788 *x*y*dy*lambda + 0.000227384 *lens_ipow(x, 3)*lambda + 93.9369 *lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 7.83337 *y*lens_ipow(dx, 3)*dy + 0.142573 *lens_ipow(y, 2)*lens_ipow(dx, 3) + 0.00213764 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.115083 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 2) + 488.737 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + -2.26219 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx10 =  + 0.646032 *dx*dy + 0.0252641 *x*dy + 0.000301389 *x*y + 0.0679595 *y*dx*lambda + -0.0581486 *y*dx*lens_ipow(lambda, 2) + 0.157197 *x*lens_ipow(dy, 5)+0.0f;
const double dx11 =  + -0.434039  + -0.0520975 *lambda + 0.000412921 *lens_ipow(y, 2) + 0.000150695 *lens_ipow(x, 2) + 2.83193 *lens_ipow(dy, 2)*lambda + 1.31573 *lens_ipow(dx, 2)*lambda + 0.163424 *y*dy*lambda + 0.0679595 *x*dx*lambda + -0.0581486 *x*dx*lens_ipow(lambda, 2) + -2.81476 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -1.2458 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.165792 *y*dy*lens_ipow(lambda, 3) + 0.040473 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00152116 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 1.21038e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)+0.0f;
const double dx12 =  + 20.1757 *dx*dy + 0.646032 *x*dy + 2.63147 *y*dx*lambda + 0.0679595 *x*y*lambda + -0.0581486 *x*y*lens_ipow(lambda, 2) + -2.4916 *y*dx*lens_ipow(lambda, 3) + 0.026982 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 0.000760579 *lens_ipow(y, 4)*dx*dy + 4.84153e-06 *lens_ipow(y, 5)*dx+0.0f;
const double dx13 =  + 21.8406  + 0.570717 *lambda + 24.7852 *lens_ipow(dy, 2) + 10.0879 *lens_ipow(dx, 2) + 0.646032 *x*dx + 0.0126321 *lens_ipow(x, 2) + 5.66387 *y*dy*lambda + 0.0817122 *lens_ipow(y, 2)*lambda + -5.62951 *y*dy*lens_ipow(lambda, 3) + -0.0828962 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 0.026982 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 0.00038029 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.392993 *lens_ipow(x, 2)*lens_ipow(dy, 4)+0.0f;
const double dx14 =  + 0.570717 *dy + -0.0520975 *y + 2.83193 *y*lens_ipow(dy, 2) + 1.31573 *y*lens_ipow(dx, 2) + 0.0817122 *lens_ipow(y, 2)*dy + 0.0679595 *x*y*dx + -0.116297 *x*y*dx*lambda + -8.44427 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -3.7374 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.248689 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx20 =  + -0.0400776  + 0.000801607 *lambda + 7.75964e-06 *lens_ipow(y, 2) + 0.000186068 *x*dx + 2.4068e-05 *lens_ipow(x, 2) + 0.0567796 *lens_ipow(dy, 4)*lambda + -0.653231 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.0108262 *lens_ipow(y, 2)*lens_ipow(dx, 4) + 0.000664444 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + 1.55189e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.59725e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 5.80259e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 1.04122e-09 *lens_ipow(y, 5)*dy*lambda+0.0f;
const double dx21 =  + 0.000313911 *y*dx + 1.55193e-05 *x*y + 1.06816 *lens_ipow(dx, 5)*dy + 0.311036 *y*lens_ipow(dx, 5) + 0.0216524 *x*y*lens_ipow(dx, 4) + 0.000664444 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 1.03459e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 7.98623e-08 *lens_ipow(x, 4)*y*dx + 2.32104e-10 *lens_ipow(x, 5)*y + 0.0237611 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.00100344 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 3) + 8.04373e-06 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 3) + 5.20608e-09 *x*lens_ipow(y, 4)*dy*lambda+0.0f;
const double dx22 =  + -0.22432  + 0.000156956 *lens_ipow(y, 2) + 9.30339e-05 *lens_ipow(x, 2) + 0.0175383 *lens_ipow(lambda, 3) + 0.510957 *lens_ipow(dy, 4) + 5.34079 *y*lens_ipow(dx, 4)*dy + 0.77759 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -2.61292 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.0433048 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + 0.000996665 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.03459e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 3.99311e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.0118806 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.000334481 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 3) + 2.01093e-06 *lens_ipow(y, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx23 =  + 2.04383 *dx*lens_ipow(dy, 3) + 0.227118 *x*lens_ipow(dy, 3)*lambda + 1.06816 *y*lens_ipow(dx, 5) + -1.30646 *x*lens_ipow(dx, 4)*dy + 0.0237611 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 3) + 0.000334481 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 3) + 1.04122e-09 *x*lens_ipow(y, 5)*lambda+0.0f;
const double dx24 =  + 0.000801607 *x + 0.0526148 *dx*lens_ipow(lambda, 2) + 0.0567796 *x*lens_ipow(dy, 4) + 0.0356417 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.00100344 *lens_ipow(y, 3)*dx*dy*lens_ipow(lambda, 2) + 6.0328e-06 *lens_ipow(y, 4)*dx*lens_ipow(lambda, 2) + 1.04122e-09 *x*lens_ipow(y, 5)*dy+0.0f;
const double dx30 =  + 0.000488105 *x*dy + 1.90291e-05 *x*y + 0.0255194 *dx*dy*lambda + 0.206414 *dx*lens_ipow(dy, 3)*lambda + 1.18787e-06 *lens_ipow(y, 3)*dx*lambda + 0.0110011 *x*lens_ipow(dy, 3)*lambda + 0.000161174 *x*y*lens_ipow(dy, 2)*lambda + -1.68044e-08 *lens_ipow(x, 3)*y*lens_ipow(lambda, 2)+0.0f;
const double dx31 =  + -0.0409685  + 0.00324897 *lambda + -0.00214014 *lens_ipow(lambda, 2) + 0.0315341 *lens_ipow(dy, 2) + 0.0032017 *lens_ipow(dx, 2) + 0.0011404 *y*dy + 3.05356e-05 *lens_ipow(y, 2) + 9.51457e-06 *lens_ipow(x, 2) + 0.00861515 *y*lens_ipow(dx, 2)*dy*lambda + 0.000240991 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 3.56362e-06 *x*lens_ipow(y, 2)*dx*lambda + 8.0587e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -4.20111e-09 *lens_ipow(x, 4)*lens_ipow(lambda, 2) + 0.00776074 *lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx32 =  + 0.00640339 *y*dx + 1.8142 *dx*dy*lambda + 0.0255194 *x*dy*lambda + 0.00861515 *lens_ipow(y, 2)*dx*dy*lambda + 0.000160661 *lens_ipow(y, 3)*dx*lambda + 0.206414 *x*lens_ipow(dy, 3)*lambda + 1.18787e-06 *x*lens_ipow(y, 3)*lambda+0.0f;
const double dx33 =  + -0.255428  + 0.0317715 *lambda + 2.168 *lens_ipow(dy, 2) + 0.0630682 *y*dy + 0.0005702 *lens_ipow(y, 2) + 0.000244052 *lens_ipow(x, 2) + 0.907098 *lens_ipow(dx, 2)*lambda + 0.0255194 *x*dx*lambda + 0.00430758 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 0.619241 *x*dx*lens_ipow(dy, 2)*lambda + 0.0165016 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 0.000161174 *lens_ipow(x, 2)*y*dy*lambda + 0.0155215 *y*dy*lens_ipow(lambda, 5)+0.0f;
const double dx34 =  + 0.0317715 *dy + 0.00324897 *y + -0.00428027 *y*lambda + 0.907098 *lens_ipow(dx, 2)*dy + 0.0255194 *x*dx*dy + 0.00430758 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 8.03303e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2) + 0.206414 *x*dx*lens_ipow(dy, 3) + 1.18787e-06 *x*lens_ipow(y, 3)*dx + 0.00550053 *lens_ipow(x, 2)*lens_ipow(dy, 3) + 8.0587e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -8.40222e-09 *lens_ipow(x, 4)*y*lambda + 0.0388037 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx40 =  + -0.184105 *dx*lens_ipow(dy, 2) + -0.00220308 *y*dx*dy + -0.00147363 *x*lens_ipow(dy, 2) + -21.5887 *lens_ipow(dx, 5) + -1.48347 *x*lens_ipow(dx, 4) + -0.0400822 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.000533048 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -3.61193e-06 *lens_ipow(x, 4)*dx + -1.1413e-08 *lens_ipow(x, 5)+0.0f;
const double dx41 =  + -0.00600929 *dy + -0.000101279 *y + -0.165823 *lens_ipow(dx, 2)*dy + -0.001193 *y*lens_ipow(dx, 2) + -0.00220308 *x*dx*dy + -1.9653 *lens_ipow(dy, 5) + -0.0419063 *y*lens_ipow(dy, 4)+0.0f;
const double dx42 =  + -18.9657 *dx*lens_ipow(dy, 2) + -0.331645 *y*dx*dy + -0.001193 *lens_ipow(y, 2)*dx + -0.184105 *x*lens_ipow(dy, 2) + -0.00220308 *x*y*dy + -1558.93 *lens_ipow(dx, 5) + -107.944 *x*lens_ipow(dx, 4) + -2.96695 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.0400822 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -0.000266524 *lens_ipow(x, 4)*dx + -7.22386e-07 *lens_ipow(x, 5)+0.0f;
const double dx43 =  + -0.360989 *dy + -0.00600929 *y + -18.9657 *lens_ipow(dx, 2)*dy + -0.165823 *y*lens_ipow(dx, 2) + -0.36821 *x*dx*dy + -0.00220308 *x*y*dx + -0.00147363 *lens_ipow(x, 2)*dy + -283.461 *lens_ipow(dy, 5) + -9.82652 *y*lens_ipow(dy, 4) + -0.0838127 *lens_ipow(y, 2)*lens_ipow(dy, 3)+0.0f;
const double dx44 =  + 0.369348  + -0.502859 *lambda+0.0f;
} break;
