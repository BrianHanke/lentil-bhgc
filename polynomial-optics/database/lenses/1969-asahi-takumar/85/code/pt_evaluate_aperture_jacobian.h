case asahi__takumar__1969__85mm:
{
const double dx00 =  + 0.338736  + 0.176749 *lambda + -0.120922 *lens_ipow(lambda, 2) + -0.163605 *lens_ipow(dy, 2) + -0.280733 *lens_ipow(dx, 2) + 0.000813969 *y*dy + -5.46827e-05 *lens_ipow(y, 2) + 0.00432633 *x*dx + -0.000158753 *lens_ipow(x, 2) + 0.222924 *lens_ipow(dy, 4) + -0.0156 *x*dx*lens_ipow(dy, 2) + 0.016676 *y*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx01 =  + -0.106863 *dx*dy + 0.00259781 *y*dx + 0.000813969 *x*dy + -0.000109365 *x*y + -0.363388 *dx*lens_ipow(dy, 3) + -0.343916 *lens_ipow(dx, 3)*dy + -0.0119683 *y*lens_ipow(dx, 3) + 0.016676 *x*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx02 =  + 51.7353  + 10.3533 *lambda + -7.07507 *lens_ipow(lambda, 2) + -29.793 *lens_ipow(dy, 2) + -88.7499 *lens_ipow(dx, 2) + -0.106863 *y*dy + 0.0012989 *lens_ipow(y, 2) + -0.561467 *x*dx + 0.00216317 *lens_ipow(x, 2) + -0.363388 *y*lens_ipow(dy, 3) + -1.03175 *y*lens_ipow(dx, 2)*dy + -0.0179525 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00779999 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.0333519 *x*y*dx*dy*lambda+0.0f;
const double dx03 =  + -59.5859 *dx*dy + -0.106863 *y*dx + -0.327209 *x*dy + 0.000813969 *x*y + -1.09016 *y*dx*lens_ipow(dy, 2) + -0.343916 *y*lens_ipow(dx, 3) + 0.891695 *x*lens_ipow(dy, 3) + -0.0156 *lens_ipow(x, 2)*dx*dy + 0.016676 *x*y*lens_ipow(dx, 2)*lambda+0.0f;
const double dx04 =  + 10.3533 *dx + 0.176749 *x + -14.1501 *dx*lambda + -0.241845 *x*lambda + 0.016676 *x*y*lens_ipow(dx, 2)*dy+0.0f;
const double dx10 =  + -0.133046 *dx*dy + 0.000880539 *y*dx + 0.00246555 *x*dy + -9.87442e-05 *x*y + -0.281369 *lens_ipow(dx, 3)*dy + -0.00994044 *x*lens_ipow(dy, 3) + 0.107823 *y*dx*lens_ipow(dy, 4) + -4.79838e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const double dx11 =  + 0.33896  + 0.174589 *lambda + -0.119324 *lens_ipow(lambda, 2) + -0.278849 *lens_ipow(dy, 2) + -0.164669 *lens_ipow(dx, 2) + 0.00429806 *y*dy + -0.000154335 *lens_ipow(y, 2) + 0.000880539 *x*dx + -4.93721e-05 *lens_ipow(x, 2) + 0.228092 *lens_ipow(dx, 4) + -0.0163519 *y*lens_ipow(dx, 2)*dy + 0.107823 *x*dx*lens_ipow(dy, 4) + -3.59879e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)+0.0f;
const double dx12 =  + -59.4194 *dx*dy + -0.329338 *y*dx + -0.133046 *x*dy + 0.000880539 *x*y + 0.912368 *y*lens_ipow(dx, 3) + -0.0163519 *lens_ipow(y, 2)*dx*dy + -0.844106 *x*lens_ipow(dx, 2)*dy + 0.107823 *x*y*lens_ipow(dy, 4)+0.0f;
const double dx13 =  + 51.7458  + 10.3081 *lambda + -7.04044 *lens_ipow(lambda, 2) + -88.5907 *lens_ipow(dy, 2) + -29.7097 *lens_ipow(dx, 2) + -0.557698 *y*dy + 0.00214903 *lens_ipow(y, 2) + -0.133046 *x*dx + 0.00123277 *lens_ipow(x, 2) + -0.00817597 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.281369 *x*lens_ipow(dx, 3) + -0.0149107 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.431294 *x*y*dx*lens_ipow(dy, 3)+0.0f;
const double dx14 =  + 10.3081 *dy + 0.174589 *y + -14.0809 *dy*lambda + -0.238648 *y*lambda+0.0f;
const double dx20 =  + -0.0170617  + 0.00472472 *lambda + -0.00317201 *lens_ipow(lambda, 2) + -0.0078683 *lens_ipow(dy, 2) + -0.0214137 *lens_ipow(dx, 2) + -5.36005e-05 *y*dy + -2.87085e-06 *lens_ipow(y, 2) + -0.000171514 *x*dx + -8.96217e-06 *lens_ipow(x, 2) + 1.67761e-05 *x*y*dx*dy + -0.0503977 *lens_ipow(dx, 4)*lambda + -0.00200349 *x*lens_ipow(dx, 3)*lambda + 1.39801e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 2.48874e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -0.00173664 *y*lens_ipow(dy, 5)*lambda+0.0f;
const double dx21 =  + -0.0159645 *dx*dy + -0.000105359 *y*dx + -5.36005e-05 *x*dy + -5.74171e-06 *x*y + 8.38807e-06 *lens_ipow(x, 2)*dx*dy + -0.080475 *dx*lens_ipow(dy, 5) + 1.39801e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 1.24437e-09 *lens_ipow(x, 4)*y*dx + -0.00173664 *x*lens_ipow(dy, 5)*lambda+0.0f;
const double dx22 =  + 0.355593  + -0.736706 *lens_ipow(dy, 2) + -2.10537 *lens_ipow(dx, 2) + -0.0159645 *y*dy + -5.26796e-05 *lens_ipow(y, 2) + -0.0428274 *x*dx + -8.5757e-05 *lens_ipow(x, 2) + 8.38807e-06 *lens_ipow(x, 2)*y*dy + 4.14429 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.201591 *x*lens_ipow(dx, 3)*lambda + -0.00300524 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -0.080475 *y*lens_ipow(dy, 5) + 6.22185e-10 *lens_ipow(x, 4)*lens_ipow(y, 2)+0.0f;
const double dx23 =  + -1.47341 *dx*dy + -0.0159645 *y*dx + -0.0157366 *x*dy + -5.36005e-05 *x*y + 8.38807e-06 *lens_ipow(x, 2)*y*dx + 2.76286 *lens_ipow(dx, 3)*dy*lambda + -0.402375 *y*dx*lens_ipow(dy, 4) + 4.66004e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.00868319 *x*y*lens_ipow(dy, 4)*lambda+0.0f;
const double dx24 =  + 0.00472472 *x + -0.00634401 *x*lambda + 1.38143 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.0503977 *x*lens_ipow(dx, 4) + -0.00100175 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.00173664 *x*y*lens_ipow(dy, 5)+0.0f;
const double dx30 =  + -0.0134932 *dx*dy + -6.2211e-05 *y*dx + -0.000110239 *x*dy + -5.67232e-06 *x*y + -0.0283354 *dx*lens_ipow(dy, 3) + -0.0309838 *lens_ipow(dx, 3)*dy*lambda + 0.000122158 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 1.33314e-09 *x*lens_ipow(y, 4)*dy + 1.52716e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx+0.0f;
const double dx31 =  + -0.0171159  + 0.0048754 *lambda + -0.00331504 *lens_ipow(lambda, 2) + -0.0223591 *lens_ipow(dy, 2) + -0.00745347 *lens_ipow(dx, 2) + -0.000214837 *y*dy + -8.89326e-06 *lens_ipow(y, 2) + -6.2211e-05 *x*dx + -2.83616e-06 *lens_ipow(x, 2) + 0.000244316 *x*y*dx*lens_ipow(dy, 3) + 2.66629e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 1.52716e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -0.247445 *lens_ipow(dy, 6)*lambda + -0.262282 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda + -0.00985945 *y*lens_ipow(dy, 5)*lambda+0.0f;
const double dx32 =  + -1.40646 *dx*dy + -0.0149069 *y*dx + -0.0134932 *x*dy + -6.2211e-05 *x*y + -0.0283354 *x*lens_ipow(dy, 3) + -0.0929513 *x*lens_ipow(dx, 2)*dy*lambda + 0.000122158 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + 5.09055e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.524565 *y*dx*lens_ipow(dy, 4)*lambda+0.0f;
const double dx33 =  + 0.356696  + -2.12968 *lens_ipow(dy, 2) + -0.703228 *lens_ipow(dx, 2) + -0.0447181 *y*dy + -0.000107418 *lens_ipow(y, 2) + -0.0134932 *x*dx + -5.51196e-05 *lens_ipow(x, 2) + -0.0850062 *x*dx*lens_ipow(dy, 2) + -0.0309838 *x*lens_ipow(dx, 3)*lambda + 0.000366473 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 6.66572e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.48467 *y*lens_ipow(dy, 5)*lambda + -1.04913 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + -0.0246486 *lens_ipow(y, 2)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx34 =  + 0.0048754 *y + -0.00663008 *y*lambda + -0.0309838 *x*lens_ipow(dx, 3)*dy + -0.247445 *y*lens_ipow(dy, 6) + -0.262282 *y*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.00492972 *lens_ipow(y, 2)*lens_ipow(dy, 5)+0.0f;
const double dx40 =  + -0.00478712 *dx*lens_ipow(dy, 2) + -0.00389852 *lens_ipow(dx, 3) + -1.77988e-08 *lens_ipow(x, 3) + -2.72935e-07 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0241114 *lens_ipow(dx, 5)*lens_ipow(lambda, 2) + 0.00609385 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + -1.79155e-06 *x*lens_ipow(y, 2)*lens_ipow(dx, 4) + -1.47181e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx41 =  + -0.00493609 *lens_ipow(dy, 3) + -1.86941e-08 *lens_ipow(y, 3) + -0.00805386 *lens_ipow(dx, 2)*dy*lambda + -2.72935e-07 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + 0.00609385 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3) + -1.79155e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 4) + -1.47181e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy+0.0f;
const double dx42 =  + -1.47006 *dx*lens_ipow(dy, 2) + -1.41616 *lens_ipow(dx, 3) + -0.00478712 *x*lens_ipow(dy, 2) + -0.0116956 *x*lens_ipow(dx, 2) + -0.0161077 *y*dx*dy*lambda + -5.59103 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -6.41203 *lens_ipow(dx, 5)*lambda + -9.43505 *dx*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -0.120557 *x*lens_ipow(dx, 4)*lens_ipow(lambda, 2) + 0.0182816 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -3.58309e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3) + -4.90603e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy+0.0f;
const double dx43 =  + -1.46628 *lens_ipow(dy, 3) + -1.47006 *lens_ipow(dx, 2)*dy + -0.0148083 *y*lens_ipow(dy, 2) + -0.00957424 *x*dx*dy + -0.00805386 *y*lens_ipow(dx, 2)*lambda + -2.89594 *lens_ipow(dy, 5) + -2.79551 *lens_ipow(dx, 4)*dy + -2.72935e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -18.8701 *lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.0182816 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -4.90603e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx+0.0f;
const double dx44 =  + 0.656198  + -1.8087 *lambda + 1.31795 *lens_ipow(lambda, 2) + -0.00805386 *y*lens_ipow(dx, 2)*dy + -1.06867 *lens_ipow(dx, 6) + -9.43505 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda + -0.0482228 *x*lens_ipow(dx, 5)*lambda+0.0f;
} break;
