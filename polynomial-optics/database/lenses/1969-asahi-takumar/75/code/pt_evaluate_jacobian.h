case asahi__takumar__1969__75mm:
{
const double dx00 =  + -0.053022  + 0.0873155 *lambda + 0.0110562 *y*dy + -0.000138179 *lens_ipow(y, 2) + 0.0357762 *x*dx + -0.000410574 *lens_ipow(x, 2) + 1.90989 *lens_ipow(dy, 2)*lambda + 2.42458 *lens_ipow(dx, 2)*lambda + -1.80309 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -2.38439 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.0315443 *y*lens_ipow(dx, 2)*dy*lambda + -3.13629e-05 *x*lens_ipow(y, 2)*dx*lambda + -4.30792e-05 *lens_ipow(x, 3)*dx*lambda + 0.140381 *x*lens_ipow(dx, 5) + -2.22342e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + -1.48634e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + -0.000705779 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx01 =  + 0.0906216 *dx*dy + 0.0114583 *y*dx + 0.0110562 *x*dy + -0.000276357 *x*y + 0.0315443 *x*lens_ipow(dx, 2)*dy*lambda + -3.13629e-05 *lens_ipow(x, 2)*y*dx*lambda + -2.22342e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + -1.18907e-11 *lens_ipow(x, 5)*lens_ipow(y, 3) + -0.00105867 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx02 =  + 74.0721  + 1.37223 *lambda + -29.6292 *lens_ipow(dy, 2) + -89.5206 *lens_ipow(dx, 2) + 0.0906216 *y*dy + 0.00572915 *lens_ipow(y, 2) + 0.0178881 *lens_ipow(x, 2) + 4.84915 *x*dx*lambda + -4.76879 *x*dx*lens_ipow(lambda, 2) + 0.0630885 *x*y*dx*dy*lambda + -1.56815e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -1.07698e-05 *lens_ipow(x, 4)*lambda + 0.350951 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -104.434 *lens_ipow(dx, 2)*lens_ipow(lambda, 8) + -0.00105867 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const double dx03 =  + -59.2584 *dx*dy + 0.0906216 *y*dx + 0.0110562 *x*y + 3.81979 *x*dy*lambda + -3.60617 *x*dy*lens_ipow(lambda, 2) + 0.0315443 *x*y*lens_ipow(dx, 2)*lambda + -7.4114e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + -0.00105867 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx04 =  + 1.37223 *dx + 0.0873155 *x + 1.90989 *x*lens_ipow(dy, 2) + 2.42458 *x*lens_ipow(dx, 2) + -3.60617 *x*lens_ipow(dy, 2)*lambda + -4.76879 *x*lens_ipow(dx, 2)*lambda + 0.0315443 *x*y*lens_ipow(dx, 2)*dy + -1.56815e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + -1.07698e-05 *lens_ipow(x, 4)*dx + -7.4114e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -278.49 *lens_ipow(dx, 3)*lens_ipow(lambda, 7)+0.0f;
const double dx10 =  + 0.00983401 *y*dx + -0.00058644 *x*y + 0.145917 *dx*dy*lambda + 0.0395298 *x*dy*lambda + 0.000537148 *x*y*lambda + -0.0345017 *x*dy*lens_ipow(lambda, 2) + 0.000498221 *x*y*lens_ipow(dy, 2) + 0.0733771 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -4.80174e-06 *x*lens_ipow(y, 3)*lens_ipow(lambda, 6)+0.0f;
const double dx11 =  + 0.0310226 *y*dy + -0.00105947 *lens_ipow(y, 2) + 0.00983401 *x*dx + -0.00029322 *lens_ipow(x, 2) + 1.49459 *lens_ipow(dy, 2)*lambda + 1.26317 *lens_ipow(dx, 2)*lambda + 0.00104749 *lens_ipow(y, 2)*lambda + 0.000268574 *lens_ipow(x, 2)*lambda + -0.93776 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.925819 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.00138084 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00196191 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00024911 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.151344 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.0733771 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -2.91186e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -7.2026e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 6)+0.0f;
const double dx12 =  + -59.2635 *dx*dy + 0.00983401 *x*y + 2.52634 *y*dx*lambda + 0.145917 *x*dy*lambda + -1.85164 *y*dx*lens_ipow(lambda, 2) + 0.00130794 *lens_ipow(y, 3)*dx + 0.0733771 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.16475e-05 *lens_ipow(y, 5)*dx*lens_ipow(lambda, 3)+0.0f;
const double dx13 =  + 74.4068  + 0.846415 *lambda + -92.2255 *lens_ipow(dy, 2) + -29.6318 *lens_ipow(dx, 2) + 0.0155113 *lens_ipow(y, 2) + 2.98917 *y*dy*lambda + 0.145917 *x*dx*lambda + 0.0197649 *lens_ipow(x, 2)*lambda + -1.87552 *y*dy*lens_ipow(lambda, 2) + 0.000920557 *lens_ipow(y, 3)*dy + -0.0172508 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.000498221 *lens_ipow(x, 2)*y*dy + 0.227016 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.146754 *x*y*dx*dy*lens_ipow(lambda, 2)+0.0f;
const double dx14 =  + 0.846415 *dy + 1.49459 *y*lens_ipow(dy, 2) + 1.26317 *y*lens_ipow(dx, 2) + 0.000349163 *lens_ipow(y, 3) + 0.145917 *x*dx*dy + 0.0197649 *lens_ipow(x, 2)*dy + 0.000268574 *lens_ipow(x, 2)*y + -1.87552 *y*lens_ipow(dy, 2)*lambda + -1.85164 *y*lens_ipow(dx, 2)*lambda + -0.0345017 *lens_ipow(x, 2)*dy*lambda + 0.151344 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda + 0.146754 *x*y*dx*lens_ipow(dy, 2)*lambda + -1.74712e-05 *lens_ipow(y, 5)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -1.44052e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(lambda, 5)+0.0f;
const double dx20 =  + -0.0120297  + -0.00369512 *lambda + 0.00260987 *lens_ipow(lambda, 2) + -0.00549352 *lens_ipow(dy, 2) + -0.000111884 *y*dy + 2.58398e-06 *lens_ipow(y, 2) + -0.00018973 *x*dx + 7.55191e-06 *lens_ipow(x, 2) + -0.00808708 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00820444 *lens_ipow(dx, 4) + -0.000454356 *y*lens_ipow(dx, 2)*dy + 1.57212e-06 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 9.86858e-06 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 4.26623e-08 *x*lens_ipow(y, 3)*dx*dy + 3.2937e-13 *lens_ipow(x, 6)*lens_ipow(y, 2) + -4.41486e-13 *lens_ipow(x, 6)*lens_ipow(y, 2)*lambda+0.0f;
const double dx21 =  + 2.7499e-05 *y*dx + -0.000111884 *x*dy + 5.16796e-06 *x*y + -0.000454356 *x*lens_ipow(dx, 2)*dy + 3.14423e-06 *x*y*lens_ipow(dy, 2) + -0.015122 *lens_ipow(dx, 3)*dy*lambda + 0.000387585 *y*lens_ipow(dx, 3)*lambda + 6.39935e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 9.41057e-14 *lens_ipow(x, 7)*y + -1.26139e-13 *lens_ipow(x, 7)*y*lambda+0.0f;
const double dx22 =  + -0.907098  + 1.3205 *lens_ipow(dx, 2) + 1.37495e-05 *lens_ipow(y, 2) + -9.4865e-05 *lens_ipow(x, 2) + 0.0779399 *lens_ipow(dy, 2)*lambda + 0.242382 *lens_ipow(dy, 4) + -1.31679 *lens_ipow(dx, 4) + -0.0161742 *x*dx*lens_ipow(dy, 2) + -0.0328178 *x*lens_ipow(dx, 3) + -0.000908711 *x*y*dx*dy + 6.57905e-06 *lens_ipow(x, 3)*dx + -0.0453659 *y*lens_ipow(dx, 2)*dy*lambda + 0.000581377 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 2.13312e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy+0.0f;
const double dx23 =  + -0.010987 *x*dy + -0.000111884 *x*y + 0.15588 *dx*dy*lambda + 0.969527 *dx*lens_ipow(dy, 3) + -0.0161742 *x*lens_ipow(dx, 2)*dy + -0.000454356 *x*y*lens_ipow(dx, 2) + 3.14423e-06 *x*lens_ipow(y, 2)*dy + -0.015122 *y*lens_ipow(dx, 3)*lambda + 2.13312e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx+0.0f;
const double dx24 =  + -0.00369512 *x + 0.00521974 *x*lambda + 0.0779399 *dx*lens_ipow(dy, 2) + -0.015122 *y*lens_ipow(dx, 3)*dy + 0.000193792 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -6.30694e-14 *lens_ipow(x, 7)*lens_ipow(y, 2)+0.0f;
const double dx30 =  + 0.0106195 *dx*dy + -0.000113155 *y*dx + 5.15369e-06 *x*y + 7.01099e-05 *x*dy*lens_ipow(lambda, 2) + 0.000349328 *x*lens_ipow(dy, 3) + 0.000605943 *x*lens_ipow(dx, 2)*dy + -4.55711e-10 *x*lens_ipow(y, 4)*dy + 1.70966e-11 *lens_ipow(x, 3)*lens_ipow(y, 3) + 8.21576e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 3)+0.0f;
const double dx31 =  + -0.011995  + -0.00388882 *lambda + 0.00274317 *lens_ipow(lambda, 2) + -0.000174703 *y*dy + 8.13364e-06 *lens_ipow(y, 2) + -0.000113155 *x*dx + 2.57684e-06 *lens_ipow(x, 2) + -0.0286641 *lens_ipow(dx, 2)*lambda + 0.0437674 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -1.59773e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.0259181 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -9.11423e-10 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 1.28225e-11 *lens_ipow(x, 4)*lens_ipow(y, 2) + 5.47717e-07 *lens_ipow(x, 3)*y*dx*lens_ipow(dy, 3) + -1.57386 *lens_ipow(dx, 2)*lens_ipow(dy, 6)*lambda+0.0f;
const double dx32 =  + 1.58793 *dx*dy + 0.0106195 *x*dy + -0.000113155 *x*y + -0.0573283 *y*dx*lambda + -2.02152 *lens_ipow(dx, 3)*dy + 0.0875349 *y*dx*lens_ipow(lambda, 2) + 0.000605943 *lens_ipow(x, 2)*dx*dy + -1.06516e-05 *lens_ipow(y, 3)*dx*lambda + -9.23532 *dx*lens_ipow(dy, 5) + -0.0518362 *y*dx*lens_ipow(lambda, 4) + 2.73859e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dy, 3) + -3.14772 *y*dx*lens_ipow(dy, 6)*lambda+0.0f;
const double dx33 =  + -0.906862  + 1.21967 *lens_ipow(dy, 2) + 0.793966 *lens_ipow(dx, 2) + -8.73516e-05 *lens_ipow(y, 2) + 0.0106195 *x*dx + -0.505379 *lens_ipow(dx, 4) + 3.50549e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.000523992 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.000302972 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -23.0883 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -2.27856e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 8.21576e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -9.44317 *y*lens_ipow(dx, 2)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx34 =  + -0.00388882 *y + 0.00548635 *y*lambda + -0.0286641 *y*lens_ipow(dx, 2) + 0.0875349 *y*lens_ipow(dx, 2)*lambda + 7.01099e-05 *lens_ipow(x, 2)*dy*lambda + -5.32578e-06 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.103672 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -1.57386 *y*lens_ipow(dx, 2)*lens_ipow(dy, 6)+0.0f;
const double dx40 =  + -0.000224788 *dx + -5.34776e-06 *x + -0.015059 *dx*lens_ipow(dy, 2) + -0.000349488 *y*dx*dy + -0.000164252 *x*lens_ipow(dy, 2) + -1.52975e-06 *lens_ipow(y, 2)*dx*lambda + -0.114984 *lens_ipow(dx, 5) + -0.00781226 *x*lens_ipow(dx, 4) + -0.000218218 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -2.90894e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2)+0.0f;
const double dx41 =  + -0.0167265 *lens_ipow(dy, 3) + -0.0156593 *lens_ipow(dx, 2)*dy + -0.000656905 *y*lens_ipow(dy, 2) + -0.000236292 *y*lens_ipow(dx, 2) + -0.000349488 *x*dx*dy + -6.57934e-06 *lens_ipow(y, 2)*dy*lambda + -3.05949e-06 *x*y*dx*lambda+0.0f;
const double dx42 =  + -0.000224788 *x + -2.04698 *dx*lens_ipow(dy, 2) + -0.857848 *lens_ipow(dx, 3) + -0.0313187 *y*dx*dy + -0.000236292 *lens_ipow(y, 2)*dx + -0.015059 *x*lens_ipow(dy, 2) + -0.000349488 *x*y*dy + -1.52975e-06 *x*lens_ipow(y, 2)*lambda + -8.53115 *lens_ipow(dx, 5) + -0.574918 *x*lens_ipow(dx, 4) + -0.0156245 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.000218218 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -1.45447e-06 *lens_ipow(x, 4)*dx+0.0f;
const double dx43 =  + 0.0274911 *dy + -2.11281 *lens_ipow(dy, 3) + -2.04698 *lens_ipow(dx, 2)*dy + -0.0501794 *y*lens_ipow(dy, 2) + -0.0156593 *y*lens_ipow(dx, 2) + -0.000656905 *lens_ipow(y, 2)*dy + -0.0301181 *x*dx*dy + -0.000349488 *x*y*dx + -0.000164252 *lens_ipow(x, 2)*dy + -2.19311e-06 *lens_ipow(y, 3)*lambda+0.0f;
const double dx44 =  + 2.1416  + -9.51443 *lambda + 14.8678 *lens_ipow(lambda, 2) + -7.97227 *lens_ipow(lambda, 3) + -2.19311e-06 *lens_ipow(y, 3)*dy + -1.52975e-06 *x*lens_ipow(y, 2)*dx+0.0f;
} break;
