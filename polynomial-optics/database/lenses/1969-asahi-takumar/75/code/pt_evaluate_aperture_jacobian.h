case asahi__takumar__1969__75mm:
{
const double dx00 =  + 0.337152  + 0.181237 *lambda + -0.124195 *lens_ipow(lambda, 2) + -0.16488 *lens_ipow(dy, 2) + -0.280192 *lens_ipow(dx, 2) + 0.00106194 *y*dy + -6.76196e-05 *lens_ipow(y, 2) + 0.00476624 *x*dx + -0.000203859 *lens_ipow(x, 2) + 0.241217 *lens_ipow(dy, 4) + -0.0151729 *x*dx*lens_ipow(dy, 2) + 0.101893 *y*lens_ipow(dx, 4)*dy + -3.60643e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx01 =  + -0.133001 *dx*dy + 0.00286207 *y*dx + 0.00106194 *x*dy + -0.000135239 *x*y + -0.0124384 *y*lens_ipow(dx, 3) + -4.30883 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.101893 *x*lens_ipow(dx, 4)*dy + -5.38275 *dx*lens_ipow(dy, 7) + -2.88515e-12 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx02 =  + 45.6738  + 9.17616 *lambda + -6.27137 *lens_ipow(lambda, 2) + -26.3671 *lens_ipow(dy, 2) + -81.1419 *lens_ipow(dx, 2) + -0.133001 *y*dy + 0.00143104 *lens_ipow(y, 2) + -0.560383 *x*dx + 0.00238312 *lens_ipow(x, 2) + 23.7742 *lens_ipow(dx, 4) + -0.0186575 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00758644 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -12.9265 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.407571 *x*y*lens_ipow(dx, 3)*dy + -5.38275 *y*lens_ipow(dy, 7)+0.0f;
const double dx03 =  + -52.7341 *dx*dy + -0.133001 *y*dx + -0.32976 *x*dy + 0.00106194 *x*y + 0.964868 *x*lens_ipow(dy, 3) + -0.0151729 *lens_ipow(x, 2)*dx*dy + -12.9265 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.101893 *x*y*lens_ipow(dx, 4) + -37.6793 *y*dx*lens_ipow(dy, 6)+0.0f;
const double dx04 =  + 9.17616 *dx + 0.181237 *x + -12.5427 *dx*lambda + -0.248391 *x*lambda+0.0f;
const double dx10 =  + -0.140408 *dx*dy + 0.00105714 *y*dx + 0.00284699 *x*dy + -0.000135569 *x*y + -0.0120667 *x*lens_ipow(dy, 3) + 0.107653 *y*dx*lens_ipow(dy, 4) + -38.76 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + -6.63585e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + 6.93373e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)*lambda+0.0f;
const double dx11 =  + 0.337942  + 0.179175 *lambda + -0.123169 *lens_ipow(lambda, 2) + -0.279266 *lens_ipow(dy, 2) + -0.163908 *lens_ipow(dx, 2) + 0.00475408 *y*dy + -0.000204374 *lens_ipow(y, 2) + 0.00105714 *x*dx + -6.77846e-05 *lens_ipow(x, 2) + 0.237216 *lens_ipow(dx, 4) + -0.0152726 *y*lens_ipow(dx, 2)*dy + 0.107653 *x*dx*lens_ipow(dy, 4) + -8.29481e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + 8.66717e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda+0.0f;
const double dx12 =  + -52.5382 *dx*dy + -0.327817 *y*dx + -0.140408 *x*dy + 0.00105714 *x*y + 0.948863 *y*lens_ipow(dx, 3) + -0.0152726 *lens_ipow(y, 2)*dx*dy + 0.107653 *x*y*lens_ipow(dy, 4) + -193.8 *x*lens_ipow(dx, 4)*lens_ipow(dy, 3)+0.0f;
const double dx13 =  + 45.6991  + 9.07613 *lambda + -6.18285 *lens_ipow(lambda, 2) + -81.1739 *lens_ipow(dy, 2) + -26.2691 *lens_ipow(dx, 2) + -0.558532 *y*dy + 0.00237704 *lens_ipow(y, 2) + -0.140408 *x*dx + 0.0014235 *lens_ipow(x, 2) + 24.5858 *lens_ipow(dy, 4) + -0.0076363 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0181001 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.430611 *x*y*dx*lens_ipow(dy, 3) + -116.28 *x*lens_ipow(dx, 5)*lens_ipow(dy, 2)+0.0f;
const double dx14 =  + 9.07613 *dy + 0.179175 *y + -12.3657 *dy*lambda + -0.246337 *y*lambda + 1.73343e-12 *lens_ipow(x, 4)*lens_ipow(y, 5)+0.0f;
const double dx20 =  + -0.0194228  + 0.00567479 *lambda + -0.00390186 *lens_ipow(lambda, 2) + -0.00900144 *lens_ipow(dy, 2) + -0.0234731 *lens_ipow(dx, 2) + -6.18621e-05 *y*dy + -4.26782e-06 *lens_ipow(y, 2) + -0.000223174 *x*dx + -1.27451e-05 *lens_ipow(x, 2) + -0.0395955 *lens_ipow(dx, 4) + -0.00195066 *x*lens_ipow(dx, 3) + 5.37338e-07 *x*lens_ipow(y, 2)*dx + -0.000405426 *y*lens_ipow(dy, 3)*lambda + 0.000258113 *x*y*lens_ipow(dx, 3)*dy + 2.54272e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.66076e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2)+0.0f;
const double dx21 =  + -0.0160031 *dx*dy + -0.000146043 *y*dx + -6.18621e-05 *x*dy + -8.53564e-06 *x*y + -0.0240658 *lens_ipow(dx, 3)*dy + 5.37338e-07 *lens_ipow(x, 2)*y*dx + -0.000405426 *x*lens_ipow(dy, 3)*lambda + -0.121907 *dx*lens_ipow(dy, 5) + 0.000129057 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 2.54272e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy+0.0f;
const double dx22 =  + 0.357088  + -0.741251 *lens_ipow(dy, 2) + -2.13837 *lens_ipow(dx, 2) + -0.0160031 *y*dy + -7.30217e-05 *lens_ipow(y, 2) + -0.0469461 *x*dx + -0.000111587 *lens_ipow(x, 2) + -0.0721974 *y*lens_ipow(dx, 2)*dy + -0.158382 *x*lens_ipow(dx, 3) + -0.00292598 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 2.68669e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 4.11539 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.121907 *y*lens_ipow(dy, 5) + 0.00038717 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -6.64305e-08 *lens_ipow(x, 5)*dx+0.0f;
const double dx23 =  + -1.4825 *dx*dy + -0.0160031 *y*dx + -0.0180029 *x*dy + -6.18621e-05 *x*y + -0.0240658 *y*lens_ipow(dx, 3) + 2.74359 *lens_ipow(dx, 3)*dy*lambda + -0.00121628 *x*y*lens_ipow(dy, 2)*lambda + -0.609534 *y*dx*lens_ipow(dy, 4) + 0.000129057 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 8.47575e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const double dx24 =  + 0.00567479 *x + -0.00780372 *x*lambda + 1.3718 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.000405426 *x*y*lens_ipow(dy, 3)+0.0f;
const double dx30 =  + -0.0159704 *dx*dy + -6.8774e-05 *y*dx + -0.000146254 *x*dy + -8.4966e-06 *x*y + -0.0254752 *dx*lens_ipow(dy, 3) + 5.42942e-07 *x*lens_ipow(y, 2)*dy + -0.111508 *lens_ipow(dx, 5)*dy + 0.000135715 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 2.52006e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -0.00198883 *y*lens_ipow(dx, 5)*lambda+0.0f;
const double dx31 =  + -0.0194519  + 0.00574809 *lambda + -0.00394983 *lens_ipow(lambda, 2) + -0.0235361 *lens_ipow(dy, 2) + -0.00893646 *lens_ipow(dx, 2) + -0.00022471 *y*dy + -1.27399e-05 *lens_ipow(y, 2) + -6.8774e-05 *x*dx + -4.2483e-06 *lens_ipow(x, 2) + -0.0393011 *lens_ipow(dy, 4) + -0.00195164 *y*lens_ipow(dy, 3) + 5.42942e-07 *lens_ipow(x, 2)*y*dy + -1.67665e-07 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 0.00027143 *x*y*dx*lens_ipow(dy, 3) + 2.52006e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -0.00198883 *x*lens_ipow(dx, 5)*lambda+0.0f;
const double dx32 =  + -1.46965 *dx*dy + -0.0178729 *y*dx + -0.0159704 *x*dy + -6.8774e-05 *x*y + -0.0254752 *x*lens_ipow(dy, 3) + 2.56337 *dx*lens_ipow(dy, 3)*lambda + -0.55754 *x*lens_ipow(dx, 4)*dy + 0.000135715 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + 8.40021e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.00994413 *x*y*lens_ipow(dx, 4)*lambda+0.0f;
const double dx33 =  + 0.357023  + -2.13884 *lens_ipow(dy, 2) + -0.734823 *lens_ipow(dx, 2) + -0.0470723 *y*dy + -0.000112355 *lens_ipow(y, 2) + -0.0159704 *x*dx + -7.31271e-05 *lens_ipow(x, 2) + -0.157204 *y*lens_ipow(dy, 3) + -0.00292745 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0764256 *x*dx*lens_ipow(dy, 2) + 2.71471e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 3.84505 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -6.70661e-08 *lens_ipow(y, 5)*dy + -0.111508 *x*lens_ipow(dx, 5) + 0.000407146 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)+0.0f;
const double dx34 =  + 0.00574809 *y + -0.00789965 *y*lambda + 1.28168 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.00198883 *x*y*lens_ipow(dx, 5)+0.0f;
const double dx40 =  + -2.14855e-06 *x + -0.00546335 *dx*lens_ipow(dy, 2) + -0.00602647 *lens_ipow(dx, 3) + 6.34323e-07 *lens_ipow(y, 2)*dx + 1.0569e-06 *x*y*dy + -4.32192e-07 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -0.000413755 *x*lens_ipow(dy, 4)*lambda + 0.0301361 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx41 =  + -2.22407e-06 *y + -0.00555939 *lens_ipow(dy, 3) + -0.0054753 *lens_ipow(dx, 2)*dy + 1.26865e-06 *x*y*dx + 5.2845e-07 *lens_ipow(x, 2)*dy + -4.47705e-07 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.00420706 *y*lens_ipow(dx, 6)*lens_ipow(lambda, 2) + -0.131047 *lens_ipow(dy, 7)*lens_ipow(lambda, 3) + 0.0301361 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx42 =  + -1.74599 *dx*lens_ipow(dy, 2) + -1.46008 *lens_ipow(dx, 3) + -0.0109506 *y*dx*dy + -0.00546335 *x*lens_ipow(dy, 2) + -0.0180794 *x*lens_ipow(dx, 2) + 6.34323e-07 *x*lens_ipow(y, 2) + -3.02794 *lens_ipow(dx, 5) + -2.16096e-07 *lens_ipow(x, 4)*dx + -123.975 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda + -0.0126212 *lens_ipow(y, 2)*lens_ipow(dx, 5)*lens_ipow(lambda, 2) + 0.0904083 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 3)+0.0f;
const double dx43 =  + -1.54785 *lens_ipow(dy, 3) + -1.74599 *lens_ipow(dx, 2)*dy + -0.0166782 *y*lens_ipow(dy, 2) + -0.0054753 *y*lens_ipow(dx, 2) + -0.0109267 *x*dx*dy + 5.2845e-07 *lens_ipow(x, 2)*y + -2.23853e-07 *lens_ipow(y, 4)*dy + -0.000827509 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda + -34.2358 *lens_ipow(dy, 7)*lambda + -123.975 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + -0.917328 *y*lens_ipow(dy, 6)*lens_ipow(lambda, 3) + 0.0904083 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx44 =  + 0.657017  + -1.8101 *lambda + 1.31772 *lens_ipow(lambda, 2) + -0.000206877 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -4.27947 *lens_ipow(dy, 8) + -30.9937 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + -0.00420706 *lens_ipow(y, 2)*lens_ipow(dx, 6)*lambda + -0.393141 *y*lens_ipow(dy, 7)*lens_ipow(lambda, 2) + 0.0904083 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
} break;
