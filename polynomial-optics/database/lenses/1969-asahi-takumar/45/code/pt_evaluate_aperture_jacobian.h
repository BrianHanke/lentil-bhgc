case asahi__takumar__1969__45mm:
{
const double dx00 =  + 0.325195  + 0.219698 *lambda + -0.15608 *lens_ipow(lambda, 2) + -0.269509 *lens_ipow(dx, 2) + 0.00478297 *y*dy + -0.000166685 *lens_ipow(y, 2) + 0.00848016 *x*dx + -0.000598634 *lens_ipow(x, 2) + -0.282869 *lens_ipow(dy, 2)*lambda + -0.00541369 *y*dy*lambda + 0.000104134 *lens_ipow(x, 2)*lambda + -2.23761e-07 *lens_ipow(y, 4) + 0.0390163 *y*lens_ipow(dx, 2)*dy*lambda + -0.0828952 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.61907e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -4.16768e-09 *lens_ipow(x, 6) + 1.1269 *lens_ipow(dy, 4)*lens_ipow(lambda, 3) + -1.28964e-11 *lens_ipow(x, 2)*lens_ipow(y, 6) + 5.21813e-11 *lens_ipow(x, 6)*lens_ipow(y, 2)*lambda+0.0f;
const double dx01 =  + -0.138007 *dx*dy + 0.00454395 *y*dx + 0.00478297 *x*dy + -0.00033337 *x*y + -0.00541369 *x*dy*lambda + -0.01932 *y*lens_ipow(dx, 3) + -8.95046e-07 *x*lens_ipow(y, 3) + 0.0390163 *x*lens_ipow(dx, 2)*dy*lambda + -6.47629e-09 *lens_ipow(x, 5)*y + -38.2504 *lens_ipow(dx, 3)*lens_ipow(dy, 5) + -2.57929e-11 *lens_ipow(x, 3)*lens_ipow(y, 5) + 1.4909e-11 *lens_ipow(x, 7)*y*lambda+0.0f;
const double dx02 =  + 27.2982  + 5.74527 *lambda + -3.94359 *lens_ipow(lambda, 2) + -15.6996 *lens_ipow(dy, 2) + -46.6277 *lens_ipow(dx, 2) + -0.138007 *y*dy + 0.00227197 *lens_ipow(y, 2) + -0.539018 *x*dx + 0.00424008 *lens_ipow(x, 2) + -0.0289801 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.0780327 *x*y*dx*dy*lambda + -0.0414476 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -114.751 *y*lens_ipow(dx, 2)*lens_ipow(dy, 5)+0.0f;
const double dx03 =  + -31.3992 *dx*dy + -0.138007 *y*dx + 0.00478297 *x*y + -0.565738 *x*dy*lambda + -0.00541369 *x*y*lambda + 0.0390163 *x*y*lens_ipow(dx, 2)*lambda + -0.0828952 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 2) + 4.50761 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -191.252 *y*lens_ipow(dx, 3)*lens_ipow(dy, 4)+0.0f;
const double dx04 =  + 5.74527 *dx + 0.219698 *x + -7.88718 *dx*lambda + -0.31216 *x*lambda + -0.282869 *x*lens_ipow(dy, 2) + -0.00541369 *x*y*dy + 3.47114e-05 *lens_ipow(x, 3) + 0.0390163 *x*y*lens_ipow(dx, 2)*dy + -0.0828952 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lambda + 3.38071 *x*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + 7.45448e-12 *lens_ipow(x, 7)*lens_ipow(y, 2)+0.0f;
const double dx10 =  + -0.101926 *dx*dy + 0.00171584 *y*dx + 0.00471313 *x*dy + -0.000346525 *x*y + 0.000164141 *x*y*lambda + -0.338812 *dx*lens_ipow(dy, 3) + -0.380277 *lens_ipow(dx, 3)*dy + 0.0178232 *y*dx*lens_ipow(dy, 2) + -0.0214083 *x*lens_ipow(dy, 3) + -1.30272e-06 *x*lens_ipow(y, 3) + -1.37312e-06 *lens_ipow(x, 3)*y + -2.08426e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx*dy+0.0f;
const double dx11 =  + 0.333001  + 0.196075 *lambda + -0.144811 *lens_ipow(lambda, 2) + -0.272971 *lens_ipow(dy, 2) + -0.162163 *lens_ipow(dx, 2) + 0.00845861 *y*dy + -0.000530501 *lens_ipow(y, 2) + 0.00171584 *x*dx + -0.000173262 *lens_ipow(x, 2) + 0.000241036 *lens_ipow(y, 2)*lambda + 8.20706e-05 *lens_ipow(x, 2)*lambda + 0.22715 *lens_ipow(dx, 4) + -0.0294375 *y*lens_ipow(dx, 2)*dy + -1.5881e-06 *lens_ipow(y, 4) + 0.0178232 *x*dx*lens_ipow(dy, 2) + -1.95408e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -3.43279e-07 *lens_ipow(x, 4) + -4.16853e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy+0.0f;
const double dx12 =  + -31.5128 *dx*dy + -0.324325 *y*dx + -0.101926 *x*dy + 0.00171584 *x*y + 0.908599 *y*lens_ipow(dx, 3) + -0.0294375 *lens_ipow(y, 2)*dx*dy + -0.338812 *x*lens_ipow(dy, 3) + -1.14083 *x*lens_ipow(dx, 2)*dy + 0.0178232 *x*y*lens_ipow(dy, 2) + -6.94755e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy+0.0f;
const double dx13 =  + 27.3668  + 5.53942 *lambda + -3.78333 *lens_ipow(lambda, 2) + -46.7971 *lens_ipow(dy, 2) + -15.7564 *lens_ipow(dx, 2) + -0.545941 *y*dy + 0.0042293 *lens_ipow(y, 2) + -0.101926 *x*dx + 0.00235656 *lens_ipow(x, 2) + -0.0147187 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.01643 *x*dx*lens_ipow(dy, 2) + -0.380277 *x*lens_ipow(dx, 3) + 0.0356464 *x*y*dx*dy + -0.0321124 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -6.94755e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx+0.0f;
const double dx14 =  + 5.53942 *dy + 0.196075 *y + -7.56667 *dy*lambda + -0.289622 *y*lambda + 8.03454e-05 *lens_ipow(y, 3) + 8.20706e-05 *lens_ipow(x, 2)*y+0.0f;
const double dx20 =  + -0.0327478  + 0.0108074 *lambda + -0.0077526 *lens_ipow(lambda, 2) + -0.0136678 *lens_ipow(dy, 2) + -0.0440505 *lens_ipow(dx, 2) + -1.63791e-05 *lens_ipow(y, 2) + -5.99543e-05 *lens_ipow(x, 2) + -0.00025191 *y*dy*lambda + -0.00224887 *x*dx*lambda + -2.3635e-08 *lens_ipow(y, 4) + 3.86805e-06 *x*lens_ipow(y, 2)*dx + 0.00504348 *x*dx*lens_ipow(lambda, 4) + 2.25714e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -2.58574e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -1.28492e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 3.4608e-08 *lens_ipow(x, 5)*dx + 1.2398e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + 0.0129837 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + -0.00690138 *x*dx*lens_ipow(lambda, 7) + 3.35327e-09 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx21 =  + -0.027056 *dx*dy + -0.000371086 *y*dx + -3.27582e-05 *x*y + -0.00025191 *x*dy*lambda + -9.45402e-08 *x*lens_ipow(y, 3) + 3.86805e-06 *lens_ipow(x, 2)*y*dx + -0.577382 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 5.44063e-09 *lens_ipow(y, 5)*dx + 2.25714e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -5.13967e-10 *lens_ipow(x, 5)*y + 4.9592e-10 *lens_ipow(x, 5)*y*lambda + 0.00649186 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx22 =  + 0.356311  + -0.669295 *lens_ipow(dy, 2) + -2.24715 *lens_ipow(dx, 2) + -0.027056 *y*dy + -0.000185543 *lens_ipow(y, 2) + -0.0881009 *x*dx + -0.00112444 *lens_ipow(x, 2)*lambda + 1.93403e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 3.65389 *lens_ipow(dx, 4)*lambda + -1.73215 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 9.06771e-10 *lens_ipow(y, 6) + 0.00252174 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + 5.76801e-09 *lens_ipow(x, 6) + 0.0194756 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.00345069 *lens_ipow(x, 2)*lens_ipow(lambda, 7) + 9.58077e-10 *lens_ipow(x, 7)*dx*lambda+0.0f;
const double dx23 =  + -1.33859 *dx*dy + -0.027056 *y*dx + -0.0273356 *x*dy + -0.00025191 *x*y*lambda + -1.73215 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 7.52379e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -1.0343e-07 *lens_ipow(x, 5)*dy + 0.0194756 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx24 =  + 0.0108074 *x + -0.0155052 *x*lambda + -0.00025191 *x*y*dy + -0.00112444 *lens_ipow(x, 2)*dx + 0.730779 *lens_ipow(dx, 5) + 0.010087 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 3) + 2.4796e-10 *lens_ipow(x, 5)*lens_ipow(y, 2) + -0.0241548 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 6) + 4.79038e-10 *lens_ipow(x, 7)*lens_ipow(dx, 2)+0.0f;
const double dx30 =  + -0.0295744 *dx*dy + -0.000221855 *y*dx + -0.000349672 *x*dy + -4.0577e-05 *x*y + -7.64901e-08 *x*lens_ipow(y, 3) + 1.18999e-07 *x*lens_ipow(y, 3)*lambda + 5.72818e-09 *lens_ipow(y, 5)*dx + 1.85201e-08 *x*lens_ipow(y, 4)*dy + 1.78845e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 2.52781e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 2.07123e-08 *lens_ipow(x, 4)*y*dx + 4.94066e-07 *lens_ipow(y, 4)*dx*dy*lambda + 0.000371372 *x*y*lens_ipow(dx, 4)*lambda + 5.85074e-08 *lens_ipow(x, 5)*lens_ipow(dy, 3)+0.0f;
const double dx31 =  + -0.0331327  + 0.0124205 *lambda + -0.00908153 *lens_ipow(lambda, 2) + -0.0441313 *lens_ipow(dy, 2) + -0.0148865 *lens_ipow(dx, 2) + -0.000802065 *y*dy + -6.10213e-05 *lens_ipow(y, 2) + -0.000221855 *x*dx + -2.02885e-05 *lens_ipow(x, 2) + -1.14735e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.78499e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 3.27344e-08 *lens_ipow(y, 5)*dy + 2.86409e-08 *x*lens_ipow(y, 4)*dx + 3.70402e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 1.78845e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 1.26391e-08 *lens_ipow(x, 4)*y*dy + 4.14247e-09 *lens_ipow(x, 5)*dx + 1.97626e-06 *x*lens_ipow(y, 3)*dx*dy*lambda + 0.000185686 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lambda + 1.12597e-06 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx32 =  + -1.39311 *dx*dy + -0.029773 *y*dx + -0.0295744 *x*dy + -0.000221855 *x*y + 5.72818e-09 *x*lens_ipow(y, 5) + 5.96151e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + 4.14247e-09 *lens_ipow(x, 5)*y + 4.94066e-07 *x*lens_ipow(y, 4)*dy*lambda + 0.000742744 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lambda + 556.49 *lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx33 =  + 0.356629  + -2.21909 *lens_ipow(dy, 2) + -0.696557 *lens_ipow(dx, 2) + -0.0882625 *y*dy + -0.000401033 *lens_ipow(y, 2) + -0.0295744 *x*dx + -0.000174836 *lens_ipow(x, 2) + 5.45573e-09 *lens_ipow(y, 6) + 9.26004e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 6.31953e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 22.7909 *lens_ipow(dy, 6)*lambda + 4.94066e-07 *x*lens_ipow(y, 4)*dx*lambda + 4.50387e-07 *lens_ipow(y, 5)*dy*lens_ipow(lambda, 2) + 2.92537e-08 *lens_ipow(x, 6)*lens_ipow(dy, 2) + 695.612 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx34 =  + 0.0124205 *y + -0.0181631 *y*lambda + 5.94996e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + 3.25585 *lens_ipow(dy, 7) + 4.94066e-07 *x*lens_ipow(y, 4)*dx*dy + 0.000185686 *lens_ipow(x, 2)*y*lens_ipow(dx, 4) + 4.50387e-07 *lens_ipow(y, 5)*lens_ipow(dy, 2)*lambda + 139.122 *lens_ipow(dx, 4)*lens_ipow(dy, 5)+0.0f;
const double dx40 =  + -0.0124981 *dx*lens_ipow(dy, 2) + -0.000142221 *y*dx*dy + -0.000148341 *x*lens_ipow(dy, 2) + -1.28482e-07 *x*lens_ipow(y, 2) + -0.0148087 *lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -5.32297e-10 *lens_ipow(x, 5) + -0.00437924 *x*lens_ipow(dx, 4)*lambda + -0.791721 *lens_ipow(dx, 7) + 0.000758593 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4)*lambda + 2.86874 *lens_ipow(dx, 9) + 0.285808 *y*lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx41 =  + -0.00923037 *lens_ipow(dy, 3) + -0.0114258 *lens_ipow(dx, 2)*dy + -0.000251528 *y*lens_ipow(dy, 2) + -0.000170151 *y*lens_ipow(dx, 2) + -0.000142221 *x*dx*dy + -1.28482e-07 *lens_ipow(x, 2)*y + -4.46035e-10 *lens_ipow(y, 5) + -0.395153 *lens_ipow(dy, 9) + 0.285808 *x*lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx42 =  + -1.91349 *dx*lens_ipow(dy, 2) + -0.0228516 *y*dx*dy + -0.000170151 *lens_ipow(y, 2)*dx + -0.0124981 *x*lens_ipow(dy, 2) + -0.000142221 *x*y*dy + -0.85969 *lens_ipow(dx, 3)*lambda + -20.1296 *lens_ipow(dx, 5) + -0.0444261 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.00875847 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lambda + 63.4855 *lens_ipow(dx, 7) + -5.54205 *x*lens_ipow(dx, 6) + -93.9516 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda + 0.000252864 *lens_ipow(x, 3)*lens_ipow(dy, 4)*lambda + 25.8186 *x*lens_ipow(dx, 8) + 0.857425 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx43 =  + -1.10085 *lens_ipow(dy, 3) + -1.91349 *lens_ipow(dx, 2)*dy + -0.0276911 *y*lens_ipow(dy, 2) + -0.0114258 *y*lens_ipow(dx, 2) + -0.000251528 *lens_ipow(y, 2)*dy + -0.0249962 *x*dx*dy + -0.000142221 *x*y*dx + -0.000148341 *lens_ipow(x, 2)*dy + -6.21889 *lens_ipow(dy, 5) + -93.9516 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + 0.00101146 *lens_ipow(x, 3)*dx*lens_ipow(dy, 3)*lambda + -3.55638 *y*lens_ipow(dy, 8) + 1.42904 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx44 =  + 0.661109  + -1.82146 *lambda + 1.32557 *lens_ipow(lambda, 2) + -0.214922 *lens_ipow(dx, 4) + -0.0296174 *x*lens_ipow(dx, 3)*lambda + -0.00218962 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -23.4879 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + 0.000252864 *lens_ipow(x, 3)*dx*lens_ipow(dy, 4) + 0.285808 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 5)+0.0f;
} break;
