case asahi__takumar__1969__45mm:
{
const double dx00 =  + -0.122102  + 0.364636 *lambda + -0.274463 *lens_ipow(lambda, 2) + 0.578237 *lens_ipow(dx, 2) + 0.0171559 *y*dy + -0.000435656 *lens_ipow(y, 2) + 0.0535952 *x*dx + -0.00123746 *lens_ipow(x, 2) + 1.67338 *lens_ipow(dy, 2)*lambda + 0.000239245 *lens_ipow(y, 2)*lambda + 0.000638838 *lens_ipow(x, 2)*lambda + -0.862595 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -2.14301e-05 *lens_ipow(y, 3)*dy + -8.60866e-07 *lens_ipow(y, 4) + 0.00165052 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -3.37642e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -6.73123e-05 *lens_ipow(x, 3)*dx + -4.00152e-06 *lens_ipow(x, 4) + -3.99083 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.195643 *x*lens_ipow(dx, 5) + 3.89272 *lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -2.5081e-13 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const double dx01 =  + 0.0150968 *y*dx + 0.0171559 *x*dy + -0.000871312 *x*y + 0.00047849 *x*y*lambda + -6.42903e-05 *x*lens_ipow(y, 2)*dy + -3.44346e-06 *x*lens_ipow(y, 3) + -2.25095e-06 *lens_ipow(x, 3)*y + -5.75177e-06 *lens_ipow(y, 4)*dx*dy + -1.4332e-13 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const double dx02 =  + 44.7297  + 0.476743 *lambda + -19.0984 *lens_ipow(dy, 2) + -55.2258 *lens_ipow(dx, 2) + 0.00754839 *lens_ipow(y, 2) + 1.15647 *x*dx + 0.0267976 *lens_ipow(x, 2) + -1.72519 *x*dx*lens_ipow(dy, 2) + -1.68281e-05 *lens_ipow(x, 4) + -1.15035e-06 *lens_ipow(y, 5)*dy + 0.489107 *lens_ipow(x, 2)*lens_ipow(dx, 4)+0.0f;
const double dx03 =  + -38.1969 *dx*dy + 0.0171559 *x*y + 3.34676 *x*dy*lambda + -1.72519 *x*lens_ipow(dx, 2)*dy + -2.14301e-05 *x*lens_ipow(y, 3) + 0.00110035 *lens_ipow(x, 3)*dy + -7.98166 *x*dy*lens_ipow(lambda, 3) + -1.15035e-06 *lens_ipow(y, 5)*dx + 7.78543 *x*dy*lens_ipow(lambda, 5)+0.0f;
const double dx04 =  + 0.476743 *dx + 0.364636 *x + -0.548926 *x*lambda + 1.67338 *x*lens_ipow(dy, 2) + 0.000239245 *x*lens_ipow(y, 2) + 0.000212946 *lens_ipow(x, 3) + -11.9725 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 19.4636 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx10 =  + 0.0170665 *y*dx + 0.0151372 *x*dy + -0.000885944 *x*y + 0.000473447 *x*y*lambda + -2.15342e-06 *x*lens_ipow(y, 3) + -6.33929e-05 *lens_ipow(x, 2)*y*dx + -3.32314e-06 *lens_ipow(x, 3)*y + -5.64743e-06 *lens_ipow(x, 4)*dx*dy + -1.65968e-13 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const double dx11 =  + -0.0405255  + 0.0641527 *lambda + 0.579352 *lens_ipow(dy, 2) + 0.450261 *lens_ipow(dx, 2) + 0.0560546 *y*dy + -0.00415963 *lens_ipow(y, 2) + 0.0170665 *x*dx + -0.000442972 *lens_ipow(x, 2) + 0.0114304 *lens_ipow(y, 2)*lambda + 0.000236723 *lens_ipow(x, 2)*lambda + -0.00999206 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.00169822 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.000135785 *lens_ipow(y, 3)*dy + -3.23013e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.1131e-05 *lens_ipow(x, 3)*dx + -8.30784e-07 *lens_ipow(x, 4) + -1.53731 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.190835 *y*lens_ipow(dy, 5) + -3.89863e-05 *lens_ipow(y, 4)*lens_ipow(lambda, 2) + 3.26067e-07 *lens_ipow(y, 5)*dy + 4.81606e-05 *lens_ipow(y, 4)*lens_ipow(lambda, 3) + -2.90445e-13 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx12 =  + -38.1337 *dx*dy + 0.900522 *y*dx + 0.0170665 *x*y + 0.00113215 *lens_ipow(y, 3)*dx + -2.1131e-05 *lens_ipow(x, 3)*y + -3.07462 *y*dx*lens_ipow(dy, 2)*lambda + -1.12949e-06 *lens_ipow(x, 5)*dy+0.0f;
const double dx13 =  + 44.7372  + 0.433101 *lambda + -54.9852 *lens_ipow(dy, 2) + -19.0668 *lens_ipow(dx, 2) + 1.1587 *y*dy + 0.0280273 *lens_ipow(y, 2) + 0.00756858 *lens_ipow(x, 2) + -3.39464e-05 *lens_ipow(y, 4) + -3.07462 *y*lens_ipow(dx, 2)*dy*lambda + 0.477086 *lens_ipow(y, 2)*lens_ipow(dy, 4) + 5.43445e-08 *lens_ipow(y, 6) + -1.12949e-06 *lens_ipow(x, 5)*dx+0.0f;
const double dx14 =  + 0.433101 *dy + 0.0641527 *y + 0.00381013 *lens_ipow(y, 3) + 0.000236723 *lens_ipow(x, 2)*y + -0.00666138 *lens_ipow(y, 3)*lambda + -1.53731 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.55945e-05 *lens_ipow(y, 5)*lambda + 2.88963e-05 *lens_ipow(y, 5)*lens_ipow(lambda, 2)+0.0f;
const double dx20 =  + -0.0199554  + -0.00714196 *lambda + 0.00571261 *lens_ipow(lambda, 2) + -0.00884666 *lens_ipow(dy, 2) + -0.000293443 *y*dy + 1.44832e-05 *lens_ipow(y, 2) + -0.000443752 *x*dx + 4.54832e-05 *lens_ipow(x, 2) + -5.22992e-06 *lens_ipow(y, 2)*lambda + -1.75502e-05 *lens_ipow(x, 2)*lambda + -0.000261292 *y*lens_ipow(dy, 3) + 6.62232e-05 *x*y*dx*dy + 4.17586e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.10429e-06 *lens_ipow(x, 3)*dx + -5.6162e-06 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 2.78124e-11 *lens_ipow(y, 6) + -0.000118837 *lens_ipow(x, 2)*lens_ipow(dy, 4) + 1.5733e-10 *lens_ipow(x, 6) + 1.69996e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + -2.97266e-11 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx+0.0f;
const double dx21 =  + -0.000293443 *x*dy + 2.89663e-05 *x*y + 0.0001398 *y*dx*lambda + -1.04598e-05 *x*y*lambda + 0.000881546 *y*lens_ipow(dx, 3) + -0.000261292 *x*lens_ipow(dy, 3) + 3.31116e-05 *lens_ipow(x, 2)*dx*dy + 2.78391e-08 *lens_ipow(x, 3)*y + -1.68486e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 1.66874e-10 *x*lens_ipow(y, 5) + -6.46993e-08 *lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + 1.35997e-12 *lens_ipow(x, 5)*lens_ipow(y, 3) + -9.90885e-12 *lens_ipow(x, 6)*y*dx+0.0f;
const double dx22 =  + -0.907818  + 0.093412 *lens_ipow(dy, 2) + -0.000221876 *lens_ipow(x, 2) + 6.53118 *lens_ipow(dx, 2)*lambda + 6.99001e-05 *lens_ipow(y, 2)*lambda + -11.5143 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.00132232 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 3.31116e-05 *lens_ipow(x, 2)*y*dy + -2.76073e-07 *lens_ipow(x, 4) + 6.77511 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -1.12324e-05 *x*lens_ipow(y, 3)*dx*dy + -1.07832e-08 *lens_ipow(y, 6)*lens_ipow(dy, 2) + -4.95443e-12 *lens_ipow(x, 6)*lens_ipow(y, 2)+0.0f;
const double dx23 =  + 0.186824 *dx*dy + -0.0176933 *x*dy + -0.000293443 *x*y + -0.000783877 *x*y*lens_ipow(dy, 2) + 3.31116e-05 *lens_ipow(x, 2)*y*dx + -5.6162e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.000158449 *lens_ipow(x, 3)*lens_ipow(dy, 3) + -2.15664e-08 *lens_ipow(y, 6)*dx*dy+0.0f;
const double dx24 =  + -0.00714196 *x + 0.0114252 *x*lambda + 2.17706 *lens_ipow(dx, 3) + 6.99001e-05 *lens_ipow(y, 2)*dx + -5.22992e-06 *x*lens_ipow(y, 2) + -5.85006e-06 *lens_ipow(x, 3) + -7.67618 *lens_ipow(dx, 3)*lambda + 6.77511 *lens_ipow(dx, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx30 =  + 0.017003 *dx*dy + -0.000320428 *y*dx + 4.1288e-05 *x*y + -7.25047e-05 *x*y*lambda + -0.000754928 *y*dx*lens_ipow(dy, 2) + 0.00174661 *x*lens_ipow(dx, 2)*dy + 5.58028e-05 *x*y*lens_ipow(lambda, 2) + 5.82134e-08 *x*lens_ipow(y, 3) + 5.97645e-08 *lens_ipow(x, 3)*y + 0.0019494 *x*lens_ipow(dy, 3)*lambda + -1.54235e-07 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + 1.80409e-07 *lens_ipow(x, 4)*dx*dy + -5.14927e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 9.76902e-12 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx*dy+0.0f;
const double dx31 =  + -0.021574  + -0.000776584 *lambda + -0.0091774 *lens_ipow(dx, 2) + -0.000567216 *y*dy + 6.50845e-05 *lens_ipow(y, 2) + -0.000320428 *x*dx + 2.0644e-05 *lens_ipow(x, 2) + -0.00192694 *lens_ipow(dy, 2)*lambda + -0.000113973 *lens_ipow(y, 2)*lambda + -3.62523e-05 *lens_ipow(x, 2)*lambda + 8.79083e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 5.55727e-08 *lens_ipow(y, 4) + -0.000754928 *x*dx*lens_ipow(dy, 2) + 2.79014e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 8.73202e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.49411e-08 *lens_ipow(x, 4) + 2.03529e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -5.21441e-09 *lens_ipow(y, 5)*dy + -2.31353e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -5.14927e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 1.9538e-11 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy+0.0f;
const double dx32 =  + 1.40056 *dx*dy + -0.0183548 *y*dx + 0.017003 *x*dy + -0.000320428 *x*y + -0.000754928 *x*y*lens_ipow(dy, 2) + 0.00174661 *lens_ipow(x, 2)*dx*dy + 1.01764e-05 *lens_ipow(y, 4)*dx*dy + -1.54235e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 3.60817e-08 *lens_ipow(x, 5)*dy + 3.25634e-12 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy+0.0f;
const double dx33 =  + -0.903407  + 1.15733 *lens_ipow(dy, 2) + 0.700282 *lens_ipow(dx, 2) + -0.000283608 *lens_ipow(y, 2) + 0.017003 *x*dx + -0.00385387 *y*dy*lambda + -0.00150986 *x*y*dx*dy + 0.000873307 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.0029241 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 5.08822e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -8.69069e-10 *lens_ipow(y, 6) + 3.60817e-08 *lens_ipow(x, 5)*dx + -1.28732e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + 3.25634e-12 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx+0.0f;
const double dx34 =  + -0.000776584 *y + -0.00192694 *y*lens_ipow(dy, 2) + -3.79909e-05 *lens_ipow(y, 3) + -3.62523e-05 *lens_ipow(x, 2)*y + 5.86056e-05 *lens_ipow(y, 3)*lambda + 5.58028e-05 *lens_ipow(x, 2)*y*lambda + 0.0009747 *lens_ipow(x, 2)*lens_ipow(dy, 3)+0.0f;
const double dx40 =  + -1.69917e-05 *x + -0.00114798 *dx*lambda + -0.0209078 *dx*lens_ipow(dy, 2) + -0.0213342 *lens_ipow(dx, 3) + -0.000804315 *y*dx*dy + -0.000405755 *x*lens_ipow(dy, 2) + -0.00124039 *x*lens_ipow(dx, 2) + 9.92389e-13 *x*lens_ipow(y, 7)*dy + -1.43498e-13 *lens_ipow(x, 5)*lens_ipow(y, 4) + -1.18925e-14 *lens_ipow(x, 9)+0.0f;
const double dx41 =  + -1.08787e-05 *y + -0.00110447 *dy*lambda + -0.0213568 *lens_ipow(dx, 2)*dy + -0.000454334 *y*lens_ipow(dx, 2) + -0.000804315 *x*dx*dy + -0.0420681 *lens_ipow(dy, 3)*lambda + -0.00265153 *y*lens_ipow(dy, 2)*lambda + -1.16002e-09 *lens_ipow(y, 5) + -6.42905e-05 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 3) + 0.00594203 *dy*lens_ipow(lambda, 6) + 3.47336e-12 *lens_ipow(x, 2)*lens_ipow(y, 6)*dy + -9.56653e-14 *lens_ipow(x, 6)*lens_ipow(y, 3)+0.0f;
const double dx42 =  + -0.00114798 *x*lambda + -1.79953 *dx*lens_ipow(dy, 2) + -1.44525 *lens_ipow(dx, 3) + -0.0427136 *y*dx*dy + -0.000454334 *lens_ipow(y, 2)*dx + -0.0209078 *x*lens_ipow(dy, 2) + -0.0640027 *x*lens_ipow(dx, 2) + -0.000804315 *x*y*dy + -0.00124039 *lens_ipow(x, 2)*dx + -0.686323 *lens_ipow(dx, 3)*lambda+0.0f;
const double dx43 =  + -0.00110447 *y*lambda + -1.79953 *lens_ipow(dx, 2)*dy + -0.0213568 *y*lens_ipow(dx, 2) + -0.0418156 *x*dx*dy + -0.000804315 *x*y*dx + -0.000405755 *lens_ipow(x, 2)*dy + -5.4518 *lens_ipow(dy, 3)*lambda + -0.126204 *y*lens_ipow(dy, 2)*lambda + -0.00265153 *lens_ipow(y, 2)*dy*lambda + 3.77169 *lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -2.14302e-05 *lens_ipow(y, 3)*lens_ipow(lambda, 3) + 0.00594203 *y*lens_ipow(lambda, 6) + 4.96195e-13 *lens_ipow(x, 2)*lens_ipow(y, 7)+0.0f;
const double dx44 =  + 2.12968  + -9.39027 *lambda + 14.5639 *lens_ipow(lambda, 2) + -0.00110447 *y*dy + -0.00114798 *x*dx + -7.7507 *lens_ipow(lambda, 3) + -1.36295 *lens_ipow(dy, 4) + -0.171581 *lens_ipow(dx, 4) + -0.0420681 *y*lens_ipow(dy, 3) + -0.00132576 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 1.88585 *lens_ipow(dy, 4)*lambda + -6.42905e-05 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + 0.0356522 *y*dy*lens_ipow(lambda, 5)+0.0f;
} break;
