case asahi__takumar__1969__58mm:
{
const double dx00 =  + 0.332363  + 0.191351 *lambda + -0.133966 *lens_ipow(lambda, 2) + -0.128929 *lens_ipow(dy, 2) + -0.272339 *lens_ipow(dx, 2) + 0.00123259 *y*dy + -8.13897e-05 *lens_ipow(y, 2) + 0.00602284 *x*dx + -0.000263382 *lens_ipow(x, 2) + 0.0184865 *y*lens_ipow(dx, 2)*dy + -1.18574e-07 *lens_ipow(y, 4) + -1.26016e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -4.9168e-07 *lens_ipow(x, 4) + 1.06899e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -0.149608 *x*dx*lens_ipow(dy, 4)+0.0f;
const double dx01 =  + -0.131496 *dx*dy + 0.00123259 *x*dy + -0.000162779 *x*y + 0.00586762 *y*dx*lambda + -0.2949 *dx*lens_ipow(dy, 3) + 0.0184865 *x*lens_ipow(dx, 2)*dy + -4.74296e-07 *x*lens_ipow(y, 3) + -8.40106e-07 *lens_ipow(x, 3)*y + 7.12659e-07 *lens_ipow(x, 3)*y*lambda + -0.0390024 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx02 =  + 35.3504  + 6.97928 *lambda + -4.80586 *lens_ipow(lambda, 2) + -20.3723 *lens_ipow(dy, 2) + -60.4394 *lens_ipow(dx, 2) + -0.131496 *y*dy + -0.544679 *x*dx + 0.00301142 *lens_ipow(x, 2) + 0.00293381 *lens_ipow(y, 2)*lambda + -0.2949 *y*lens_ipow(dy, 3) + 0.0369729 *x*y*dx*dy + -0.0585036 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.074804 *lens_ipow(x, 2)*lens_ipow(dy, 4)+0.0f;
const double dx03 =  + -40.7446 *dx*dy + -0.131496 *y*dx + -0.257857 *x*dy + 0.00123259 *x*y + -0.8847 *y*dx*lens_ipow(dy, 2) + 0.0184865 *x*y*lens_ipow(dx, 2) + -0.299216 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)+0.0f;
const double dx04 =  + 6.97928 *dx + 0.191351 *x + -9.61172 *dx*lambda + -0.267932 *x*lambda + 0.00293381 *lens_ipow(y, 2)*dx + 3.56329e-07 *lens_ipow(x, 3)*lens_ipow(y, 2) + -0.0390024 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda+0.0f;
const double dx10 =  + -0.152337 *dx*dy + 0.00124609 *y*dx + -0.000169882 *x*y + 0.00604586 *x*dy*lambda + 0.0156842 *y*dx*lens_ipow(dy, 2) + -8.18001e-07 *x*lens_ipow(y, 3) + -4.3159e-07 *lens_ipow(x, 3)*y + 6.99048e-07 *x*lens_ipow(y, 3)*lambda + -0.0429073 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx11 =  + 0.33302  + 0.19069 *lambda + -0.133313 *lens_ipow(lambda, 2) + -0.273146 *lens_ipow(dy, 2) + -0.160689 *lens_ipow(dx, 2) + 0.00637399 *y*dy + -0.000260434 *lens_ipow(y, 2) + 0.00124609 *x*dx + -8.49409e-05 *lens_ipow(x, 2) + 0.222472 *lens_ipow(dx, 4) + -0.0216937 *y*lens_ipow(dx, 2)*dy + -5.09149e-07 *lens_ipow(y, 4) + 0.0156842 *x*dx*lens_ipow(dy, 2) + -1.227e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.07898e-07 *lens_ipow(x, 4) + 1.04857e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda+0.0f;
const double dx12 =  + -40.0858 *dx*dy + -0.321378 *y*dx + -0.152337 *x*dy + 0.00124609 *x*y + 0.889887 *y*lens_ipow(dx, 3) + -0.0216937 *lens_ipow(y, 2)*dx*dy + 0.0156842 *x*y*lens_ipow(dy, 2)+0.0f;
const double dx13 =  + 35.372  + 6.83847 *lambda + -4.6714 *lens_ipow(lambda, 2) + -60.3259 *lens_ipow(dy, 2) + -20.0429 *lens_ipow(dx, 2) + -0.546291 *y*dy + 0.003187 *lens_ipow(y, 2) + -0.152337 *x*dx + 0.00302293 *lens_ipow(x, 2)*lambda + -0.0108468 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.0313684 *x*y*dx*dy + -0.064361 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx14 =  + 6.83847 *dy + 0.19069 *y + -9.34279 *dy*lambda + -0.266626 *y*lambda + 0.00302293 *lens_ipow(x, 2)*dy + 3.49524e-07 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.0429073 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx20 =  + -0.0253258  + 0.00806322 *lambda + -0.00567841 *lens_ipow(lambda, 2) + -0.010936 *lens_ipow(dy, 2) + -0.0338437 *lens_ipow(dx, 2) + -0.000115133 *y*dy + -8.5487e-06 *lens_ipow(y, 2) + -0.00048116 *x*dx + -2.7677e-05 *lens_ipow(x, 2) + -5.73058e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 7.05871e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -1.35646e-11 *lens_ipow(y, 6) + 5.2385e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 8.20514e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 5.38976e-09 *lens_ipow(x, 5)*dx + -2.65595e-07 *lens_ipow(y, 4)*lens_ipow(dx, 4) + -4.68431e-10 *lens_ipow(x, 6)*lens_ipow(dy, 2)+0.0f;
const double dx21 =  + -0.022616 *dx*dy + -0.000184295 *y*dx + -0.000115133 *x*dy + -1.70974e-05 *x*y + -3.82039e-08 *lens_ipow(x, 3)*y + 4.70581e-08 *lens_ipow(x, 3)*y*lambda + -8.13876e-11 *x*lens_ipow(y, 5) + 5.2385e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 4.10257e-09 *lens_ipow(x, 4)*y*dx + -1.06238e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 4)+0.0f;
const double dx22 =  + 0.357561  + -0.697798 *lens_ipow(dy, 2) + -2.36322 *lens_ipow(dx, 2) + -0.022616 *y*dy + -9.21474e-05 *lens_ipow(y, 2) + -0.0676874 *x*dx + -0.00024058 *lens_ipow(x, 2) + 2.75758 *lens_ipow(dx, 4) + 2.05129e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 8.98293e-10 *lens_ipow(x, 6) + -1.06238e-06 *x*lens_ipow(y, 4)*lens_ipow(dx, 3) + 773.356 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx23 =  + -1.3956 *dx*dy + -0.022616 *y*dx + -0.0218719 *x*dy + -0.000115133 *x*y + 1.74617e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -1.33837e-10 *lens_ipow(x, 7)*dy + 618.685 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx24 =  + 0.00806322 *x + -0.0113568 *x*lambda + 2.3529e-08 *lens_ipow(x, 3)*lens_ipow(y, 2) + 154.671 *lens_ipow(dx, 5)*lens_ipow(dy, 4)+0.0f;
const double dx30 =  + -0.0225832 *dx*dy + -0.000113396 *y*dx + -0.000183025 *x*dy + -1.6944e-05 *x*y + -3.89008e-08 *x*lens_ipow(y, 3) + 4.67103e-08 *x*lens_ipow(y, 3)*lambda + 3.99653e-09 *x*lens_ipow(y, 4)*dy + 5.12207e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -8.19855e-11 *lens_ipow(x, 5)*y + -1.10068e-06 *lens_ipow(x, 3)*y*lens_ipow(dy, 4)+0.0f;
const double dx31 =  + -0.0254446  + 0.00841777 *lambda + -0.00595967 *lens_ipow(lambda, 2) + -0.0338035 *lens_ipow(dy, 2) + -0.0108788 *lens_ipow(dx, 2) + -0.000478716 *y*dy + -2.75013e-05 *lens_ipow(y, 2) + -0.000113396 *x*dx + -8.47201e-06 *lens_ipow(x, 2) + -5.83512e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 7.00654e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 5.39948e-09 *lens_ipow(y, 5)*dy + 7.99306e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 5.12207e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -1.36642e-11 *lens_ipow(x, 6) + -4.91578e-10 *lens_ipow(y, 6)*lens_ipow(dx, 2) + -2.75169e-07 *lens_ipow(x, 4)*lens_ipow(dy, 4)+0.0f;
const double dx32 =  + -1.38992 *dx*dy + -0.0217576 *y*dx + -0.0225832 *x*dy + -0.000113396 *x*y + 1.70736e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -1.40451e-10 *lens_ipow(y, 7)*dx + 606.813 *lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx33 =  + 0.355879  + -2.16922 *lens_ipow(dy, 2) + -0.694961 *lens_ipow(dx, 2) + -0.067607 *y*dy + -0.000239358 *lens_ipow(y, 2) + -0.0225832 *x*dx + -9.15125e-05 *lens_ipow(x, 2) + 8.99913e-10 *lens_ipow(y, 6) + 1.99827e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.10068e-06 *lens_ipow(x, 4)*y*lens_ipow(dy, 3) + 124.682 *lens_ipow(dy, 8)*lambda + 758.517 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx34 =  + 0.00841777 *y + -0.0119193 *y*lambda + 2.33551e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + 13.8536 *lens_ipow(dy, 9) + 151.703 *lens_ipow(dx, 4)*lens_ipow(dy, 5)+0.0f;
const double dx40 =  + -5.86885e-06 *x + -0.00756252 *dx*lens_ipow(dy, 2) + -0.00753132 *lens_ipow(dx, 3) + -8.82919e-05 *y*dx*dy + -5.57157e-07 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -5.47365e-07 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + -7.88038e-07 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -3.36265e-06 *lens_ipow(x, 3)*lens_ipow(dy, 4) + 0.024475 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx41 =  + -5.95609e-06 *y + -0.00752878 *lens_ipow(dy, 3) + -0.00754562 *lens_ipow(dx, 2)*dy + -8.82919e-05 *x*dx*dy + -7.59536e-07 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -5.57157e-07 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -5.47365e-07 *lens_ipow(x, 2)*y*lens_ipow(dx, 2) + -3.38965e-06 *lens_ipow(y, 3)*lens_ipow(dx, 4) + 0.024475 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx42 =  + -1.77764 *dx*lens_ipow(dy, 2) + -1.63484 *lens_ipow(dx, 3) + -0.0150912 *y*dx*dy + -0.00756252 *x*lens_ipow(dy, 2) + -0.022594 *x*lens_ipow(dx, 2) + -8.82919e-05 *x*y*dy + -5.47365e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + -3.94019e-07 *lens_ipow(x, 4)*dx + -3.38965e-06 *lens_ipow(y, 4)*lens_ipow(dx, 3) + -112.505 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda + -23.5918 *lens_ipow(dx, 7)*lambda + 0.073425 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx43 =  + -1.64086 *lens_ipow(dy, 3) + -1.77764 *lens_ipow(dx, 2)*dy + -0.0225863 *y*lens_ipow(dy, 2) + -0.00754562 *y*lens_ipow(dx, 2) + -0.015125 *x*dx*dy + -8.82919e-05 *x*y*dx + -3.79768e-07 *lens_ipow(y, 4)*dy + -5.57157e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -3.36265e-06 *lens_ipow(x, 4)*lens_ipow(dy, 3) + -22.5969 *lens_ipow(dy, 7)*lambda + -112.505 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + 0.073425 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx44 =  + 0.654458  + -1.79919 *lambda + 1.30734 *lens_ipow(lambda, 2) + -2.82462 *lens_ipow(dy, 8) + -28.1263 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + -2.94897 *lens_ipow(dx, 8) + 0.024475 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
} break;
