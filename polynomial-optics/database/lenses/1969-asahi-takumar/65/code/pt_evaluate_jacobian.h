case asahi__takumar__1969__65mm:
{
const double dx00 =  + -0.122385  + 0.339505 *lambda + -0.229952 *lens_ipow(lambda, 2) + 0.607747 *lens_ipow(dx, 2) + 0.0119236 *y*dy + -0.00019319 *lens_ipow(y, 2) + 0.03899 *x*dx + -0.000433505 *lens_ipow(x, 2) + 1.93435 *lens_ipow(dy, 2)*lambda + 0.0257972 *y*lens_ipow(dx, 2)*dy + 0.0415472 *x*lens_ipow(dx, 3) + -3.7737e-05 *lens_ipow(x, 3)*dx + -8.63552e-07 *lens_ipow(x, 4) + -6.71147 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 6.0173 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 1.46486e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -2.56084e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + -1.62484e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy*lambda+0.0f;
const double dx01 =  + 0.0782274 *dx*dy + 0.0124231 *y*dx + 0.0119236 *x*dy + -0.00038638 *x*y + 0.0257972 *x*lens_ipow(dx, 2)*dy + 9.76571e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -2.04867e-11 *lens_ipow(x, 5)*lens_ipow(y, 3) + -9.74904e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*dy*lambda+0.0f;
const double dx02 =  + 64.3915  + 0.838693 *lambda + -25.4004 *lens_ipow(dy, 2) + -78.7877 *lens_ipow(dx, 2) + 0.0782274 *y*dy + 0.00621154 *lens_ipow(y, 2) + 1.21549 *x*dx + 0.019495 *lens_ipow(x, 2) + 0.0515944 *x*y*dx*dy + 0.0623208 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -9.43424e-06 *lens_ipow(x, 4) + 9.76571e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + -50.8009 *dx*dy + 0.0782274 *y*dx + 0.0119236 *x*y + 3.8687 *x*dy*lambda + 0.0257972 *x*y*lens_ipow(dx, 2) + -13.4229 *x*dy*lens_ipow(lambda, 3) + 12.0346 *x*dy*lens_ipow(lambda, 4) + -3.24968e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*lambda+0.0f;
const double dx04 =  + 0.838693 *dx + 0.339505 *x + -0.459904 *x*lambda + 1.93435 *x*lens_ipow(dy, 2) + -20.1344 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 24.0692 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 9.76571e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -3.24968e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dy+0.0f;
const double dx10 =  + 0.0122742 *y*dx + 0.0113259 *x*dy + -0.000397576 *x*y + -4.44606e-05 *lens_ipow(x, 2)*y*dx*lambda + -2.87524e-05 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -4.25847e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const double dx11 =  + -0.119511  + 0.338848 *lambda + -0.230665 *lens_ipow(lambda, 2) + 0.586206 *lens_ipow(dy, 2) + 0.0396801 *y*dy + -0.000449368 *lens_ipow(y, 2) + 0.0122742 *x*dx + -0.000198788 *lens_ipow(x, 2) + 1.86069 *lens_ipow(dx, 2)*lambda + -9.80414e-07 *lens_ipow(y, 4) + -6.81709 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -1.47277 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.00166822 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -6.45388e-05 *lens_ipow(y, 3)*dy*lambda + -1.48202e-05 *lens_ipow(x, 3)*dx*lambda + 6.1512 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -2.87524e-05 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 2) + -3.19385e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.263526 *y*lens_ipow(dy, 5)*lambda+0.0f;
const double dx12 =  + -54.7812 *dx*dy + 0.0122742 *x*y + 3.72138 *y*dx*lambda + -13.6342 *y*dx*lens_ipow(lambda, 3) + -2.94554 *y*dx*lens_ipow(dy, 2)*lambda + 0.00111215 *lens_ipow(y, 3)*dx*lambda + -1.48202e-05 *lens_ipow(x, 3)*y*lambda + 12.3024 *y*dx*lens_ipow(lambda, 4)+0.0f;
const double dx13 =  + 64.4692  + 0.836626 *lambda + -79.6083 *lens_ipow(dy, 2) + -27.3906 *lens_ipow(dx, 2) + 1.17241 *y*dy + 0.0198401 *lens_ipow(y, 2) + 0.00566293 *lens_ipow(x, 2) + -2.94554 *y*lens_ipow(dx, 2)*dy*lambda + -1.61347e-05 *lens_ipow(y, 4)*lambda + -1.43762e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.658815 *lens_ipow(y, 2)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx14 =  + 0.836626 *dy + 0.338848 *y + -0.46133 *y*lambda + 1.86069 *y*lens_ipow(dx, 2) + -20.4513 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -1.47277 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000556074 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -1.61347e-05 *lens_ipow(y, 4)*dy + -1.48202e-05 *lens_ipow(x, 3)*y*dx + 24.6048 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -2.87524e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy*lambda + 0.131763 *lens_ipow(y, 2)*lens_ipow(dy, 5)+0.0f;
const double dx20 =  + -0.0138309  + -0.00448538 *lambda + 0.00316418 *lens_ipow(lambda, 2) + -0.000154485 *y*dy + 4.12418e-06 *lens_ipow(y, 2) + -0.000243408 *x*dx + 1.22357e-05 *lens_ipow(x, 2) + -0.023944 *lens_ipow(dy, 2)*lambda + 0.080944 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.00646414 *lens_ipow(dx, 4)*lambda + -0.0723792 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 7.4188e-08 *x*lens_ipow(y, 3)*dx*dy + -5.03096e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -1.37435e-09 *lens_ipow(x, 5)*dx + 0.000738641 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 4.91754e-13 *lens_ipow(x, 4)*lens_ipow(y, 4) + -5.87401e-13 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda + -0.00400931 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx21 =  + 2.36499e-05 *y*dx + -0.000154485 *x*dy + 8.24836e-06 *x*y + 0.00250042 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 1.11282e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -1.67699e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 0.00147728 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 3.93404e-13 *lens_ipow(x, 5)*lens_ipow(y, 3) + -4.69921e-13 *lens_ipow(x, 5)*lens_ipow(y, 3)*lambda + -0.0219954 *y*lens_ipow(dx, 5)*lens_ipow(lambda, 4)+0.0f;
const double dx22 =  + -0.906605  + 0.0817525 *lens_ipow(dy, 2) + 1.20651 *lens_ipow(dx, 2) + 1.18249e-05 *lens_ipow(y, 2) + -0.000121704 *lens_ipow(x, 2) + -0.0258565 *x*lens_ipow(dx, 3)*lambda + 0.00375063 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 3.7094e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -3.35397e-06 *lens_ipow(x, 3)*y*dx*dy + -2.29058e-10 *lens_ipow(x, 6) + 0.00147728 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 4) + -0.0549885 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(lambda, 4) + -0.00267288 *lens_ipow(x, 3)*dx*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + 0.163505 *dx*dy + -0.000154485 *x*y + -0.0478881 *x*dy*lambda + 0.161888 *x*dy*lens_ipow(lambda, 3) + -0.144758 *x*dy*lens_ipow(lambda, 4) + 3.7094e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -1.67699e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 0.00295456 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.00534575 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx24 =  + -0.00448538 *x + 0.00632836 *x*lambda + -0.023944 *x*lens_ipow(dy, 2) + 0.242832 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00646414 *x*lens_ipow(dx, 4) + 0.00250042 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + -0.289517 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -1.1748e-13 *lens_ipow(x, 5)*lens_ipow(y, 4) + -0.0439908 *lens_ipow(y, 2)*lens_ipow(dx, 5)*lens_ipow(lambda, 3) + -0.00267288 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx30 =  + 0.0127144 *dx*dy + -0.000151866 *y*dx + 7.94711e-06 *x*y + 7.67682e-05 *x*dy*lambda + -0.0175388 *lens_ipow(dx, 3)*dy + 0.000443325 *x*lens_ipow(dy, 3) + -2.1706e-07 *x*lens_ipow(y, 2)*dy + 7.31741e-05 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 1.12421e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -1.18589e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda+0.0f;
const double dx31 =  + -0.0138368  + -0.00451251 *lambda + 0.00319621 *lens_ipow(lambda, 2) + -0.00586501 *lens_ipow(dx, 2) + -0.000216642 *y*dy + 1.25267e-05 *lens_ipow(y, 2) + -0.000151866 *x*dx + 3.97356e-06 *lens_ipow(x, 2) + -1.03887e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.1706e-07 *lens_ipow(x, 2)*y*dy + -1.40224e-09 *lens_ipow(y, 5)*dy + 0.000146348 *x*y*dx*lens_ipow(dy, 3) + 8.43156e-11 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.0115777 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + -8.89415e-11 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda+0.0f;
const double dx32 =  + 1.67543 *dx*dy + -0.01173 *y*dx + 0.0127144 *x*dy + -0.000151866 *x*y + -1.17408 *dx*lens_ipow(dy, 3) + -3.2271 *lens_ipow(dx, 3)*dy + -6.92577e-06 *lens_ipow(y, 3)*dx + -0.0526165 *x*lens_ipow(dx, 2)*dy + 7.31741e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + 0.0115777 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lambda+0.0f;
const double dx33 =  + -0.907499  + 1.22385 *lens_ipow(dy, 2) + 0.837714 *lens_ipow(dx, 2) + -0.000108321 *lens_ipow(y, 2) + 0.0127144 *x*dx + 3.83841e-05 *lens_ipow(x, 2)*lambda + -1.76112 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.806776 *lens_ipow(dx, 4) + -0.0175388 *x*lens_ipow(dx, 3) + 0.000664987 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -1.0853e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.33706e-10 *lens_ipow(y, 6) + 0.000219522 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.0173665 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx34 =  + -0.00451251 *y + 0.00639243 *y*lambda + 3.83841e-05 *lens_ipow(x, 2)*dy + 0.00578884 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -2.96472e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)+0.0f;
const double dx40 =  + -0.0183739 *dx*lens_ipow(dy, 2) + -0.0180057 *lens_ipow(dx, 3) + -0.000531674 *y*dx*dy + -0.000296233 *x*lens_ipow(dy, 2) + -0.000812924 *x*lens_ipow(dx, 2) + -4.02987e-06 *x*y*dy + -5.72456e-06 *lens_ipow(x, 2)*dx + -3.46764e-06 *lens_ipow(y, 2)*dx*lambda + -3.07783e-10 *x*lens_ipow(y, 4) + -2.32302e-10 *lens_ipow(x, 5)+0.0f;
const double dx41 =  + -0.0183329 *lens_ipow(dy, 3) + -0.0184655 *lens_ipow(dx, 2)*dy + -0.000823099 *y*lens_ipow(dy, 2) + -0.000311001 *y*lens_ipow(dx, 2) + -0.000531674 *x*dx*dy + -2.01494e-06 *lens_ipow(x, 2)*dy + -8.8293e-06 *lens_ipow(y, 2)*dy*lambda + -6.93529e-06 *x*y*dx*lambda + -6.15566e-10 *lens_ipow(x, 2)*lens_ipow(y, 3)+0.0f;
const double dx42 =  + 0.0251659 *dx + -2.0507 *dx*lens_ipow(dy, 2) + -2.02776 *lens_ipow(dx, 3) + -0.036931 *y*dx*dy + -0.000311001 *lens_ipow(y, 2)*dx + -0.0183739 *x*lens_ipow(dy, 2) + -0.054017 *x*lens_ipow(dx, 2) + -0.000531674 *x*y*dy + -0.000812924 *lens_ipow(x, 2)*dx + -1.90819e-06 *lens_ipow(x, 3) + -3.46764e-06 *x*lens_ipow(y, 2)*lambda+0.0f;
const double dx43 =  + 0.0264822 *dy + -2.05818 *lens_ipow(dy, 3) + -2.0507 *lens_ipow(dx, 2)*dy + -0.0549986 *y*lens_ipow(dy, 2) + -0.0184655 *y*lens_ipow(dx, 2) + -0.000823099 *lens_ipow(y, 2)*dy + -0.0367478 *x*dx*dy + -0.000531674 *x*y*dx + -0.000296233 *lens_ipow(x, 2)*dy + -2.01494e-06 *lens_ipow(x, 2)*y + -2.9431e-06 *lens_ipow(y, 3)*lambda+0.0f;
const double dx44 =  + 2.14127  + -9.51691 *lambda + 14.8828 *lens_ipow(lambda, 2) + -7.98937 *lens_ipow(lambda, 3) + -2.9431e-06 *lens_ipow(y, 3)*dy + -3.46764e-06 *x*lens_ipow(y, 2)*dx+0.0f;
} break;
