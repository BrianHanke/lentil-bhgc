case asahi__takumar__1969__50mm:
{
const double dx00 =  + -0.119934  + 0.359186 *lambda + -0.263212 *lens_ipow(lambda, 2) + 0.568779 *lens_ipow(dx, 2) + 0.0155268 *y*dy + -0.000436672 *lens_ipow(y, 2) + 0.0483348 *x*dx + -0.000970755 *lens_ipow(x, 2) + 1.74931 *lens_ipow(dy, 2)*lambda + 0.000185409 *lens_ipow(y, 2)*lambda + 0.000282992 *lens_ipow(x, 2)*lambda + -1.5284e-05 *lens_ipow(y, 3)*dy + 0.00139335 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -2.16899e-06 *lens_ipow(x, 4) + -6.12817 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -1.52456 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -8.49754e-05 *lens_ipow(x, 3)*dx*lambda + 5.56321 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -9.408e-10 *lens_ipow(y, 6) + -6.10781e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -8.42502e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 1.74203 *x*lens_ipow(dx, 7)*lambda+0.0f;
const double dx01 =  + 0.0139074 *y*dx + 0.0155268 *x*dy + -0.000873345 *x*y + 0.000370817 *x*y*lambda + -4.5852e-05 *x*lens_ipow(y, 2)*dy + -5.6448e-09 *x*lens_ipow(y, 5) + -8.14375e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -3.37001e-09 *lens_ipow(x, 5)*y + -0.000857595 *lens_ipow(y, 4)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx02 =  + 49.6924  + 0.540799 *lambda + -21.1981 *lens_ipow(dy, 2) + -61.6093 *lens_ipow(dx, 2) + 0.00695372 *lens_ipow(y, 2) + 1.13756 *x*dx + 0.0241674 *lens_ipow(x, 2) + -3.04911 *x*dx*lens_ipow(dy, 2)*lambda + -2.12438e-05 *lens_ipow(x, 4)*lambda + 6.09712 *lens_ipow(x, 2)*lens_ipow(dx, 6)*lambda + -0.000514557 *lens_ipow(y, 5)*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const double dx03 =  + -42.3962 *dx*dy + 0.0155268 *x*y + 3.49862 *x*dy*lambda + -1.5284e-05 *x*lens_ipow(y, 3) + 0.000928898 *lens_ipow(x, 3)*dy + -12.2563 *x*dy*lens_ipow(lambda, 3) + -3.04911 *x*lens_ipow(dx, 2)*dy*lambda + 11.1264 *x*dy*lens_ipow(lambda, 4) + -0.000514557 *lens_ipow(y, 5)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const double dx04 =  + 0.540799 *dx + 0.359186 *x + -0.526425 *x*lambda + 1.74931 *x*lens_ipow(dy, 2) + 0.000185409 *x*lens_ipow(y, 2) + 9.43306e-05 *lens_ipow(x, 3) + -18.3845 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.52456 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -2.12438e-05 *lens_ipow(x, 4)*dx + 22.2528 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.871017 *lens_ipow(x, 2)*lens_ipow(dx, 7)+0.0f;
const double dx10 =  + 0.0155264 *y*dx + -0.000512777 *x*y + 0.0254035 *x*dy*lambda + -1.74923e-06 *x*lens_ipow(y, 3) + 0.000117169 *lens_ipow(x, 3)*dy + -2.04725e-06 *lens_ipow(x, 3)*y + -8.56681e-05 *lens_ipow(x, 2)*y*dx*lambda + -0.000191434 *lens_ipow(x, 3)*dy*lambda + -0.000111768 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 5.59486e-12 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy+0.0f;
const double dx11 =  + -0.125186  + 0.373043 *lambda + -0.275347 *lens_ipow(lambda, 2) + 0.557704 *lens_ipow(dy, 2) + 0.0494026 *y*dy + -0.000996281 *lens_ipow(y, 2) + 0.0155264 *x*dx + -0.000256388 *lens_ipow(x, 2) + 1.72024 *lens_ipow(dx, 2)*lambda + 0.000499644 *lens_ipow(y, 2)*lambda + 0.00196873 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -7.39333e-05 *lens_ipow(y, 3)*dy + -2.78554e-06 *lens_ipow(y, 4) + -2.62384e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -5.11814e-07 *lens_ipow(x, 4) + -6.26721 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 0.0557389 *y*lens_ipow(dy, 3)*lambda + 0.0760115 *y*lens_ipow(dx, 2)*dy*lambda + -2.8556e-05 *lens_ipow(x, 3)*dx*lambda + 5.75419 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.000111768 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 2) + 8.39229e-12 *lens_ipow(x, 4)*lens_ipow(y, 5)*dy+0.0f;
const double dx12 =  + -42.4897 *dx*dy + 0.0155264 *x*y + 3.44048 *y*dx*lambda + 0.00131249 *lens_ipow(y, 3)*dx + -12.5344 *y*dx*lens_ipow(lambda, 3) + 0.0760115 *lens_ipow(y, 2)*dx*dy*lambda + -2.8556e-05 *lens_ipow(x, 3)*y*lambda + 11.5084 *y*dx*lens_ipow(lambda, 4)+0.0f;
const double dx13 =  + 49.9575  + -61.2708 *lens_ipow(dy, 2) + -21.2448 *lens_ipow(dx, 2) + 1.11541 *y*dy + 0.0247013 *lens_ipow(y, 2) + 0.0127017 *lens_ipow(x, 2)*lambda + -1.84833e-05 *lens_ipow(y, 4) + 2.92924e-05 *lens_ipow(x, 4) + 0.0836084 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.0380057 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -4.78586e-05 *lens_ipow(x, 4)*lambda + -5.58838e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + 1.39871e-12 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx14 =  + 0.373043 *y + -0.550694 *y*lambda + 1.72024 *y*lens_ipow(dx, 2) + 0.000166548 *lens_ipow(y, 3) + 0.0127017 *lens_ipow(x, 2)*dy + -18.8016 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.0278695 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 0.0380057 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -2.8556e-05 *lens_ipow(x, 3)*y*dx + -4.78586e-05 *lens_ipow(x, 4)*dy + 23.0168 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.000111768 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy*lambda+0.0f;
const double dx20 =  + -0.0179872  + -0.00614881 *lambda + 0.00484289 *lens_ipow(lambda, 2) + -0.00849818 *lens_ipow(dy, 2) + -0.000255742 *y*dy + 1.02856e-05 *lens_ipow(y, 2) + -0.000451343 *x*dx + 3.13449e-05 *lens_ipow(x, 2) + -3.71101e-06 *lens_ipow(y, 2)*lambda + -1.12719e-05 *lens_ipow(x, 2)*lambda + -0.000918822 *y*lens_ipow(dx, 2)*dy + 4.67614e-06 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 2.6829e-05 *x*y*dx*dy + 2.70547e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0191191 *lens_ipow(dx, 4)*lambda + 1.16311e-11 *lens_ipow(y, 6) + 0.00010544 *lens_ipow(x, 2)*lens_ipow(dx, 4) + 1.02434e-10 *lens_ipow(x, 6) + -1.41991 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + -2.53856e-11 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + 2.35986e-15 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx21 =  + -0.000255742 *x*dy + 2.05711e-05 *x*y + -0.00335404 *dx*dy*lambda + -7.42201e-06 *x*y*lambda + 3.3209e-05 *lens_ipow(y, 2)*dx*dy + -0.000918822 *x*lens_ipow(dx, 2)*dy + 9.35228e-06 *x*y*lens_ipow(dy, 2) + 1.34145e-05 *lens_ipow(x, 2)*dx*dy + 1.80365e-08 *lens_ipow(x, 3)*y + 0.00334102 *y*lens_ipow(dx, 3)*lambda + 6.97863e-11 *x*lens_ipow(y, 5) + -8.46187e-12 *lens_ipow(x, 6)*y*dx + -0.0295671 *y*lens_ipow(dx, 5)*lens_ipow(lambda, 3) + 2.83183e-15 *lens_ipow(x, 5)*lens_ipow(y, 5)+0.0f;
const double dx22 =  + -0.904789  + 0.0648502 *lens_ipow(dy, 2) + 1.15473 *lens_ipow(dx, 2) + -0.000225672 *lens_ipow(x, 2) + -0.00335404 *y*dy*lambda + 1.10697e-05 *lens_ipow(y, 3)*dy + -0.00183764 *x*y*dx*dy + 1.34145e-05 *lens_ipow(x, 2)*y*dy + 0.00501152 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.0764764 *x*lens_ipow(dx, 3)*lambda + 0.000140586 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -5.67965 *x*lens_ipow(dx, 3)*lens_ipow(dy, 4) + -4.23094e-12 *lens_ipow(x, 6)*lens_ipow(y, 2) + -0.0739176 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx23 =  + 0.1297 *dx*dy + -0.0169964 *x*dy + -0.000255742 *x*y + -0.00335404 *y*dx*lambda + 1.10697e-05 *lens_ipow(y, 3)*dx + -0.000918822 *x*y*lens_ipow(dx, 2) + 9.35228e-06 *x*lens_ipow(y, 2)*dy + 1.34145e-05 *lens_ipow(x, 2)*y*dx + -5.67965 *x*lens_ipow(dx, 4)*lens_ipow(dy, 3)+0.0f;
const double dx24 =  + -0.00614881 *x + 0.00968577 *x*lambda + -0.00335404 *y*dx*dy + -3.71101e-06 *x*lens_ipow(y, 2) + -3.75729e-06 *lens_ipow(x, 3) + 0.00167051 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -0.0191191 *x*lens_ipow(dx, 4) + -0.0443506 *lens_ipow(y, 2)*lens_ipow(dx, 5)*lens_ipow(lambda, 2)+0.0f;
const double dx30 =  + 0.0147319 *dx*dy + -0.000245623 *y*dx + 1.44437e-05 *x*y + -0.00087922 *y*dx*lens_ipow(dy, 2) + 0.00168567 *x*lens_ipow(dx, 2)*dy + 5.91693e-08 *x*lens_ipow(y, 3) + 3.17315e-05 *lens_ipow(x, 2)*dx*dy + 3.18548e-08 *lens_ipow(x, 3)*y + -5.28714e-08 *x*lens_ipow(y, 3)*lambda + 0.00784575 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.00806516 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -1.34657e-13 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy+0.0f;
const double dx31 =  + -0.017748  + -0.00657363 *lambda + 0.00485492 *lens_ipow(lambda, 2) + -0.000448793 *y*dy + 2.25792e-05 *lens_ipow(y, 2) + -0.000245623 *x*dx + 7.22185e-06 *lens_ipow(x, 2) + -0.0295556 *lens_ipow(dx, 2)*lambda + -3.02445e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 5.60782e-08 *lens_ipow(y, 4) + -0.00087922 *x*dx*lens_ipow(dy, 2) + 8.87539e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 7.9637e-09 *lens_ipow(x, 4) + 0.111896 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.0512501 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -3.6245e-08 *lens_ipow(y, 4)*lambda + -7.93071e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -0.103025 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -2.01985e-13 *lens_ipow(x, 4)*lens_ipow(y, 5)*dy+0.0f;
const double dx32 =  + 1.44519 *dx*dy + 0.0147319 *x*dy + -0.000245623 *x*y + -0.0591113 *y*dx*lambda + -2.0163e-05 *lens_ipow(y, 3)*dx + -0.00087922 *x*y*lens_ipow(dy, 2) + 0.00168567 *lens_ipow(x, 2)*dx*dy + 1.05772e-05 *lens_ipow(x, 3)*dy + 0.223791 *y*dx*lens_ipow(lambda, 3) + -0.1025 *y*dx*lens_ipow(dy, 2)*lambda + -22.6731 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -0.20605 *y*dx*lens_ipow(lambda, 4)+0.0f;
const double dx33 =  + -0.904259  + 1.18216 *lens_ipow(dy, 2) + 0.722596 *lens_ipow(dx, 2) + -0.000224397 *lens_ipow(y, 2) + 0.0147319 *x*dx + -0.00175844 *x*y*dx*dy + 0.000842835 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 1.05772e-05 *lens_ipow(x, 3)*dx + -0.1025 *y*lens_ipow(dx, 2)*dy*lambda + -17.0048 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.0117686 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.0120977 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -3.36641e-14 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx34 =  + -0.00657363 *y + 0.00970983 *y*lambda + -0.0295556 *y*lens_ipow(dx, 2) + 0.335687 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.0512501 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -7.249e-09 *lens_ipow(y, 5) + -2.64357e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.4121 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 0.00784575 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda + -0.0120977 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx40 =  + -0.0240776 *dx*lens_ipow(dy, 2) + -0.0241728 *lens_ipow(dx, 3) + -0.000907744 *y*dx*dy + -0.000499322 *x*lens_ipow(dy, 2) + -0.00141434 *x*lens_ipow(dx, 2) + -6.97163e-06 *lens_ipow(y, 2)*dx*lambda + -1.40588e-05 *x*y*dy*lambda + -1.68665e-07 *x*lens_ipow(y, 2)*lambda + -2.20475e-05 *lens_ipow(x, 2)*dx*lambda + -1.36851e-09 *lens_ipow(x, 5)*lambda + -1.04459e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)+0.0f;
const double dx41 =  + -0.024251 *lens_ipow(dy, 3) + -0.0239731 *lens_ipow(dx, 2)*dy + -0.00141828 *y*lens_ipow(dy, 2) + -0.000495809 *y*lens_ipow(dx, 2) + -0.000907744 *x*dx*dy + -2.22516e-05 *lens_ipow(y, 2)*dy*lambda + -1.39433e-05 *x*y*dx*lambda + -7.0294e-06 *lens_ipow(x, 2)*dy*lambda + -1.68665e-07 *lens_ipow(x, 2)*y*lambda + -1.4025e-09 *lens_ipow(y, 5)*lambda + -1.04459e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)+0.0f;
const double dx42 =  + 0.0577258 *dx + -0.0544862 *dx*lambda + -2.07653 *dx*lens_ipow(dy, 2) + -2.08499 *lens_ipow(dx, 3) + -0.0479461 *y*dx*dy + -0.000495809 *lens_ipow(y, 2)*dx + -0.0240776 *x*lens_ipow(dy, 2) + -0.0725183 *x*lens_ipow(dx, 2) + -0.000907744 *x*y*dy + -0.00141434 *lens_ipow(x, 2)*dx + -6.97163e-06 *x*lens_ipow(y, 2)*lambda + -7.34918e-06 *lens_ipow(x, 3)*lambda+0.0f;
const double dx43 =  + 0.0575866 *dy + -0.0548883 *dy*lambda + -2.08151 *lens_ipow(dy, 3) + -2.07653 *lens_ipow(dx, 2)*dy + -0.072753 *y*lens_ipow(dy, 2) + -0.0239731 *y*lens_ipow(dx, 2) + -0.00141828 *lens_ipow(y, 2)*dy + -0.0481552 *x*dx*dy + -0.000907744 *x*y*dx + -0.000499322 *lens_ipow(x, 2)*dy + -7.41721e-06 *lens_ipow(y, 3)*lambda + -7.0294e-06 *lens_ipow(x, 2)*y*lambda+0.0f;
const double dx44 =  + 2.13006  + -9.42193 *lambda + 14.6798 *lens_ipow(lambda, 2) + -0.0274442 *lens_ipow(dy, 2) + -0.0272431 *lens_ipow(dx, 2) + -7.85375 *lens_ipow(lambda, 3) + -7.41721e-06 *lens_ipow(y, 3)*dy + -6.97163e-06 *x*lens_ipow(y, 2)*dx + -7.0294e-06 *lens_ipow(x, 2)*y*dy + -8.43327e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -7.34918e-06 *lens_ipow(x, 3)*dx + -2.3375e-10 *lens_ipow(y, 6) + -2.28085e-10 *lens_ipow(x, 6)+0.0f;
} break;
