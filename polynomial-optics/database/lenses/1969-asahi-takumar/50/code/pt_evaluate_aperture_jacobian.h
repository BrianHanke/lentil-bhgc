case asahi__takumar__1969__50mm:
{
const double dx00 =  + 0.329174  + 0.202922 *lambda + -0.142731 *lens_ipow(lambda, 2) + -0.161926 *lens_ipow(dy, 2) + -0.279053 *lens_ipow(dx, 2) + 0.00165428 *y*dy + -0.000111406 *lens_ipow(y, 2) + 0.0073552 *x*dx + -0.00034319 *lens_ipow(x, 2) + 0.230411 *lens_ipow(dy, 4) + -2.10355e-07 *lens_ipow(y, 4) + -0.0249061 *x*dx*lens_ipow(dy, 2) + -2.14865e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -9.51243e-07 *lens_ipow(x, 4) + 1.77596e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.243122 *y*lens_ipow(dx, 4)*dy*lambda + -2.57636e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx01 =  + -0.192721 *dx*dy + 0.00165428 *x*dy + -0.000222813 *x*y + 0.104387 *dx*dy*lambda + 0.00720574 *y*dx*lambda + -8.41418e-07 *x*lens_ipow(y, 3) + -1.43243e-06 *lens_ipow(x, 3)*y + 1.18397e-06 *lens_ipow(x, 3)*y*lambda + -0.0537169 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -8.50346 *lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + 0.243122 *x*lens_ipow(dx, 4)*dy*lambda + -1.28818e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx*dy+0.0f;
const double dx02 =  + 30.5049  + 6.01689 *lambda + -4.16436 *lens_ipow(lambda, 2) + -17.4556 *lens_ipow(dy, 2) + -54.5126 *lens_ipow(dx, 2) + -0.192721 *y*dy + -0.558107 *x*dx + 0.0036776 *lens_ipow(x, 2) + 0.104387 *y*dy*lambda + 0.00360287 *lens_ipow(y, 2)*lambda + -0.0124531 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 33.0919 *lens_ipow(dx, 4)*lambda + -0.0805753 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -25.5104 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 0.972488 *x*y*lens_ipow(dx, 3)*dy*lambda + -4.29393e-11 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy+0.0f;
const double dx03 =  + -34.9112 *dx*dy + -0.192721 *y*dx + -0.323853 *x*dy + 0.00165428 *x*y + 0.104387 *y*dx*lambda + 0.921646 *x*lens_ipow(dy, 3) + -0.0249061 *lens_ipow(x, 2)*dx*dy + -25.5104 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 0.243122 *x*y*lens_ipow(dx, 4)*lambda + -4.29393e-11 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx+0.0f;
const double dx04 =  + 6.01689 *dx + 0.202922 *x + -8.32872 *dx*lambda + -0.285463 *x*lambda + 0.104387 *y*dx*dy + 0.00360287 *lens_ipow(y, 2)*dx + 6.61838 *lens_ipow(dx, 5) + 5.91987e-07 *lens_ipow(x, 3)*lens_ipow(y, 2) + -0.0537169 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + -8.50346 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.243122 *x*y*lens_ipow(dx, 4)*dy+0.0f;
const double dx10 =  + -0.19434 *dx*dy + 0.0016427 *y*dx + -0.000223885 *x*y + 0.0980336 *dx*dy*lambda + 0.00704034 *x*dy*lambda + -1.41622e-06 *x*lens_ipow(y, 3) + -8.28363e-07 *lens_ipow(x, 3)*y + 1.15413e-06 *x*lens_ipow(y, 3)*lambda + -0.0498246 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.265028 *y*dx*lens_ipow(dy, 4)*lambda + -76.3066 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lambda + -1.24284e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx*dy+0.0f;
const double dx11 =  + 0.32963  + 0.200971 *lambda + -0.140901 *lens_ipow(lambda, 2) + -0.277072 *lens_ipow(dy, 2) + -0.163485 *lens_ipow(dx, 2) + 0.0074183 *y*dy + -0.000340567 *lens_ipow(y, 2) + 0.0016427 *x*dx + -0.000111942 *lens_ipow(x, 2) + 0.240269 *lens_ipow(dx, 4) + -0.0248228 *y*lens_ipow(dx, 2)*dy + -9.65722e-07 *lens_ipow(y, 4) + -2.12433e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.07091e-07 *lens_ipow(x, 4) + 1.73119e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.265028 *x*dx*lens_ipow(dy, 4)*lambda + -2.48569e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy+0.0f;
const double dx12 =  + -35.0325 *dx*dy + -0.326969 *y*dx + -0.19434 *x*dy + 0.0016427 *x*y + 0.0980336 *x*dy*lambda + 0.961077 *y*lens_ipow(dx, 3) + -0.0248228 *lens_ipow(y, 2)*dx*dy + 0.265028 *x*y*lens_ipow(dy, 4)*lambda + -381.533 *x*lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + -4.14281e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy+0.0f;
const double dx13 =  + 30.5276  + 5.92349 *lambda + -4.08016 *lens_ipow(lambda, 2) + -54.2143 *lens_ipow(dy, 2) + -17.5163 *lens_ipow(dx, 2) + -0.554144 *y*dy + 0.00370915 *lens_ipow(y, 2) + -0.19434 *x*dx + 0.0980336 *x*dx*lambda + 0.00352017 *lens_ipow(x, 2)*lambda + -0.0124114 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 29.4431 *lens_ipow(dy, 4)*lambda + -0.0747368 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 1.06011 *x*y*dx*lens_ipow(dy, 3)*lambda + -228.92 *x*lens_ipow(dx, 5)*lens_ipow(dy, 2)*lambda + -4.14281e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx+0.0f;
const double dx14 =  + 5.92349 *dy + 0.200971 *y + -8.16032 *dy*lambda + -0.281802 *y*lambda + 0.0980336 *x*dx*dy + 0.00352017 *lens_ipow(x, 2)*dy + 5.88861 *lens_ipow(dy, 5) + 5.77064e-07 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.0498246 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda + 0.265028 *x*y*dx*lens_ipow(dy, 4) + -76.3066 *x*lens_ipow(dx, 5)*lens_ipow(dy, 3)+0.0f;
const double dx20 =  + -0.0296855  + 0.0101779 *lambda + -0.00739776 *lens_ipow(lambda, 2) + -0.0119145 *lens_ipow(dy, 2) + -0.0395432 *lens_ipow(dx, 2) + -0.000135461 *y*dy + -1.19806e-05 *lens_ipow(y, 2) + -0.000761953 *x*dx + -3.71214e-05 *lens_ipow(x, 2) + -1.28446e-08 *lens_ipow(y, 4) + 1.87243e-06 *x*lens_ipow(y, 2)*dx + -2.91466e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -1.16207e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 4.53642e-06 *lens_ipow(x, 3)*dx + -4.29773e-08 *lens_ipow(x, 4) + 1.43391e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -3.47801e-06 *lens_ipow(x, 3)*dx*lambda + 1.30422e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 0.000582756 *x*y*lens_ipow(dx, 3)*dy*lambda + 9.29661e-11 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*lambda+0.0f;
const double dx21 =  + -0.0266631 *dx*dy + -0.000302396 *y*dx + -0.000135461 *x*dy + -2.39613e-05 *x*y + -5.13783e-08 *x*lens_ipow(y, 3) + 1.87243e-06 *lens_ipow(x, 2)*y*dx + -7.74712e-08 *lens_ipow(x, 3)*y + 9.55938e-08 *lens_ipow(x, 3)*y*lambda + 1.30422e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 0.000291378 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy*lambda + 4.25014e-08 *lens_ipow(y, 5)*lens_ipow(dx, 3) + 3.09887e-11 *lens_ipow(x, 6)*y*dx*lambda+0.0f;
const double dx22 =  + 0.357771  + -0.703354 *lens_ipow(dy, 2) + -2.22966 *lens_ipow(dx, 2) + -0.0266631 *y*dy + -0.000151198 *lens_ipow(y, 2) + -0.0790864 *x*dx + -0.000380977 *lens_ipow(x, 2) + 9.36214e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.13411e-06 *lens_ipow(x, 4) + -8.69502e-07 *lens_ipow(x, 4)*lambda + 22.608 *lens_ipow(dx, 6)*lambda + 0.000874135 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lambda + 2.12507e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2) + 790.313 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lambda + 1.54944e-11 *lens_ipow(x, 6)*lens_ipow(y, 2)*lambda+0.0f;
const double dx23 =  + -1.40671 *dx*dy + -0.0266631 *y*dx + -0.0238291 *x*dy + -0.000135461 *x*y + -1.94311e-05 *lens_ipow(x, 3)*dy + 4.34739e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.000291378 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lambda + 632.251 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx24 =  + 0.0101779 *x + -0.0147955 *x*lambda + 4.77969e-08 *lens_ipow(x, 3)*lens_ipow(y, 2) + -8.69502e-07 *lens_ipow(x, 4)*dx + 3.22971 *lens_ipow(dx, 7) + 0.000291378 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*dy + 158.063 *lens_ipow(dx, 5)*lens_ipow(dy, 4) + 1.54944e-11 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx+0.0f;
const double dx30 =  + -0.0255495 *dx*dy + -0.00014229 *y*dx + -0.000280022 *x*dy + -2.38467e-05 *x*y + 1.61236e-06 *x*lens_ipow(y, 2)*dy + -8.01263e-08 *x*lens_ipow(y, 3) + -5.24055e-08 *lens_ipow(x, 3)*y + 9.54326e-08 *x*lens_ipow(y, 3)*lambda + 1.25316e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 3.78244e-08 *lens_ipow(x, 5)*lens_ipow(dy, 3) + 3.25074e-11 *x*lens_ipow(y, 6)*dy*lambda + -20.5689 *lens_ipow(dx, 7)*lens_ipow(dy, 3)+0.0f;
const double dx31 =  + -0.0297452  + 0.0103829 *lambda + -0.00757222 *lens_ipow(lambda, 2) + -0.0395322 *lens_ipow(dy, 2) + -0.0121053 *lens_ipow(dx, 2) + -0.000750592 *y*dy + -3.68315e-05 *lens_ipow(y, 2) + -0.00014229 *x*dx + -1.19233e-05 *lens_ipow(x, 2) + -2.80782e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 4.51993e-06 *lens_ipow(y, 3)*dy + -4.43e-08 *lens_ipow(y, 4) + 1.61236e-06 *lens_ipow(x, 2)*y*dy + -1.20189e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.31014e-08 *lens_ipow(x, 4) + -3.54239e-06 *lens_ipow(y, 3)*dy*lambda + 1.43149e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 1.25316e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 9.75222e-11 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy*lambda+0.0f;
const double dx32 =  + -1.40129 *dx*dy + -0.0242107 *y*dx + -0.0255495 *x*dy + -0.00014229 *x*y + -1.87188e-05 *lens_ipow(y, 3)*dx + 4.1772e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + 18.7311 *dx*lens_ipow(dy, 5)*lambda + -143.982 *x*lens_ipow(dx, 6)*lens_ipow(dy, 3)+0.0f;
const double dx33 =  + 0.357532  + -2.23678 *lens_ipow(dy, 2) + -0.700644 *lens_ipow(dx, 2) + -0.0790645 *y*dy + -0.000375296 *lens_ipow(y, 2) + -0.0255495 *x*dx + -0.000140011 *lens_ipow(x, 2) + 1.12998e-06 *lens_ipow(y, 4) + 8.06182e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -8.85597e-07 *lens_ipow(y, 4)*lambda + 21.3229 *lens_ipow(dy, 6)*lambda + 46.8277 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda + 1.89122e-08 *lens_ipow(x, 6)*lens_ipow(dy, 2) + 1.62537e-11 *lens_ipow(x, 2)*lens_ipow(y, 6)*lambda + -61.7066 *x*lens_ipow(dx, 7)*lens_ipow(dy, 2)+0.0f;
const double dx34 =  + 0.0103829 *y + -0.0151444 *y*lambda + -8.85597e-07 *lens_ipow(y, 4)*dy + 4.77163e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + 3.04613 *lens_ipow(dy, 7) + 9.36553 *lens_ipow(dx, 2)*lens_ipow(dy, 5) + 1.62537e-11 *lens_ipow(x, 2)*lens_ipow(y, 6)*dy+0.0f;
const double dx40 =  + -0.00911397 *dx*lens_ipow(dy, 2) + -7.6925e-08 *x*lens_ipow(y, 2) + -7.39458e-08 *lens_ipow(x, 3) + -0.0125261 *lens_ipow(dx, 3)*lambda + -0.000204828 *y*dx*dy*lambda + -0.000850797 *x*lens_ipow(dy, 4) + -0.0026858 *x*lens_ipow(dx, 4)*lambda + -0.145762 *lens_ipow(dx, 7) + 0.034611 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + -1.99539e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + -0.000272537 *dy + 3.76063e-06 *lens_ipow(y, 2)*dy + -5.70869e-08 *lens_ipow(y, 3) + -7.6925e-08 *lens_ipow(x, 2)*y + -0.0157845 *lens_ipow(dx, 2)*dy*lambda + -0.000204828 *x*dx*dy*lambda + -0.054832 *lens_ipow(dy, 5) + -0.00159799 *y*lens_ipow(dx, 4)*lambda + 0.034611 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + -0.037954 *y*lens_ipow(dy, 8) + -9.97694e-08 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx42 =  + -1.24787 *dx*lens_ipow(dy, 2) + -1.44858 *lens_ipow(dx, 3) + -0.00911397 *x*lens_ipow(dy, 2) + -1.1164 *dx*lens_ipow(dy, 2)*lambda + -0.031569 *y*dx*dy*lambda + -0.0375783 *x*lens_ipow(dx, 2)*lambda + -0.000204828 *x*y*dy*lambda + -0.00319599 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + -0.00537161 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lambda + -43.3937 *lens_ipow(dx, 3)*lens_ipow(dy, 4) + -1.02033 *x*lens_ipow(dx, 6) + -46.2654 *lens_ipow(dx, 7)*lambda + 0.103833 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + -9.97694e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)+0.0f;
const double dx43 =  + -0.000272537 *y + -1.26894 *lens_ipow(dy, 3) + -1.24787 *lens_ipow(dx, 2)*dy + 1.25354e-06 *lens_ipow(y, 3) + -0.0182279 *x*dx*dy + -1.1164 *lens_ipow(dx, 2)*dy*lambda + -0.0157845 *y*lens_ipow(dx, 2)*lambda + -0.000204828 *x*y*dx*lambda + -4.80064 *lens_ipow(dy, 5) + -0.27416 *y*lens_ipow(dy, 4) + -0.00170159 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -43.3937 *lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.103833 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + -0.151816 *lens_ipow(y, 2)*lens_ipow(dy, 7) + -9.97694e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy+0.0f;
const double dx44 =  + 0.659076  + -1.81612 *lambda + 1.32227 *lens_ipow(lambda, 2) + -0.558199 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.0157845 *y*lens_ipow(dx, 2)*dy + -0.0125261 *x*lens_ipow(dx, 3) + -0.000204828 *x*y*dx*dy + -0.000798996 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -0.0013429 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -5.78317 *lens_ipow(dx, 8) + 0.034611 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
} break;
