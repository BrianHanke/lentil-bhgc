case cooke__speed_panchro__1920__40mm:
{
const double dx00 =  + 0.659683  + 0.0225658 *lambda + 7.3305e-05 *lens_ipow(y, 2) + 0.000160703 *lens_ipow(x, 2) + -0.285035 *lens_ipow(dy, 2) + -0.721997 *lens_ipow(dx, 2) + 2.81587e-05 *lens_ipow(x, 3)*dx + -0.319535 *lens_ipow(dx, 4) + -6.83104e-08 *lens_ipow(y, 4) + 1.52374e-05 *x*lens_ipow(y, 2)*dx + -0.0232736 *x*dx*lens_ipow(dy, 2) + 0.00123043 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000319304 *x*y*dx*dy*lambda + 0.492022 *lens_ipow(dy, 4)*lambda + 1.52504e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -9.11984e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -0.724248 *lens_ipow(dy, 4)*lens_ipow(lambda, 4)+0.0f;
const double dx01 =  + -0.355265 *dx*dy + 0.00014661 *x*y + 0.0044396 *y*dx + -1.17233 *lens_ipow(dx, 3)*dy + -2.73242e-07 *x*lens_ipow(y, 3) + 1.52374e-05 *lens_ipow(x, 2)*y*dx + -0.0453373 *y*dx*lens_ipow(dy, 2) + -1.27293 *dx*lens_ipow(dy, 3) + -0.0459398 *y*lens_ipow(dx, 3) + 0.000159652 *lens_ipow(x, 2)*dx*dy*lambda + 1.52504e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy+0.0f;
const double dx02 =  + 28.7526  + 0.838809 *lambda + -0.355265 *y*dy + -66.792 *lens_ipow(dx, 2) + -21.2417 *lens_ipow(dy, 2) + -1.44399 *x*dx + 0.0022198 *lens_ipow(y, 2) + 7.03968e-06 *lens_ipow(x, 4) + -1.27814 *x*lens_ipow(dx, 3) + -3.51699 *y*lens_ipow(dx, 2)*dy + -9.75998 *lens_ipow(dy, 4) + 7.61872e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0226686 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.27293 *y*lens_ipow(dy, 3) + -0.0689097 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0116368 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.000820286 *lens_ipow(x, 3)*dx + 0.000159652 *lens_ipow(x, 2)*y*dy*lambda+0.0f;
const double dx03 =  + -0.355265 *y*dx + -42.4835 *dx*dy + -0.570069 *x*dy + -1.17233 *y*lens_ipow(dx, 3) + -39.0399 *dx*lens_ipow(dy, 3) + -0.0453373 *lens_ipow(y, 2)*dx*dy + -3.81879 *y*dx*lens_ipow(dy, 2) + -0.0232736 *lens_ipow(x, 2)*dx*dy + 0.000159652 *lens_ipow(x, 2)*y*dx*lambda + 1.96809 *x*lens_ipow(dy, 3)*lambda + 5.08348e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -3.64793e-07 *lens_ipow(x, 5)*dy + -2.89699 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 4)+0.0f;
const double dx04 =  + 0.0225658 *x + 0.838809 *dx + 0.000159652 *lens_ipow(x, 2)*y*dx*dy + 0.492022 *x*lens_ipow(dy, 4) + -2.89699 *x*lens_ipow(dy, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx10 =  + -0.394178 *dx*dy + 0.000145946 *x*y + 0.00344516 *x*dy + -0.0333093 *x*lens_ipow(dx, 2)*dy + -0.785544 *lens_ipow(dx, 3)*dy + -1.41528e-07 *x*lens_ipow(y, 3) + 1.2091e-05 *lens_ipow(x, 2)*y*dx + -0.0112052 *x*y*lens_ipow(dy, 4)*lambda + -0.834973 *x*lens_ipow(dy, 5)*lambda + -14.4717 *dx*lens_ipow(dy, 5)*lambda + -1.77795 *y*dx*lens_ipow(dy, 6)*lens_ipow(lambda, 2) + 1.86805 *x*lens_ipow(dy, 7)*lens_ipow(lambda, 2)+0.0f;
const double dx11 =  + 0.64034  + 0.0938781 *lambda + -0.277055 *lens_ipow(dx, 2) + -0.719888 *lens_ipow(dy, 2) + -0.065173 *lens_ipow(lambda, 2) + 7.29728e-05 *lens_ipow(x, 2) + 0.000169434 *lens_ipow(y, 2) + 0.239336 *lens_ipow(dx, 4) + 3.41871e-05 *lens_ipow(y, 3)*dy + -2.12291e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 4.03032e-06 *lens_ipow(x, 3)*dx + -0.345384 *lens_ipow(dy, 4) + 0.00144115 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0224344 *y*lens_ipow(dx, 2)*dy*lambda + -0.0056026 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + -1.77795 *x*dx*lens_ipow(dy, 6)*lens_ipow(lambda, 2)+0.0f;
const double dx12 =  + -0.55411 *y*dx + -0.394178 *x*dy + -43.2764 *dx*dy + -0.0333093 *lens_ipow(x, 2)*dx*dy + -2.35663 *x*lens_ipow(dx, 2)*dy + 0.957343 *y*lens_ipow(dx, 3) + 4.03032e-06 *lens_ipow(x, 3)*y + -0.0224344 *lens_ipow(y, 2)*dx*dy*lambda + -14.4717 *x*lens_ipow(dy, 5)*lambda + -1.77795 *x*y*lens_ipow(dy, 6)*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 28.0678  + 3.37459 *lambda + -1.43978 *y*dy + -0.394178 *x*dx + -21.6382 *lens_ipow(dx, 2) + -2.29991 *lens_ipow(lambda, 2) + 0.00172258 *lens_ipow(x, 2) + -66.5521 *lens_ipow(dy, 2) + -0.0166547 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.785544 *x*lens_ipow(dx, 3) + 8.54678e-06 *lens_ipow(y, 4) + -1.38154 *y*lens_ipow(dy, 3) + 0.000960768 *lens_ipow(y, 3)*dy + -0.0112172 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.0224104 *lens_ipow(x, 2)*y*lens_ipow(dy, 3)*lambda + -2.08743 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + -72.3584 *x*dx*lens_ipow(dy, 4)*lambda + -10.6677 *x*y*dx*lens_ipow(dy, 5)*lens_ipow(lambda, 2) + 6.53817 *lens_ipow(x, 2)*lens_ipow(dy, 6)*lens_ipow(lambda, 2)+0.0f;
const double dx14 =  + 3.37459 *dy + 0.0938781 *y + -0.130346 *y*lambda + -4.59982 *dy*lambda + -0.0112172 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.0056026 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + -0.417486 *lens_ipow(x, 2)*lens_ipow(dy, 5) + -14.4717 *x*dx*lens_ipow(dy, 5) + -3.5559 *x*y*dx*lens_ipow(dy, 6)*lambda + 1.86805 *lens_ipow(x, 2)*lens_ipow(dy, 7)*lambda+0.0f;
const double dx20 =  + -0.0241105  + 0.00164861 *lambda + -0.000621157 *y*dy + -0.00291316 *x*dx + -1.54875e-05 *lens_ipow(y, 2) + -5.71479e-05 *lens_ipow(x, 2) + -0.0132139 *lens_ipow(dy, 2) + -0.0635758 *lens_ipow(dx, 2) + 0.145881 *lens_ipow(dx, 4) + -7.92139e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -7.34072e-09 *lens_ipow(y, 4) + 2.40924e-06 *x*lens_ipow(y, 2)*dx + -0.00018897 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000155863 *x*y*dx*dy*lambda + -1.61313e-06 *lens_ipow(x, 3)*dx*lambda + 0.264408 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.0153893 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -6.26309e-07 *lens_ipow(y, 4)*lens_ipow(dx, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx21 =  + -0.000621157 *x*dy + -3.09751e-05 *x*y + -0.00139063 *y*dx*lambda + -0.0499884 *dx*dy*lambda + -2.93629e-08 *x*lens_ipow(y, 3) + 2.40924e-06 *lens_ipow(x, 2)*y*dx + -0.0214704 *dx*lens_ipow(dy, 3) + 7.79314e-05 *lens_ipow(x, 2)*dx*dy*lambda + -2.50524e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx22 =  + 0.477784  + -0.00145658 *lens_ipow(x, 2) + -1.94681 *lens_ipow(dx, 2) + 0.400299 *lens_ipow(dy, 2) + -0.127152 *x*dx + -0.000695313 *lens_ipow(y, 2)*lambda + -1.1185 *lens_ipow(dy, 2)*lambda + -0.0499884 *y*dy*lambda + 0.583525 *x*lens_ipow(dx, 3) + 0.0558385 *lens_ipow(lambda, 4) + 20.1017 *lens_ipow(dx, 4) + 1.20462e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0214704 *y*lens_ipow(dy, 3) + -0.00012598 *lens_ipow(x, 3)*dx + 7.79314e-05 *lens_ipow(x, 2)*y*dy*lambda + 16.5009 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -4.03283e-07 *lens_ipow(x, 4)*lambda + 0.528815 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.00769464 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -2.50524e-06 *x*lens_ipow(y, 4)*lens_ipow(dx, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + -0.000621157 *x*y + 0.800597 *dx*dy + -0.0264279 *x*dy + -2.237 *dx*dy*lambda + -0.0499884 *y*dx*lambda + -5.28093e-05 *lens_ipow(x, 3)*dy + -0.0644112 *y*dx*lens_ipow(dy, 2) + 7.79314e-05 *lens_ipow(x, 2)*y*dx*lambda + 11.0006 *lens_ipow(dx, 3)*dy*lambda + 0.528815 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 0.0153893 *lens_ipow(x, 2)*dx*dy*lens_ipow(lambda, 4)+0.0f;
const double dx24 =  + 0.00164861 *x + -0.000695313 *lens_ipow(y, 2)*dx + -1.1185 *dx*lens_ipow(dy, 2) + -0.0499884 *y*dx*dy + 0.223354 *dx*lens_ipow(lambda, 3) + 7.79314e-05 *lens_ipow(x, 2)*y*dx*dy + 5.50031 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -4.03283e-07 *lens_ipow(x, 4)*dx + 0.528815 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.0307786 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -1.25262e-06 *x*lens_ipow(y, 4)*lens_ipow(dx, 4)*lambda+0.0f;
const double dx30 =  + -0.000663849 *y*dx + -3.23308e-05 *x*y + -0.00150433 *x*dy*lambda + -0.0573128 *dx*dy*lambda + -2.91243e-08 *lens_ipow(x, 3)*y + 2.0586e-06 *x*lens_ipow(y, 2)*dy + -0.00393591 *y*dx*lens_ipow(dy, 2)*lambda + 0.0108105 *x*lens_ipow(dy, 5)*lambda + 5.15947e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const double dx31 =  + -0.0254339  + 0.00669659 *lambda + -0.0141728 *lens_ipow(dx, 2) + -0.00296376 *y*dy + -0.0635021 *lens_ipow(dy, 2) + -0.000663849 *x*dx + -0.00462074 *lens_ipow(lambda, 2) + -1.61654e-05 *lens_ipow(x, 2) + -5.79874e-05 *lens_ipow(y, 2) + 0.121121 *lens_ipow(dy, 4) + -5.53522e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -7.28108e-09 *lens_ipow(x, 4) + 2.0586e-06 *lens_ipow(x, 2)*y*dy + -0.000168513 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 4.86406e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -0.00393591 *x*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx32 =  + -0.0283455 *y*dx + -0.000663849 *x*y + 0.89696 *dx*dy + -2.50935 *dx*dy*lambda + -0.0573128 *x*dy*lambda + -3.69014e-05 *lens_ipow(y, 3)*dx + 6.35835 *dx*lens_ipow(dy, 3)*lambda + -0.00393591 *x*y*lens_ipow(dy, 2)*lambda + 10.3656 *lens_ipow(dx, 5)*dy + 2.57974e-05 *lens_ipow(x, 4)*dx*lens_ipow(dy, 3)+0.0f;
const double dx33 =  + 0.462105  + 0.0384647 *lambda + -0.00148188 *lens_ipow(y, 2) + -0.127004 *y*dy + 0.44848 *lens_ipow(dx, 2) + -1.81902 *lens_ipow(dy, 2) + -1.25468 *lens_ipow(dx, 2)*lambda + -0.000752166 *lens_ipow(x, 2)*lambda + -0.0573128 *x*dx*lambda + 16.9396 *lens_ipow(dy, 4) + 0.484484 *y*lens_ipow(dy, 3) + 1.0293e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.000112342 *lens_ipow(y, 3)*dy + 9.53753 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 3.24271e-05 *lens_ipow(y, 3)*dy*lambda + -0.00787181 *x*y*dx*dy*lambda + 1.72761 *lens_ipow(dx, 6) + 0.0270262 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + 3.86961e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx34 =  + 0.0384647 *dy + 0.00669659 *y + -0.00924149 *y*lambda + -1.25468 *lens_ipow(dx, 2)*dy + -0.000752166 *lens_ipow(x, 2)*dy + -0.0573128 *x*dx*dy + 3.17918 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + 1.62135e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.00393591 *x*y*dx*lens_ipow(dy, 2) + 0.00540523 *lens_ipow(x, 2)*lens_ipow(dy, 5)+0.0f;
const double dx40 =  + 0.000967523 *dx + -0.23684 *lens_ipow(dx, 3) + -0.000111848 *x*y*dy + -5.53713e-05 *lens_ipow(y, 2)*dx + -6.69377e-07 *x*lens_ipow(y, 2) + -0.00964206 *x*lens_ipow(dx, 2) + -9.88734e-05 *lens_ipow(x, 2)*dx + -0.264483 *dx*lens_ipow(dy, 2) + -0.00775668 *y*dx*dy + -0.00426946 *x*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + -0.0174721 *lens_ipow(dy, 3) + -0.00425124 *y*lens_ipow(dx, 2) + -5.59241e-05 *lens_ipow(x, 2)*dy + -0.000110743 *x*y*dx + -6.69377e-07 *lens_ipow(x, 2)*y + -2.02461e-07 *lens_ipow(y, 3) + -0.264933 *lens_ipow(dx, 2)*dy + -0.00775668 *x*dx*dy + -0.000243499 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.0153728 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -1.49415e-06 *lens_ipow(y, 4)*dy + -0.448901 *y*lens_ipow(dy, 4) + -5.10419 *lens_ipow(dy, 5)+0.0f;
const double dx42 =  + 0.000967523 *x + 0.103808 *dx + -16.0853 *lens_ipow(dx, 3) + -0.00425124 *lens_ipow(y, 2)*dx + -0.710521 *x*lens_ipow(dx, 2) + -17.0617 *dx*lens_ipow(dy, 2) + -5.53713e-05 *x*lens_ipow(y, 2) + -0.00964206 *lens_ipow(x, 2)*dx + -0.529865 *y*dx*dy + -3.29578e-05 *lens_ipow(x, 3) + -0.264483 *x*lens_ipow(dy, 2) + -0.00775668 *x*y*dy+0.0f;
const double dx43 =  + -0.0524163 *y*lens_ipow(dy, 2) + -17.0617 *lens_ipow(dx, 2)*dy + -5.59241e-05 *lens_ipow(x, 2)*y + -2.24542 *lens_ipow(dy, 3) + -0.264933 *y*lens_ipow(dx, 2) + -0.528965 *x*dx*dy + -0.00775668 *x*y*dx + -0.00426946 *lens_ipow(x, 2)*dy + -0.000121749 *lens_ipow(y, 4)*dy + -0.0153728 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -2.98829e-07 *lens_ipow(y, 5) + -289.753 *lens_ipow(dy, 5) + -0.897803 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -25.521 *y*lens_ipow(dy, 4)+0.0f;
const double dx44 =  + 0.366466  + -1.01385 *lambda + 0.73963 *lens_ipow(lambda, 2)+0.0f;
} break;
