case cooke__speed_panchro__1920__40mm:
{
const double dx00 =  + 0.602998  + 0.0752952 *y*dy + 0.161015 *x*dx + 0.00110254 *lens_ipow(y, 2) + 0.00250388 *lens_ipow(x, 2) + 1.08931 *lens_ipow(dy, 2) + 1.28465 *lens_ipow(dx, 2) + 0.000324968 *lens_ipow(x, 2)*lambda + -3.57509e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0026334 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -2.79106e-07 *lens_ipow(y, 4) + -6.45309e-05 *x*lens_ipow(y, 2)*dx + -0.126888 *y*lens_ipow(dy, 3)*lambda + 1.93475 *x*lens_ipow(dx, 3)*lambda + 6.47285 *lens_ipow(dx, 4)*lambda + 0.00298749 *lens_ipow(x, 3)*dx*lambda + 0.129038 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 2.11105e-05 *lens_ipow(x, 4)*lambda + -2.47604 *lens_ipow(dy, 4)*lambda + -0.00151913 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx01 =  + 0.585201 *dx*dy + 0.0752952 *x*dy + 0.00220508 *x*y + 0.0453337 *y*dx + -2.3834e-06 *lens_ipow(x, 3)*y + 1.03457 *lens_ipow(dx, 3)*dy + -1.11642e-06 *x*lens_ipow(y, 3) + -6.45309e-05 *lens_ipow(x, 2)*y*dx + -0.126888 *x*lens_ipow(dy, 3)*lambda + -0.00303826 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx02 =  + 39.8032  + 0.585201 *y*dy + 0.0805075 *lens_ipow(x, 2) + -48.2267 *lens_ipow(dx, 2) + -15.335 *lens_ipow(dy, 2) + 2.56929 *x*dx + 0.0226669 *lens_ipow(y, 2) + 3.10372 *y*lens_ipow(dx, 2)*dy + 20.3827 *lens_ipow(dy, 4) + -3.22655e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 226.71 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.90213 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 25.8914 *x*lens_ipow(dx, 3)*lambda + 0.000746873 *lens_ipow(x, 4)*lambda + 0.0860254 *lens_ipow(x, 3)*dx*lambda+0.0f;
const double dx03 =  + 0.585201 *y*dx + 0.0752952 *x*y + -30.6701 *dx*dy + 2.17862 *x*dy + 1.03457 *y*lens_ipow(dx, 3) + 0.0017556 *lens_ipow(x, 3)*dy + 81.5307 *dx*lens_ipow(dy, 3) + 151.14 *lens_ipow(dx, 3)*dy + -0.380663 *x*y*lens_ipow(dy, 2)*lambda + -9.90416 *x*lens_ipow(dy, 3)*lambda + -0.00303826 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 3)+0.0f;
const double dx04 =  + 0.000108323 *lens_ipow(x, 3) + -0.126888 *x*y*lens_ipow(dy, 3) + 0.967375 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 6.47285 *x*lens_ipow(dx, 4) + 0.000746873 *lens_ipow(x, 4)*dx + 0.0430127 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 4.2221e-06 *lens_ipow(x, 5) + -2.47604 *x*lens_ipow(dy, 4) + -0.00455739 *x*lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx10 =  + 0.529298 *dx*dy + 0.0717074 *y*dx + 0.00214868 *x*y + 0.0456508 *x*dy + -0.0420553 *x*lens_ipow(dx, 2)*dy + 0.00243569 *lens_ipow(y, 2)*dx*dy + 4.76403e-05 *lens_ipow(y, 3)*dx + 0.00392365 *x*y*lens_ipow(dx, 2) + 0.000136707 *lens_ipow(x, 2)*y*dx + 0.000108129 *x*lens_ipow(y, 2)*dy + 0.00321544 *x*y*lens_ipow(dy, 2)+0.0f;
const double dx11 =  + 0.604253  + 0.973402 *lens_ipow(dx, 2) + 0.153912 *y*dy + 1.15273 *lens_ipow(dy, 2) + 0.0717074 *x*dx + 0.00107434 *lens_ipow(x, 2) + 0.00239375 *lens_ipow(y, 2) + 0.00032359 *lens_ipow(y, 2)*lambda + 0.00487138 *x*y*dx*dy + 0.000142921 *x*lens_ipow(y, 2)*dx + 0.00196183 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 4.55689e-05 *lens_ipow(x, 3)*dx + 0.00326934 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000108129 *lens_ipow(x, 2)*y*dy + 0.00160772 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00331539 *lens_ipow(y, 3)*dy*lambda + 0.139628 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 2.43763e-05 *lens_ipow(y, 4)*lambda + 6.58545 *lens_ipow(dy, 4)*lambda + 2.04432 *y*lens_ipow(dy, 3)*lambda+0.0f;
const double dx12 =  + 1.9468 *y*dx + 0.529298 *x*dy + 0.0717074 *x*y + -38.5053 *dx*dy + -0.0420553 *lens_ipow(x, 2)*dx*dy + 0.00243569 *x*lens_ipow(y, 2)*dy + 177.258 *dx*lens_ipow(dy, 3) + 4.76403e-05 *x*lens_ipow(y, 3) + 0.00392365 *lens_ipow(x, 2)*y*dx + 4.55689e-05 *lens_ipow(x, 3)*y + 0.00217956 *lens_ipow(y, 3)*dx + 213.907 *lens_ipow(dx, 3)*dy+0.0f;
const double dx13 =  + 39.8586  + 0.0769561 *lens_ipow(y, 2) + 2.30546 *y*dy + 0.529298 *x*dx + -19.2527 *lens_ipow(dx, 2) + 0.0228254 *lens_ipow(x, 2) + -54.3477 *lens_ipow(dy, 2) + -0.0210276 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00243569 *x*lens_ipow(y, 2)*dx + 265.886 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 53.4768 *lens_ipow(dx, 4) + 5.40644e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00321544 *lens_ipow(x, 2)*y*dy + 0.000828847 *lens_ipow(y, 4)*lambda + 0.0930856 *lens_ipow(y, 3)*dy*lambda + 26.3418 *y*lens_ipow(dy, 3)*lambda + 3.06648 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx14 =  + 0.000107863 *lens_ipow(y, 3) + 0.000828847 *lens_ipow(y, 4)*dy + 0.0465428 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 4.87525e-06 *lens_ipow(y, 5) + 6.58545 *y*lens_ipow(dy, 4) + 1.02216 *lens_ipow(y, 2)*lens_ipow(dy, 3)+0.0f;
const double dx20 =  + -0.0488751  + -0.0031572 *y*dy + -0.00293678 *x*dx + -2.24618e-05 *lens_ipow(y, 2) + -2.11842e-05 *lens_ipow(x, 2) + -0.0634172 *lens_ipow(dy, 2) + -0.0191735 *lens_ipow(dx, 2) + 0.000122713 *x*dx*lambda + 3.79828e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0035781 *y*lens_ipow(dx, 2)*dy + -2.37103e-06 *lens_ipow(x, 3)*dx + 0.345353 *lens_ipow(dx, 4) + 0.0123285 *x*lens_ipow(dx, 3) + 0.375998 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0088536 *lens_ipow(dy, 4) + 0.00874624 *x*dx*lens_ipow(dy, 2) + -3.09565e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -2.7246e-14 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx+0.0f;
const double dx21 =  + -0.070106 *dx*dy + -0.0031572 *x*dy + -4.49237e-05 *x*y + -0.00135682 *y*dx + 2.53219e-08 *lens_ipow(x, 3)*y + 0.0035781 *x*lens_ipow(dx, 2)*dy + 0.206655 *lens_ipow(dx, 3)*dy + 0.0035438 *y*lens_ipow(dx, 3) + -6.1913e-05 *x*y*lens_ipow(dy, 2)*lambda + 0.0416559 *dx*lens_ipow(dy, 3)*lambda + -4.0869e-14 *lens_ipow(x, 4)*lens_ipow(y, 5)*dx+0.0f;
const double dx22 =  + -1.56323  + -0.070106 *y*dy + -0.00146839 *lens_ipow(x, 2) + 1.52021 *lens_ipow(dx, 2) + -1.13455 *lens_ipow(dy, 2) + -0.0383471 *x*dx + -0.000678409 *lens_ipow(y, 2) + 6.13566e-05 *lens_ipow(x, 2)*lambda + 0.0071562 *x*y*dx*dy + -5.92758e-07 *lens_ipow(x, 4) + 1.38141 *x*lens_ipow(dx, 3) + 0.0184928 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.619965 *y*lens_ipow(dx, 2)*dy + 26.3377 *lens_ipow(dx, 4) + 0.751996 *x*dx*lens_ipow(dy, 2) + 0.0053157 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00437312 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 25.8735 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0416559 *y*lens_ipow(dy, 3)*lambda + -6.8115e-15 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx23 =  + -0.070106 *y*dx + -0.0031572 *x*y + -2.2691 *dx*dy + -0.126834 *x*dy + 0.0035781 *x*y*lens_ipow(dx, 2) + 0.206655 *y*lens_ipow(dx, 3) + 0.751996 *x*lens_ipow(dx, 2)*dy + 0.0354144 *x*lens_ipow(dy, 3) + 0.00874624 *lens_ipow(x, 2)*dx*dy + 17.249 *lens_ipow(dx, 3)*dy + -6.1913e-05 *x*lens_ipow(y, 2)*dy*lambda + 0.124968 *y*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx24 =  + 6.13566e-05 *lens_ipow(x, 2)*dx + -3.09565e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0416559 *y*dx*lens_ipow(dy, 3)+0.0f;
const double dx30 =  + 0.115792 *dx*dy + 2.49134e-05 *x*y + 0.00262037 *x*dy + 0.0153794 *x*lens_ipow(dx, 2)*dy + 0.0785436 *lens_ipow(dx, 3)*dy + -2.69958e-05 *lens_ipow(y, 2)*dx*dy + 7.52669e-06 *lens_ipow(x, 3)*dy + -0.0032049 *y*dx*lens_ipow(dy, 2) + 0.00222175 *x*lens_ipow(dy, 3) + 0.000672115 *lens_ipow(x, 2)*dx*dy + -7.27633e-05 *x*y*lens_ipow(dx, 2)*lambda + -0.00112263 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -2.2327e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 2.18169e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(dy, 2)+0.0f;
const double dx31 =  + -0.0489169  + -0.00242912 *y*dy + -0.007726 *lens_ipow(dy, 2) + 1.24567e-05 *lens_ipow(x, 2) + -1.4763e-05 *lens_ipow(y, 2) + -4.18179e-06 *lens_ipow(y, 2)*lambda + -5.39916e-05 *x*y*dx*dy + 0.0186512 *lens_ipow(dx, 4) + -4.68217e-06 *lens_ipow(y, 3)*dy + -0.0032049 *x*dx*lens_ipow(dy, 2) + 0.0016725 *y*lens_ipow(dx, 2)*dy + 0.163295 *lens_ipow(dy, 4) + -0.000289429 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -3.63817e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -0.00112263 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -2.2327e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 2.18169e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)+0.0f;
const double dx32 =  + 0.115792 *x*dy + 5.37619 *dx*dy + 0.0153794 *lens_ipow(x, 2)*dx*dy + 0.235631 *x*lens_ipow(dx, 2)*dy + -2.69958e-05 *x*lens_ipow(y, 2)*dy + 0.0746048 *y*lens_ipow(dx, 3) + -0.0032049 *x*y*lens_ipow(dy, 2) + 0.0016725 *lens_ipow(y, 2)*dx*dy + 0.000224038 *lens_ipow(x, 3)*dy + -7.27633e-05 *lens_ipow(x, 2)*y*dx*lambda + -0.00336788 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 7.2723e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dy, 2)+0.0f;
const double dx33 =  + -1.56463  + -0.00121456 *lens_ipow(y, 2) + -0.015452 *y*dy + 0.115792 *x*dx + 2.6881 *lens_ipow(dx, 2) + 0.00131018 *lens_ipow(x, 2) + 2.09954 *lens_ipow(dy, 2) + 0.00768971 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.0785436 *x*lens_ipow(dx, 3) + -2.69958e-05 *x*lens_ipow(y, 2)*dx + -1.17054e-06 *lens_ipow(y, 4) + 1.88167e-06 *lens_ipow(x, 4) + 15.9107 *lens_ipow(dy, 4) + -0.0064098 *x*y*dx*dy + 0.000836249 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.653178 *y*lens_ipow(dy, 3) + 0.00333262 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.000224038 *lens_ipow(x, 3)*dx + -0.000192953 *lens_ipow(y, 3)*dy + -5.58174e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + 1.45446e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy+0.0f;
const double dx34 =  + -1.39393e-06 *lens_ipow(y, 3) + -3.63817e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2) + -0.00336788 *x*y*lens_ipow(dx, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx40 =  + 0.00466919 *dx + 0.000115407 *x + -0.420364 *lens_ipow(dx, 3) + -0.000534725 *x*y*dy + -0.000267244 *lens_ipow(y, 2)*dx + -7.56201e-06 *x*lens_ipow(y, 2) + -0.0305388 *x*lens_ipow(dx, 2) + -0.000810571 *lens_ipow(x, 2)*dx + -0.418704 *dx*lens_ipow(dy, 2) + -7.67114e-06 *lens_ipow(x, 3) + -0.0199714 *y*dx*dy + -0.0103627 *x*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + 0.00471132 *dy + 0.000117108 *y + -0.420982 *lens_ipow(dy, 3) + -0.0103403 *y*lens_ipow(dx, 2) + -0.000267363 *lens_ipow(x, 2)*dy + -0.000534489 *x*y*dx + -7.56201e-06 *lens_ipow(x, 2)*y + -7.74017e-06 *lens_ipow(y, 3) + -0.418096 *lens_ipow(dx, 2)*dy + -0.0306568 *y*lens_ipow(dy, 2) + -0.0199714 *x*dx*dy + -0.000815809 *lens_ipow(y, 2)*dy+0.0f;
const double dx42 =  + 0.00466919 *x + 0.21375 *dx + -19.6767 *lens_ipow(dx, 3) + -0.0103403 *lens_ipow(y, 2)*dx + -1.26109 *x*lens_ipow(dx, 2) + -19.6389 *dx*lens_ipow(dy, 2) + -0.000267244 *x*lens_ipow(y, 2) + -0.0305388 *lens_ipow(x, 2)*dx + -0.836192 *y*dx*dy + -0.00027019 *lens_ipow(x, 3) + -0.418704 *x*lens_ipow(dy, 2) + -0.0199714 *x*y*dy+0.0f;
const double dx43 =  + 0.00471132 *y + 0.214031 *dy + -1.26294 *y*lens_ipow(dy, 2) + -19.6389 *lens_ipow(dx, 2)*dy + -0.000267363 *lens_ipow(x, 2)*y + -19.66 *lens_ipow(dy, 3) + -0.418096 *y*lens_ipow(dx, 2) + -0.0306568 *lens_ipow(y, 2)*dy + -0.837409 *x*dx*dy + -0.0199714 *x*y*dx + -0.0103627 *lens_ipow(x, 2)*dy + -0.000271936 *lens_ipow(y, 3)+0.0f;
const double dx44 =  + 0.229879  + -0.314144 *lambda+0.0f;
} break;
