case cooke__speed_panchro__1920__100mm:
{
const double dx00 =  + 0.642366  + 0.0856359 *lambda + 0.0020634 *x*dx + -0.0586154 *lens_ipow(lambda, 2) + 1.06655e-05 *lens_ipow(y, 2) + 2.84796e-05 *lens_ipow(x, 2) + -0.256023 *lens_ipow(dy, 2) + -0.558043 *lens_ipow(dx, 2) + -0.0266219 *y*lens_ipow(dx, 2)*dy + -3.76283 *lens_ipow(dx, 4) + -0.063614 *x*lens_ipow(dx, 3) + -3.76677 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.040678 *x*dx*lens_ipow(dy, 2) + 1.59353e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx+0.0f;
const double dx01 =  + -0.306917 *dx*dy + 2.1331e-05 *x*y + 0.00198547 *y*dx + -0.0266219 *x*lens_ipow(dx, 2)*dy + -3.50353 *lens_ipow(dx, 3)*dy + -0.0421732 *y*dx*lens_ipow(dy, 2) + -2.95128 *dx*lens_ipow(dy, 3) + -0.0286727 *y*lens_ipow(dx, 3) + 7.96765e-09 *lens_ipow(x, 4)*y*dx+0.0f;
const double dx02 =  + 70.0927  + 8.207 *lambda + -0.306917 *y*dy + 0.0010317 *lens_ipow(x, 2) + -137.525 *lens_ipow(dx, 2) + -46.0844 *lens_ipow(dy, 2) + -1.11609 *x*dx + 0.000992735 *lens_ipow(y, 2) + -5.60491 *lens_ipow(lambda, 2) + -0.0532438 *x*y*dx*dy + -15.0513 *x*lens_ipow(dx, 3) + -0.095421 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -10.5106 *y*lens_ipow(dx, 2)*dy + -606.09 *lens_ipow(dx, 4) + -7.53354 *x*dx*lens_ipow(dy, 2) + -104.008 *lens_ipow(dy, 4) + -0.0210866 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -2.95128 *y*lens_ipow(dy, 3) + -0.0430091 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.020339 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -704.526 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 3.98383e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)+0.0f;
const double dx03 =  + -0.306917 *y*dx + -92.1688 *dx*dy + -0.512046 *x*dy + -0.0266219 *x*y*lens_ipow(dx, 2) + -3.50353 *y*lens_ipow(dx, 3) + -7.53354 *x*lens_ipow(dx, 2)*dy + -416.033 *dx*lens_ipow(dy, 3) + -0.0421732 *lens_ipow(y, 2)*dx*dy + -8.85384 *y*dx*lens_ipow(dy, 2) + -0.040678 *lens_ipow(x, 2)*dx*dy + -469.684 *lens_ipow(dx, 3)*dy+0.0f;
const double dx04 =  + 0.0856359 *x + 8.207 *dx + -0.117231 *x*lambda + -11.2098 *dx*lambda+0.0f;
const double dx10 =  + 2.11776e-05 *x*y + 0.00148907 *x*dy + -1.88091 *dx*dy*lambda + 2.59627 *dx*dy*lens_ipow(lambda, 2) + -0.0240069 *x*lens_ipow(dx, 2)*dy + -1.92652 *lens_ipow(dx, 3)*dy + -0.00337103 *y*lens_ipow(dx, 3) + 0.787701 *y*dx*lens_ipow(dy, 4) + -0.204488 *x*lens_ipow(dy, 5) + -1.40302 *dx*dy*lens_ipow(lambda, 4) + 0.00887828 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3)+0.0f;
const double dx11 =  + 0.642885  + 0.0847499 *lambda + -0.274506 *lens_ipow(dx, 2) + 0.00115637 *y*dy + -0.64955 *lens_ipow(dy, 2) + -0.0578827 *lens_ipow(lambda, 2) + 1.05888e-05 *lens_ipow(x, 2) + 2.98713e-05 *lens_ipow(y, 2) + -0.00337103 *x*lens_ipow(dx, 3) + 0.787701 *x*dx*lens_ipow(dy, 4) + -0.414122 *y*lens_ipow(dy, 5) + -24.7483 *lens_ipow(dy, 6) + 0.0177566 *x*y*dx*lens_ipow(dy, 3)+0.0f;
const double dx12 =  + -0.549013 *y*dx + -104.115 *dx*dy + -1.88091 *x*dy*lambda + 2.59627 *x*dy*lens_ipow(lambda, 2) + -0.0240069 *lens_ipow(x, 2)*dx*dy + -5.77957 *x*lens_ipow(dx, 2)*dy + -0.0101131 *x*y*lens_ipow(dx, 2) + -231.084 *lens_ipow(dx, 3)*dy + 0.787701 *x*y*lens_ipow(dy, 4) + -1.40302 *x*dy*lens_ipow(lambda, 4) + 0.00887828 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + -12885.7 *dx*lens_ipow(dy, 7)+0.0f;
const double dx13 =  + 70.1796  + 8.1424 *lambda + 0.000578186 *lens_ipow(y, 2) + -1.2991 *y*dy + -52.0577 *lens_ipow(dx, 2) + -5.55115 *lens_ipow(lambda, 2) + 0.000744536 *lens_ipow(x, 2) + -154.083 *lens_ipow(dy, 2) + -1.88091 *x*dx*lambda + 2.59627 *x*dx*lens_ipow(lambda, 2) + -0.0120035 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -1.92652 *x*lens_ipow(dx, 3) + -57.7709 *lens_ipow(dx, 4) + 3.1508 *x*y*dx*lens_ipow(dy, 3) + -4790.2 *lens_ipow(dy, 6) + -0.51122 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -1.40302 *x*dx*lens_ipow(lambda, 4) + -1.0353 *lens_ipow(y, 2)*lens_ipow(dy, 4) + -148.49 *y*lens_ipow(dy, 5) + 0.0266348 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -45099.8 *lens_ipow(dx, 2)*lens_ipow(dy, 6)+0.0f;
const double dx14 =  + 8.1424 *dy + 0.0847499 *y + -0.115765 *y*lambda + -11.1023 *dy*lambda + -1.88091 *x*dx*dy + 5.19254 *x*dx*dy*lambda + -5.61208 *x*dx*dy*lens_ipow(lambda, 3)+0.0f;
const double dx20 =  + -0.0101037  + 0.0027181 *lambda + -0.000152742 *y*dy + -0.000511815 *x*dx + -0.00187749 *lens_ipow(lambda, 2) + -1.35926e-06 *lens_ipow(y, 2) + -4.00852e-06 *lens_ipow(x, 2) + -0.00886726 *lens_ipow(dy, 2) + -0.0284139 *lens_ipow(dx, 2) + 0.0832356 *lens_ipow(dx, 4) + -1.66623e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -4.81513e-05 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -0.0198241 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -7.67615e-08 *x*lens_ipow(y, 3)*dx*dy + 0.0646751 *lens_ipow(dy, 6) + -0.0196597 *y*lens_ipow(dx, 4)*dy*lambda+0.0f;
const double dx21 =  + -0.0169213 *dx*dy + -0.000152742 *x*dy + -2.71853e-06 *x*y + -0.000182896 *y*dx + -9.63025e-05 *x*y*lens_ipow(dx, 4) + -0.0198241 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.722474 *dx*lens_ipow(dy, 5) + -1.15142e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -0.0224717 *y*dx*lens_ipow(dy, 4) + -0.0196597 *x*lens_ipow(dx, 4)*dy*lambda+0.0f;
const double dx22 =  + 0.457136  + 0.10236 *lambda + -0.0169213 *y*dy + -0.000255908 *lens_ipow(x, 2) + -2.38829 *lens_ipow(dx, 2) + -0.566459 *lens_ipow(dy, 2) + -0.0568279 *x*dx + -9.14481e-05 *lens_ipow(y, 2) + -0.0728502 *lens_ipow(lambda, 2) + 0.332942 *x*lens_ipow(dx, 3) + 25.5245 *lens_ipow(dx, 4) + -1.11082e-05 *lens_ipow(x, 3)*dx + -0.000192605 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + -0.0396482 *x*y*dx*lens_ipow(dy, 3) + -0.722474 *y*lens_ipow(dy, 5) + 191.762 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -3.83808e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.0112359 *lens_ipow(y, 2)*lens_ipow(dy, 4) + 343.863 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda + -0.0786388 *x*y*lens_ipow(dx, 3)*dy*lambda+0.0f;
const double dx23 =  + -0.0169213 *y*dx + -0.000152742 *x*y + -1.13292 *dx*dy + -0.0177345 *x*dy + -0.0594724 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -3.61237 *y*dx*lens_ipow(dy, 4) + 255.683 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -3.83808e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 0.38805 *x*lens_ipow(dy, 5) + -0.0449434 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 137.545 *lens_ipow(dx, 5)*dy*lambda + -0.0196597 *x*y*lens_ipow(dx, 4)*lambda+0.0f;
const double dx24 =  + 0.0027181 *x + 0.10236 *dx + -0.00375499 *x*lambda + -0.1457 *dx*lambda + 68.7727 *lens_ipow(dx, 5)*lens_ipow(dy, 2) + -0.0196597 *x*y*lens_ipow(dx, 4)*dy+0.0f;
const double dx30 =  + -0.0172145 *dx*dy + -0.000150274 *y*dx + -2.62446e-06 *x*y + -0.000187146 *x*dy + -1.04273e-05 *x*y*lens_ipow(dy, 2) + -0.0205986 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.000143475 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -1.86293e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lambda + -0.021115 *y*dx*lens_ipow(dy, 4)*lambda+0.0f;
const double dx31 =  + -0.0101004  + 0.00269999 *lambda + -0.0087605 *lens_ipow(dx, 2) + -0.000509031 *y*dy + -0.0280722 *lens_ipow(dy, 2) + -0.000150274 *x*dx + -0.00186489 *lens_ipow(lambda, 2) + -1.31223e-06 *lens_ipow(x, 2) + -4.02296e-06 *lens_ipow(y, 2) + 0.0791229 *lens_ipow(dy, 4) + -5.21365e-06 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -1.51614e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0205986 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.109555 *lens_ipow(dx, 6)*lambda + -1.24195e-07 *lens_ipow(x, 3)*y*dx*dy*lambda + -0.021115 *x*dx*lens_ipow(dy, 4)*lambda+0.0f;
const double dx32 =  + -0.017521 *y*dx + -0.0172145 *x*dy + -0.000150274 *x*y + -1.09843 *dx*dy + -0.0617959 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 322.111 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.000143475 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 0.65733 *y*lens_ipow(dx, 5)*lambda + -6.20975e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + -0.021115 *x*y*lens_ipow(dy, 4)*lambda + 749.641 *lens_ipow(dx, 7)*dy + 1287.23 *dx*lens_ipow(dy, 7)*lambda+0.0f;
const double dx33 =  + 0.457102  + 0.100435 *lambda + -0.000254516 *lens_ipow(y, 2) + -0.0561445 *y*dy + -0.0172145 *x*dx + -0.549213 *lens_ipow(dx, 2) + -0.0706918 *lens_ipow(lambda, 2) + -9.3573e-05 *lens_ipow(x, 2) + -2.33265 *lens_ipow(dy, 2) + 24.7578 *lens_ipow(dy, 4) + 0.316491 *y*lens_ipow(dy, 3) + -1.04273e-05 *lens_ipow(x, 2)*y*dy + -1.01076e-05 *lens_ipow(y, 3)*dy + -0.0411973 *x*y*lens_ipow(dx, 3)*dy + 241.583 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 4.78251e-05 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -6.20975e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + -0.0844601 *x*y*dx*lens_ipow(dy, 3)*lambda + 93.7051 *lens_ipow(dx, 8) + 4505.3 *lens_ipow(dx, 2)*lens_ipow(dy, 6)*lambda+0.0f;
const double dx34 =  + 0.100435 *dy + 0.00269999 *y + -0.00372978 *y*lambda + -0.141384 *dy*lambda + 0.109555 *y*lens_ipow(dx, 6) + -6.20975e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -0.021115 *x*y*dx*lens_ipow(dy, 4) + 643.614 *lens_ipow(dx, 2)*lens_ipow(dy, 7)+0.0f;
const double dx40 =  + 0.00084461 *dx + 1.59188e-06 *x + -0.107994 *lens_ipow(dx, 3) + -7.63035e-06 *x*y*dy + -3.86157e-06 *lens_ipow(y, 2)*dx + -0.00194638 *x*lens_ipow(dx, 2) + -1.10546e-05 *lens_ipow(x, 2)*dx + -0.109239 *dx*lens_ipow(dy, 2) + -0.00130322 *y*dx*dy + -0.000680529 *x*lens_ipow(dy, 2) + -1.59523e-10 *lens_ipow(x, 3)*lens_ipow(y, 2)+0.0f;
const double dx41 =  + 0.000888966 *dy + 4.35698e-06 *y + -0.109171 *lens_ipow(dy, 3) + -0.00068982 *y*lens_ipow(dx, 2) + -3.81518e-06 *lens_ipow(x, 2)*dy + -7.72313e-06 *x*y*dx + -2.37303e-08 *lens_ipow(y, 3) + -0.109284 *lens_ipow(dx, 2)*dy + -0.00198449 *y*lens_ipow(dy, 2) + -0.00130322 *x*dx*dy + -1.17515e-05 *lens_ipow(y, 2)*dy + -7.97614e-11 *lens_ipow(x, 4)*y+0.0f;
const double dx42 =  + 0.00084461 *x + 0.143259 *dx + -17.4656 *lens_ipow(dx, 3) + -0.00068982 *lens_ipow(y, 2)*dx + -0.323981 *x*lens_ipow(dx, 2) + -17.5616 *dx*lens_ipow(dy, 2) + -3.86157e-06 *x*lens_ipow(y, 2) + -0.00194638 *lens_ipow(x, 2)*dx + -0.218567 *y*dx*dy + -3.68485e-06 *lens_ipow(x, 3) + -0.109239 *x*lens_ipow(dy, 2) + -0.00130322 *x*y*dy+0.0f;
const double dx43 =  + 0.000888966 *y + 0.147139 *dy + -0.327514 *y*lens_ipow(dy, 2) + -17.5616 *lens_ipow(dx, 2)*dy + -3.81518e-06 *lens_ipow(x, 2)*y + -17.6174 *lens_ipow(dy, 3) + -0.109284 *y*lens_ipow(dx, 2) + -0.00198449 *lens_ipow(y, 2)*dy + -0.218478 *x*dx*dy + -0.00130322 *x*y*dx + -0.000680529 *lens_ipow(x, 2)*dy + -3.91717e-06 *lens_ipow(y, 3)+0.0f;
const double dx44 =  + 0.365701  + -1.01483 *lambda + 0.742635 *lens_ipow(lambda, 2)+0.0f;
} break;
