case cooke__speed_panchro__1920__100mm:
{
const double dx00 =  + 0.595713  + 0.0155575 *lambda + 0.0275612 *y*dy + 0.0556822 *x*dx + 0.000172251 *lens_ipow(y, 2) + 0.000403649 *lens_ipow(x, 2) + 0.968201 *lens_ipow(dy, 2) + 0.966248 *lens_ipow(dx, 2) + 0.000157334 *lens_ipow(x, 3)*dx + 4.29761 *lens_ipow(dx, 4) + 0.546154 *x*lens_ipow(dx, 3) + 4.07499e-07 *lens_ipow(x, 4) + 0.0340154 *y*lens_ipow(dy, 3) + 0.015644 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.000936333 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.259283 *y*lens_ipow(dx, 2)*dy*lambda + 0.0101781 *x*y*dx*dy*lambda + 1.75915e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 0.00335443 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.000106712 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + 1.63566 *x*dx*lens_ipow(dy, 4)*lambda + 1.17331e-10 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(dy, 2)+0.0f;
const double dx01 =  + 0.454774 *dx*dy + 0.0275612 *x*dy + 0.000344502 *x*y + 0.0181683 *y*dx + 0.0340154 *x*lens_ipow(dy, 3) + 0.00187267 *x*y*lens_ipow(dy, 2) + 0.259283 *x*lens_ipow(dx, 2)*dy*lambda + 0.00508906 *lens_ipow(x, 2)*dx*dy*lambda + 1.75915e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 0.00670887 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.000106712 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2) + 9.38645e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dy, 2)+0.0f;
const double dx02 =  + 98.9821  + 1.09609 *lambda + 0.454774 *y*dy + 0.0278411 *lens_ipow(x, 2) + -138.589 *lens_ipow(dx, 2) + -37.9112 *lens_ipow(dy, 2) + 1.9325 *x*dx + 0.00908415 *lens_ipow(y, 2) + 3.93335e-05 *lens_ipow(x, 4) + 17.1904 *x*lens_ipow(dx, 3) + 0.819231 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.0104293 *lens_ipow(x, 3)*dx + 0.518566 *x*y*dx*dy*lambda + 0.00508906 *lens_ipow(x, 2)*y*dy*lambda + 0.00670887 *x*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2) + 5.33562e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.817831 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx03 =  + 0.454774 *y*dx + 0.0275612 *x*y + -75.8223 *dx*dy + 1.9364 *x*dy + 0.102046 *x*y*lens_ipow(dy, 2) + 0.00187267 *x*lens_ipow(y, 2)*dy + 0.259283 *x*y*lens_ipow(dx, 2)*lambda + 0.00508906 *lens_ipow(x, 2)*y*dx*lambda + 5.86382e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 3.27132 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)*lambda + 4.69323e-11 *lens_ipow(x, 5)*lens_ipow(y, 4)*dy+0.0f;
const double dx04 =  + 0.0155575 *x + 1.09609 *dx + 0.259283 *x*y*lens_ipow(dx, 2)*dy + 0.00508906 *lens_ipow(x, 2)*y*dx*dy + 0.00670887 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 0.000106712 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lambda + 0.817831 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4)+0.0f;
const double dx10 =  + 0.42872 *dx*dy + 0.0267113 *y*dx + 0.00034782 *x*y + 0.0179426 *x*dy + 3.86044e-05 *x*lens_ipow(y, 2)*dy + 0.00231987 *x*y*lens_ipow(dy, 2) + 2.05724e-05 *lens_ipow(y, 3)*dx*lambda + 0.258023 *y*dx*lens_ipow(dy, 2)*lambda + 0.00552391 *lens_ipow(y, 2)*dx*dy*lambda + 1.88253e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lambda + 1.34684e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx11 =  + 0.594941  + 0.0180041 *lambda + 0.994974 *lens_ipow(dx, 2) + 0.0539385 *y*dy + 0.919729 *lens_ipow(dy, 2) + 0.0267113 *x*dx + 0.00017391 *lens_ipow(x, 2) + 0.000374784 *lens_ipow(y, 2) + -0.687585 *lens_ipow(dx, 4) + 0.000169891 *lens_ipow(y, 3)*dy + 0.581241 *y*lens_ipow(dy, 3) + 4.6995 *lens_ipow(dy, 4) + 5.54005e-07 *lens_ipow(y, 4) + 3.86044e-05 *lens_ipow(x, 2)*y*dy + 0.00115994 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.0166624 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 6.17173e-05 *x*lens_ipow(y, 2)*dx*lambda + 0.258023 *x*dx*lens_ipow(dy, 2)*lambda + 0.0110478 *x*y*dx*dy*lambda + 2.13729 *y*lens_ipow(dx, 4)*dy*lambda + 1.88253e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + 2.02026e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx12 =  + 1.98995 *y*dx + 0.42872 *x*dy + 0.0267113 *x*y + -77.9843 *dx*dy + -2.75034 *y*lens_ipow(dx, 3) + 2.05724e-05 *x*lens_ipow(y, 3)*lambda + 0.258023 *x*y*lens_ipow(dy, 2)*lambda + 0.00552391 *x*lens_ipow(y, 2)*dy*lambda + 4.27457 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy*lambda + 6.27509e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + 1.34684e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lambda+0.0f;
const double dx13 =  + 99.0029  + 1.09371 *lambda + 0.0269692 *lens_ipow(y, 2) + 1.83946 *y*dy + 0.42872 *x*dx + -38.9922 *lens_ipow(dx, 2) + 0.00897131 *lens_ipow(x, 2) + -139.373 *lens_ipow(dy, 2) + 4.24728e-05 *lens_ipow(y, 4) + 0.871861 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 18.798 *y*lens_ipow(dy, 3) + 1.93022e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00231987 *lens_ipow(x, 2)*y*dy + 0.0111083 *lens_ipow(y, 3)*dy + 0.516047 *x*y*dx*dy*lambda + 0.00552391 *x*lens_ipow(y, 2)*dx*lambda + 1.06864 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lambda+0.0f;
const double dx14 =  + 1.09371 *dy + 0.0180041 *y + 2.05724e-05 *x*lens_ipow(y, 3)*dx + 0.258023 *x*y*dx*lens_ipow(dy, 2) + 0.00552391 *x*lens_ipow(y, 2)*dx*dy + 1.06864 *lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + 6.27509e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + 6.73421e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)+0.0f;
const double dx20 =  + -0.0195302  + -0.000553464 *y*dy + -0.000478745 *x*dx + -1.61235e-06 *lens_ipow(y, 2) + -1.47181e-06 *lens_ipow(x, 2) + -0.0260655 *lens_ipow(dy, 2) + -0.00653252 *lens_ipow(dx, 2) + 0.0795359 *lens_ipow(dx, 4) + -3.10503e-05 *x*y*dx*dy + -2.21723e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -1.20913e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00466995 *y*lens_ipow(dy, 5) + 1.40425 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 2.71843 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx21 =  + -0.0329162 *dx*dy + -0.000553464 *x*dy + -3.22471e-06 *x*y + -0.000261954 *y*dx + 0.0993467 *lens_ipow(dx, 3)*dy + -0.00181752 *y*dx*lens_ipow(dy, 2) + 0.000638345 *y*lens_ipow(dx, 3) + -1.55252e-05 *lens_ipow(x, 2)*dx*dy + -2.41826e-05 *x*y*lens_ipow(dy, 2) + 0.0339973 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.00466995 *x*lens_ipow(dy, 5) + 2.22464 *lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx22 =  + -1.5611  + -0.0329162 *y*dy + -0.000239373 *lens_ipow(x, 2) + 1.75654 *lens_ipow(dx, 2) + -1.24965 *lens_ipow(dy, 2) + -0.013065 *x*dx + -0.000130977 *lens_ipow(y, 2) + 0.318144 *x*lens_ipow(dx, 3) + 0.29804 *y*lens_ipow(dx, 2)*dy + 18.9221 *lens_ipow(dx, 4) + -0.000908762 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000957518 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.55252e-05 *lens_ipow(x, 2)*y*dy + -1.47815e-05 *lens_ipow(x, 3)*dx + 0.050996 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 544.841 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 2.80849 *x*dx*lens_ipow(dy, 4) + 6.67393 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 797.546 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda + 10.8737 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 137.644 *lens_ipow(dy, 8)+0.0f;
const double dx23 =  + -0.0329162 *y*dx + -0.000553464 *x*y + -2.49931 *dx*dy + -0.052131 *x*dy + 0.0993467 *y*lens_ipow(dx, 3) + -0.00181752 *lens_ipow(y, 2)*dx*dy + -1.55252e-05 *lens_ipow(x, 2)*y*dx + -2.41826e-05 *x*lens_ipow(y, 2)*dy + 0.0339973 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + 726.455 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -0.0233497 *x*y*lens_ipow(dy, 4) + 5.61699 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 6.67393 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 319.018 *lens_ipow(dx, 5)*dy*lambda + 5.43686 *x*lens_ipow(dx, 4)*dy*lambda + 1101.15 *dx*lens_ipow(dy, 7)+0.0f;
const double dx24 =  + 159.509 *lens_ipow(dx, 5)*lens_ipow(dy, 2) + 2.71843 *x*lens_ipow(dx, 4)*lens_ipow(dy, 2)+0.0f;
const double dx30 =  + 0.0454552 *dx*dy + 1.56747e-06 *x*y + 0.000436176 *x*dy + 0.0789539 *dx*lens_ipow(dy, 3) + 0.000649223 *y*dx*lens_ipow(dy, 2) + 3.47844e-05 *lens_ipow(x, 2)*dx*dy + 0.00418682 *x*lens_ipow(dx, 2)*dy*lambda + 4.67924e-06 *lens_ipow(x, 3)*lens_ipow(dy, 3) + 0.148523 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + 4.91108e-07 *lens_ipow(x, 3)*y*lens_ipow(dy, 4) + 0.0418072 *x*lens_ipow(dy, 7)*lambda + 0.00308372 *lens_ipow(x, 2)*dx*lens_ipow(dy, 5)*lens_ipow(lambda, 2)+0.0f;
const double dx31 =  + -0.0195665  + -0.000333401 *y*dy + -0.00174079 *lens_ipow(dy, 2) + 7.83737e-07 *lens_ipow(x, 2) + -9.6236e-07 *lens_ipow(y, 2) + 0.00716687 *lens_ipow(dx, 4) + -5.96913e-07 *lens_ipow(y, 3)*dy + 0.000649223 *x*dx*lens_ipow(dy, 2) + -0.00406541 *y*lens_ipow(dy, 3) + 0.00084616 *y*lens_ipow(dx, 2)*dy + 0.113038 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -9.20888e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 1.22777e-07 *lens_ipow(x, 4)*lens_ipow(dy, 4)+0.0f;
const double dx32 =  + 0.0454552 *x*dy + 5.14324 *dx*dy + 15.2839 *dx*lens_ipow(dy, 3) + 0.0286675 *y*lens_ipow(dx, 3) + 0.0789539 *x*lens_ipow(dy, 3) + 0.000649223 *x*y*lens_ipow(dy, 2) + 0.00084616 *lens_ipow(y, 2)*dx*dy + 0.226075 *y*dx*lens_ipow(dy, 2) + 1.15948e-05 *lens_ipow(x, 3)*dy + 0.00418682 *lens_ipow(x, 2)*dx*dy*lambda + 13.892 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + 0.445569 *x*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 0.00102791 *lens_ipow(x, 3)*lens_ipow(dy, 5)*lens_ipow(lambda, 2)+0.0f;
const double dx33 =  + -1.56379  + -0.0001667 *lens_ipow(y, 2) + -0.00348158 *y*dy + 0.0454552 *x*dx + 2.57162 *lens_ipow(dx, 2) + 0.000218088 *lens_ipow(x, 2) + 2.01923 *lens_ipow(dy, 2) + 22.9259 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.49228e-07 *lens_ipow(y, 4) + 14.0733 *lens_ipow(dy, 4) + 0.236862 *x*dx*lens_ipow(dy, 2) + 0.00129845 *x*y*dx*dy + -0.00609811 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00042308 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.226075 *y*lens_ipow(dx, 2)*dy + 1.15948e-05 *lens_ipow(x, 3)*dx + -6.13925e-05 *lens_ipow(y, 3)*dy + 0.00209341 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 3.473 *lens_ipow(dx, 4)*lens_ipow(lambda, 2) + 3.50943e-06 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 0.148523 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 4.91108e-07 *lens_ipow(x, 4)*y*lens_ipow(dy, 3) + 0.146325 *lens_ipow(x, 2)*lens_ipow(dy, 6)*lambda + 0.00513954 *lens_ipow(x, 3)*dx*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx34 =  + 0.00209341 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy + 6.94601 *lens_ipow(dx, 4)*dy*lambda + 0.297046 *x*lens_ipow(dx, 3)*dy*lambda + 0.0209036 *lens_ipow(x, 2)*lens_ipow(dy, 7) + 0.00205582 *lens_ipow(x, 3)*dx*lens_ipow(dy, 5)*lambda+0.0f;
const double dx40 =  + 0.00122478 *dx + -0.136936 *lens_ipow(dx, 3) + -3.04323e-05 *x*y*dy + -1.5545e-05 *lens_ipow(y, 2)*dx + -1.90887e-07 *x*lens_ipow(y, 2) + -0.00388194 *x*lens_ipow(dx, 2) + -4.30796e-05 *lens_ipow(x, 2)*dx + -0.14085 *dx*lens_ipow(dy, 2) + -0.0027272 *y*dx*dy + -0.00132676 *x*lens_ipow(dy, 2) + -5.46546e-10 *lens_ipow(x, 5)+0.0f;
const double dx41 =  + 0.00148701 *dy + 1.68098e-05 *y + -0.143301 *lens_ipow(dy, 3) + -0.00138852 *y*lens_ipow(dx, 2) + -1.52161e-05 *lens_ipow(x, 2)*dy + -3.109e-05 *x*y*dx + -1.90887e-07 *lens_ipow(x, 2)*y + -2.06318e-07 *lens_ipow(y, 3) + -0.142554 *lens_ipow(dx, 2)*dy + -0.00414401 *y*lens_ipow(dy, 2) + -0.0027272 *x*dx*dy + -4.73805e-05 *lens_ipow(y, 2)*dy+0.0f;
const double dx42 =  + 0.00122478 *x + 0.144527 *dx + -17.1305 *lens_ipow(dx, 3) + -0.00138852 *lens_ipow(y, 2)*dx + -0.410807 *x*lens_ipow(dx, 2) + -17.4263 *dx*lens_ipow(dy, 2) + -1.5545e-05 *x*lens_ipow(y, 2) + -0.00388194 *lens_ipow(x, 2)*dx + -0.285108 *y*dx*dy + -1.43599e-05 *lens_ipow(x, 3) + -0.14085 *x*lens_ipow(dy, 2) + -0.0027272 *x*y*dy+0.0f;
const double dx43 =  + 0.00148701 *y + 0.160105 *dy + -0.429904 *y*lens_ipow(dy, 2) + -17.4263 *lens_ipow(dx, 2)*dy + -1.52161e-05 *lens_ipow(x, 2)*y + -17.6848 *lens_ipow(dy, 3) + -0.142554 *y*lens_ipow(dx, 2) + -0.00414401 *lens_ipow(y, 2)*dy + -0.281701 *x*dx*dy + -0.0027272 *x*y*dx + -0.00132676 *lens_ipow(x, 2)*dy + -1.57935e-05 *lens_ipow(y, 3)+0.0f;
const double dx44 =  + 0.572903  + -1.58218 *lambda + 1.15369 *lens_ipow(lambda, 2)+0.0f;
} break;
