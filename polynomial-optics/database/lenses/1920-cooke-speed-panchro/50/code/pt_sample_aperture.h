case cooke__speed_panchro__1920__50mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 35.0924 *begin_dx + 0.641858 *begin_x + 0.0891351 *begin_x*begin_lambda + 4.15582 *begin_dx*begin_lambda + -0.35824 *begin_y*begin_dx*begin_dy + -26.3231 *lens_ipow(begin_dx, 3) + -0.0614295 *begin_x*lens_ipow(begin_lambda, 2) + -26.6746 *begin_dx*lens_ipow(begin_dy, 2) + 4.76207e-05 *begin_x*lens_ipow(begin_y, 2) + 3.63493e-05 *lens_ipow(begin_x, 3) + -0.28474 *begin_x*lens_ipow(begin_dy, 2) + -0.695782 *begin_x*lens_ipow(begin_dx, 2) + 0.00176537 *lens_ipow(begin_y, 2)*begin_dx + -2.83826 *begin_dx*lens_ipow(begin_lambda, 2) + -8.30289e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 7.15132e-06 *lens_ipow(begin_x, 4)*begin_dx + -1.09246 *begin_x*lens_ipow(begin_dx, 4) + -1.45601 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + -21.2452 *lens_ipow(begin_dx, 5) + -2.34404e-08 *begin_x*lens_ipow(begin_y, 4) + 0.330499 *begin_x*lens_ipow(begin_dy, 4) + -0.014155 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + -0.828448 *begin_y*begin_dx*lens_ipow(begin_dy, 3) + -0.0184576 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + 0.000573584 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + -19.1225 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + 0.00669948 *begin_x*begin_y*lens_ipow(begin_dy, 3)*begin_lambda + -6.24636e-06 *lens_ipow(begin_x, 3)*begin_y*begin_dy*begin_lambda;
  pred_y =  + 0.641428 *begin_y + 35.117 *begin_dy + 4.20006 *begin_dy*begin_lambda + 0.0917387 *begin_y*begin_lambda + -0.270424 *begin_y*lens_ipow(begin_dx, 2) + -0.718968 *begin_y*lens_ipow(begin_dy, 2) + -0.400704 *begin_x*begin_dx*begin_dy + -26.8992 *lens_ipow(begin_dx, 2)*begin_dy + -0.0635284 *begin_y*lens_ipow(begin_lambda, 2) + 4.13994e-05 *lens_ipow(begin_x, 2)*begin_y + -2.89084 *begin_dy*lens_ipow(begin_lambda, 2) + 3.21081e-05 *lens_ipow(begin_y, 3) + 0.00101614 *lens_ipow(begin_x, 2)*begin_dy + -28.0817 *lens_ipow(begin_dy, 3) + -0.253707 *begin_x*lens_ipow(begin_dx, 3)*begin_dy + 0.12982 *begin_y*lens_ipow(begin_dx, 4) + 6.71005 *lens_ipow(begin_dy, 5) + -4.877e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 0.0149934 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 0.000432234 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy*begin_lambda + 4.85851e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.0343761 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*begin_dy + -0.0805902 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5) + -0.275488 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -10.3718 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + -6.11016 *begin_x*begin_dx*lens_ipow(begin_dy, 5) + -0.0623095 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -8.38267e-10 *lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 2)*begin_lambda;
  pred_dx =  + 0.480776 *begin_dx + -0.0201005 *begin_x + 0.00490948 *begin_x*begin_lambda + 0.0231961 *begin_dx*begin_lambda + -0.0336198 *begin_y*begin_dx*begin_dy + -0.000557552 *begin_x*begin_y*begin_dy + -0.00110235 *lens_ipow(begin_x, 2)*begin_dx + -0.94561 *lens_ipow(begin_dx, 3) + -0.00317427 *begin_x*lens_ipow(begin_lambda, 2) + -0.655169 *begin_dx*lens_ipow(begin_dy, 2) + -9.4866e-06 *begin_x*lens_ipow(begin_y, 2) + -1.09111e-05 *lens_ipow(begin_x, 3) + -0.017576 *begin_x*lens_ipow(begin_dy, 2) + -0.0625906 *begin_x*lens_ipow(begin_dx, 2) + -0.000363331 *lens_ipow(begin_y, 2)*begin_dx + 0.256635 *begin_x*lens_ipow(begin_dx, 4) + 0.00321992 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + 0.0837536 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + 6.31547 *lens_ipow(begin_dx, 5) + 0.184465 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -3.34487e-09 *begin_x*lens_ipow(begin_y, 4) + 1.23635 *begin_dx*lens_ipow(begin_dy, 4) + 5.31128e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + 0.0130631 *begin_x*lens_ipow(begin_dy, 4) + 0.000906453 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + 0.00192544 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + 7.79486 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -4.69885e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_lambda;
  pred_dy =  + -0.0204174 *begin_y + 0.48223 *begin_dy + 0.00611354 *begin_y*begin_lambda + -0.0170055 *begin_y*lens_ipow(begin_dx, 2) + -0.00101493 *lens_ipow(begin_y, 2)*begin_dy + -0.0559086 *begin_y*lens_ipow(begin_dy, 2) + -0.0335223 *begin_x*begin_dx*begin_dy + -0.000558099 *begin_x*begin_y*begin_dx + -0.627251 *lens_ipow(begin_dx, 2)*begin_dy + -0.00424581 *begin_y*lens_ipow(begin_lambda, 2) + -1.04288e-05 *lens_ipow(begin_x, 2)*begin_y + -1.08712e-05 *lens_ipow(begin_y, 3) + -0.000364698 *lens_ipow(begin_x, 2)*begin_dy + -0.697529 *lens_ipow(begin_dy, 3) + 0.0909668 *begin_dy*lens_ipow(begin_lambda, 3) + 7.26876 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 0.0102627 *begin_y*lens_ipow(begin_dx, 4) + 0.080761 *begin_x*begin_dx*lens_ipow(begin_dy, 3) + 0.00187211 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 0.171223 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.000942951 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + 1.10873 *lens_ipow(begin_dx, 4)*begin_dy + -0.124036 *begin_dy*lens_ipow(begin_lambda, 5) + 42.0543 *lens_ipow(begin_dy, 7) + 0.0259302 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 5) + 1.99385 *begin_y*lens_ipow(begin_dy, 6) + 1.79763e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dy + -1.65101e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dy*begin_lambda;
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 35.0924  + 4.15582 *begin_lambda + -0.35824 *begin_y*begin_dy + -78.9693 *lens_ipow(begin_dx, 2) + -26.6746 *lens_ipow(begin_dy, 2) + -1.39156 *begin_x*begin_dx + 0.00176537 *lens_ipow(begin_y, 2) + -2.83826 *lens_ipow(begin_lambda, 2) + 7.15132e-06 *lens_ipow(begin_x, 4) + -4.36983 *begin_x*lens_ipow(begin_dx, 3) + -4.36804 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -106.226 *lens_ipow(begin_dx, 4) + -0.014155 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -0.828448 *begin_y*lens_ipow(begin_dy, 3) + -0.0553727 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + 0.00114717 *lens_ipow(begin_x, 3)*begin_dx + -57.3675 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)+0.0f;
  dx1_domega0(0, 1) =  + -0.35824 *begin_y*begin_dx + -53.3493 *begin_dx*begin_dy + -0.569479 *begin_x*begin_dy + -1.45601 *begin_y*lens_ipow(begin_dx, 3) + 1.322 *begin_x*lens_ipow(begin_dy, 3) + -0.02831 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + -2.48534 *begin_y*begin_dx*lens_ipow(begin_dy, 2) + -38.245 *lens_ipow(begin_dx, 3)*begin_dy + 0.0200984 *begin_x*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + -6.24636e-06 *lens_ipow(begin_x, 3)*begin_y*begin_lambda+0.0f;
  dx1_domega0(1, 0) =  + -0.540848 *begin_y*begin_dx + -0.400704 *begin_x*begin_dy + -53.7985 *begin_dx*begin_dy + -0.76112 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + 0.519282 *begin_y*lens_ipow(begin_dx, 3) + 0.0149934 *begin_x*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 0.000432234 *begin_x*lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 4.85851e-05 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dy, 2) + -0.137504 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy + -0.550975 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 3) + -31.1154 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -6.11016 *begin_x*lens_ipow(begin_dy, 5) + -0.124619 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + -1.67653e-09 *lens_ipow(begin_y, 7)*begin_dx*begin_lambda+0.0f;
  dx1_domega0(1, 1) =  + 35.117  + 4.20006 *begin_lambda + -1.43794 *begin_y*begin_dy + -0.400704 *begin_x*begin_dx + -26.8992 *lens_ipow(begin_dx, 2) + -2.89084 *lens_ipow(begin_lambda, 2) + 0.00101614 *lens_ipow(begin_x, 2) + -84.2452 *lens_ipow(begin_dy, 2) + -0.253707 *begin_x*lens_ipow(begin_dx, 3) + 33.5503 *lens_ipow(begin_dy, 4) + 0.0299867 *begin_x*begin_y*begin_dx*begin_dy*begin_lambda + 0.000432234 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 9.71703e-05 *lens_ipow(begin_x, 3)*begin_y*begin_dx*begin_dy + -0.0343761 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -0.402951 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + -0.826463 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -31.1154 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -30.5508 *begin_x*begin_dx*lens_ipow(begin_dy, 4) + -0.186928 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
