case cooke__speed_panchro__1920__50mm:
{
const double dx00 =  + 0.641858  + 0.0891351 *lambda + -0.0614295 *lens_ipow(lambda, 2) + 4.76207e-05 *lens_ipow(y, 2) + 0.000109048 *lens_ipow(x, 2) + -0.28474 *lens_ipow(dy, 2) + -0.695782 *lens_ipow(dx, 2) + -2.49087e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.86053e-05 *lens_ipow(x, 3)*dx + -1.09246 *lens_ipow(dx, 4) + -2.34404e-08 *lens_ipow(y, 4) + 0.330499 *lens_ipow(dy, 4) + 0.00172075 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00669948 *y*lens_ipow(dy, 3)*lambda + -1.87391e-05 *lens_ipow(x, 2)*y*dy*lambda+0.0f;
const double dx01 =  + -0.35824 *dx*dy + 9.52413e-05 *x*y + 0.00353073 *y*dx + -1.66058e-07 *lens_ipow(x, 3)*y + -1.45601 *lens_ipow(dx, 3)*dy + -9.37615e-08 *x*lens_ipow(y, 3) + -0.02831 *y*dx*lens_ipow(dy, 2) + -0.828448 *dx*lens_ipow(dy, 3) + -0.0369151 *y*lens_ipow(dx, 3) + 0.00669948 *x*lens_ipow(dy, 3)*lambda + -6.24636e-06 *lens_ipow(x, 3)*dy*lambda+0.0f;
const double dx02 =  + 35.0924  + 4.15582 *lambda + -0.35824 *y*dy + -78.9693 *lens_ipow(dx, 2) + -26.6746 *lens_ipow(dy, 2) + -1.39156 *x*dx + 0.00176537 *lens_ipow(y, 2) + -2.83826 *lens_ipow(lambda, 2) + 7.15132e-06 *lens_ipow(x, 4) + -4.36983 *x*lens_ipow(dx, 3) + -4.36804 *y*lens_ipow(dx, 2)*dy + -106.226 *lens_ipow(dx, 4) + -0.014155 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.828448 *y*lens_ipow(dy, 3) + -0.0553727 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00114717 *lens_ipow(x, 3)*dx + -57.3675 *lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx03 =  + -0.35824 *y*dx + -53.3493 *dx*dy + -0.569479 *x*dy + -1.45601 *y*lens_ipow(dx, 3) + 1.322 *x*lens_ipow(dy, 3) + -0.02831 *lens_ipow(y, 2)*dx*dy + -2.48534 *y*dx*lens_ipow(dy, 2) + -38.245 *lens_ipow(dx, 3)*dy + 0.0200984 *x*y*lens_ipow(dy, 2)*lambda + -6.24636e-06 *lens_ipow(x, 3)*y*lambda+0.0f;
const double dx04 =  + 0.0891351 *x + 4.15582 *dx + -0.122859 *x*lambda + -5.67652 *dx*lambda + 0.00669948 *x*y*lens_ipow(dy, 3) + -6.24636e-06 *lens_ipow(x, 3)*y*dy+0.0f;
const double dx10 =  + -0.400704 *dx*dy + 8.27987e-05 *x*y + 0.00203228 *x*dy + -0.253707 *lens_ipow(dx, 3)*dy + -9.75399e-08 *x*lens_ipow(y, 3) + 0.0149934 *y*dx*lens_ipow(dy, 2)*lambda + 0.000432234 *lens_ipow(y, 2)*dx*dy*lambda + 0.000145755 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -0.16118 *x*lens_ipow(dy, 5) + -0.550975 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -10.3718 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -6.11016 *dx*lens_ipow(dy, 5)+0.0f;
const double dx11 =  + 0.641428  + 0.0917387 *lambda + -0.270424 *lens_ipow(dx, 2) + -0.718968 *lens_ipow(dy, 2) + -0.0635284 *lens_ipow(lambda, 2) + 4.13994e-05 *lens_ipow(x, 2) + 9.63243e-05 *lens_ipow(y, 2) + 0.12982 *lens_ipow(dx, 4) + -1.4631e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0149934 *x*dx*lens_ipow(dy, 2)*lambda + 0.000864467 *x*y*dx*dy*lambda + 4.85851e-05 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + -0.0687521 *y*lens_ipow(dx, 4)*dy + -0.124619 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -5.86787e-09 *lens_ipow(y, 6)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx12 =  + -0.540848 *y*dx + -0.400704 *x*dy + -53.7985 *dx*dy + -0.76112 *x*lens_ipow(dx, 2)*dy + 0.519282 *y*lens_ipow(dx, 3) + 0.0149934 *x*y*lens_ipow(dy, 2)*lambda + 0.000432234 *x*lens_ipow(y, 2)*dy*lambda + 4.85851e-05 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + -0.137504 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + -0.550975 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3) + -31.1154 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -6.11016 *x*lens_ipow(dy, 5) + -0.124619 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + -1.67653e-09 *lens_ipow(y, 7)*dx*lambda+0.0f;
const double dx13 =  + 35.117  + 4.20006 *lambda + -1.43794 *y*dy + -0.400704 *x*dx + -26.8992 *lens_ipow(dx, 2) + -2.89084 *lens_ipow(lambda, 2) + 0.00101614 *lens_ipow(x, 2) + -84.2452 *lens_ipow(dy, 2) + -0.253707 *x*lens_ipow(dx, 3) + 33.5503 *lens_ipow(dy, 4) + 0.0299867 *x*y*dx*dy*lambda + 0.000432234 *x*lens_ipow(y, 2)*dx*lambda + 9.71703e-05 *lens_ipow(x, 3)*y*dx*dy + -0.0343761 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -0.402951 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -0.826463 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -31.1154 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -30.5508 *x*dx*lens_ipow(dy, 4) + -0.186928 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx14 =  + 4.20006 *dy + 0.0917387 *y + -0.127057 *y*lambda + -5.78169 *dy*lambda + 0.0149934 *x*y*dx*lens_ipow(dy, 2) + 0.000432234 *x*lens_ipow(y, 2)*dx*dy + -8.38267e-10 *lens_ipow(y, 7)*lens_ipow(dx, 2)+0.0f;
const double dx20 =  + -0.0201005  + 0.00490948 *lambda + -0.000557552 *y*dy + -0.0022047 *x*dx + -0.00317427 *lens_ipow(lambda, 2) + -9.4866e-06 *lens_ipow(y, 2) + -3.27332e-05 *lens_ipow(x, 2) + -0.017576 *lens_ipow(dy, 2) + -0.0625906 *lens_ipow(dx, 2) + 0.256635 *lens_ipow(dx, 4) + 0.00643984 *x*lens_ipow(dx, 3) + 0.184465 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -3.34487e-09 *lens_ipow(y, 4) + 1.06226e-06 *x*lens_ipow(y, 2)*dx + 0.0130631 *lens_ipow(dy, 4) + 0.00385087 *x*dx*lens_ipow(dy, 2) + -9.3977e-07 *x*lens_ipow(y, 2)*dx*lambda+0.0f;
const double dx21 =  + -0.0336198 *dx*dy + -0.000557552 *x*dy + -1.89732e-05 *x*y + -0.000726662 *y*dx + 0.0837536 *lens_ipow(dx, 3)*dy + -1.33795e-08 *x*lens_ipow(y, 3) + 1.06226e-06 *lens_ipow(x, 2)*y*dx + 0.00181291 *y*lens_ipow(dx, 3) + -9.3977e-07 *lens_ipow(x, 2)*y*dx*lambda+0.0f;
const double dx22 =  + 0.480776  + 0.0231961 *lambda + -0.0336198 *y*dy + -0.00110235 *lens_ipow(x, 2) + -2.83683 *lens_ipow(dx, 2) + -0.655169 *lens_ipow(dy, 2) + -0.125181 *x*dx + -0.000363331 *lens_ipow(y, 2) + 1.02654 *x*lens_ipow(dx, 3) + 0.00965976 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.251261 *y*lens_ipow(dx, 2)*dy + 31.5773 *lens_ipow(dx, 4) + 0.36893 *x*dx*lens_ipow(dy, 2) + 1.23635 *lens_ipow(dy, 4) + 5.31128e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00271936 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00192544 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 23.3846 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -4.69885e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda+0.0f;
const double dx23 =  + -0.0336198 *y*dx + -0.000557552 *x*y + -1.31034 *dx*dy + -0.035152 *x*dy + 0.0837536 *y*lens_ipow(dx, 3) + 0.36893 *x*lens_ipow(dx, 2)*dy + 4.94539 *dx*lens_ipow(dy, 3) + 0.0522524 *x*lens_ipow(dy, 3) + 0.00385087 *lens_ipow(x, 2)*dx*dy + 15.5897 *lens_ipow(dx, 3)*dy+0.0f;
const double dx24 =  + 0.00490948 *x + 0.0231961 *dx + -0.00634854 *x*lambda + -4.69885e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx+0.0f;
const double dx30 =  + -0.0335223 *dx*dy + -0.000558099 *y*dx + -2.08576e-05 *x*y + -0.000729396 *x*dy + 0.080761 *dx*lens_ipow(dy, 3) + 0.0018859 *x*lens_ipow(dy, 3) + 7.19053e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -6.60405e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda+0.0f;
const double dx31 =  + -0.0204174  + 0.00611354 *lambda + -0.0170055 *lens_ipow(dx, 2) + -0.00202986 *y*dy + -0.0559086 *lens_ipow(dy, 2) + -0.000558099 *x*dx + -0.00424581 *lens_ipow(lambda, 2) + -1.04288e-05 *lens_ipow(x, 2) + -3.26135e-05 *lens_ipow(y, 2) + 0.0102627 *lens_ipow(dx, 4) + 0.00374422 *y*lens_ipow(dx, 2)*dy + 0.171223 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0518604 *y*lens_ipow(dy, 5) + 1.99385 *lens_ipow(dy, 6) + 3.59526e-09 *lens_ipow(x, 4)*y*dy + -3.30203e-09 *lens_ipow(x, 4)*y*dy*lambda+0.0f;
const double dx32 =  + -0.034011 *y*dx + -0.0335223 *x*dy + -0.000558099 *x*y + -1.2545 *dx*dy + 14.5375 *dx*lens_ipow(dy, 3) + 0.0410509 *y*lens_ipow(dx, 3) + 0.080761 *x*lens_ipow(dy, 3) + 0.00374422 *lens_ipow(y, 2)*dx*dy + 0.342446 *y*dx*lens_ipow(dy, 2) + 4.43493 *lens_ipow(dx, 3)*dy+0.0f;
const double dx33 =  + 0.48223  + -0.00101493 *lens_ipow(y, 2) + -0.111817 *y*dy + -0.0335223 *x*dx + -0.627251 *lens_ipow(dx, 2) + -0.000364698 *lens_ipow(x, 2) + -2.09259 *lens_ipow(dy, 2) + 0.0909668 *lens_ipow(lambda, 3) + 21.8063 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.242283 *x*dx*lens_ipow(dy, 2) + 0.00187211 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.342446 *y*lens_ipow(dx, 2)*dy + 0.00282885 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.10873 *lens_ipow(dx, 4) + -0.124036 *lens_ipow(lambda, 5) + 294.38 *lens_ipow(dy, 6) + 0.129651 *lens_ipow(y, 2)*lens_ipow(dy, 4) + 11.9631 *y*lens_ipow(dy, 5) + 1.79763e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + -1.65101e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda+0.0f;
const double dx34 =  + 0.00611354 *y + -0.00849162 *y*lambda + 0.2729 *dy*lens_ipow(lambda, 2) + -0.62018 *dy*lens_ipow(lambda, 4) + -1.65101e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy+0.0f;
const double dx40 =  + -0.000522311 *dx + -8.25666e-05 *x*y*dy + -4.04123e-05 *lens_ipow(y, 2)*dx + -5.72557e-07 *x*lens_ipow(y, 2) + -0.239511 *dx*lens_ipow(dy, 2) + -0.00600034 *y*dx*dy + -0.00339087 *x*lens_ipow(dy, 2) + -1.72958e-05 *lens_ipow(x, 4)*lens_ipow(dx, 3) + -7.49876 *x*lens_ipow(dx, 6) + -0.00346588 *lens_ipow(x, 3)*lens_ipow(dx, 4) + -0.245311 *lens_ipow(x, 2)*lens_ipow(dx, 5) + -87.3148 *lens_ipow(dx, 7) + 10.6128 *lens_ipow(dx, 9)+0.0f;
const double dx41 =  + -0.00321938 *y*lens_ipow(dx, 2) + -4.12833e-05 *lens_ipow(x, 2)*dy + -8.08246e-05 *x*y*dx + -5.72557e-07 *lens_ipow(x, 2)*y + -0.234626 *lens_ipow(dx, 2)*dy + -0.00600034 *x*dx*dy + -7.96155e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.00705699 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -3.39594e-07 *lens_ipow(y, 4)*dy + -0.283468 *y*lens_ipow(dy, 4) + -4.38105 *lens_ipow(dy, 5)+0.0f;
const double dx42 =  + -0.000522311 *x + -0.0542407 *dx + -0.00321938 *lens_ipow(y, 2)*dx + -18.3838 *dx*lens_ipow(dy, 2) + -4.04123e-05 *x*lens_ipow(y, 2) + -0.469253 *y*dx*dy + -0.239511 *x*lens_ipow(dy, 2) + -0.00600034 *x*y*dy + -1.03775e-05 *lens_ipow(x, 5)*lens_ipow(dx, 2) + -22.4963 *lens_ipow(x, 2)*lens_ipow(dx, 5) + -0.00346588 *lens_ipow(x, 4)*lens_ipow(dx, 3) + -0.408852 *lens_ipow(x, 3)*lens_ipow(dx, 4) + -611.204 *x*lens_ipow(dx, 6) + -6956.62 *lens_ipow(dx, 7) + 4345.11 *lens_ipow(dx, 9) + 95.5153 *x*lens_ipow(dx, 8)+0.0f;
const double dx43 =  + -18.3838 *lens_ipow(dx, 2)*dy + -4.12833e-05 *lens_ipow(x, 2)*y + -0.234626 *y*lens_ipow(dx, 2) + -0.479022 *x*dx*dy + -0.00600034 *x*y*dx + -0.00339087 *lens_ipow(x, 2)*dy + -3.98077e-05 *lens_ipow(y, 4)*dy + -0.00705699 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -6.79188e-08 *lens_ipow(y, 5) + -335.664 *lens_ipow(dy, 5) + -0.566936 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -21.9052 *y*lens_ipow(dy, 4)+0.0f;
const double dx44 =  + 0.144959  + -0.198592 *lambda+0.0f;
} break;
