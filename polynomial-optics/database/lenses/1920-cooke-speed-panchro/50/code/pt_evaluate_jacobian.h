case cooke__speed_panchro__1920__50mm:
{
const double dx00 =  + 0.584894  + 0.0251879 *lambda + 0.0600612 *y*dy + 0.166447 *x*dx + 0.000715225 *lens_ipow(y, 2) + 0.00216572 *lens_ipow(x, 2) + 1.06016 *lens_ipow(dy, 2) + 2.10209 *lens_ipow(dx, 2) + -1.42025e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00133233 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.00064404 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00203783 *x*y*dx*dy*lambda + 0.00293701 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -1.75531 *x*lens_ipow(dx, 3)*lambda + -32.7738 *lens_ipow(dx, 4)*lambda + -0.0226706 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 4.52876e-05 *lens_ipow(y, 3)*dy*lambda + -1.8332 *lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx01 =  + 0.638997 *dx*dy + 0.0600612 *x*dy + 0.00143045 *x*y + 0.0378298 *y*dx + -9.46832e-07 *lens_ipow(x, 3)*y + 0.00128808 *x*y*lens_ipow(dx, 2) + 0.00101892 *lens_ipow(x, 2)*dx*dy*lambda + 0.00587402 *x*y*lens_ipow(dy, 2)*lambda + 0.000135863 *x*lens_ipow(y, 2)*dy*lambda+0.0f;
const double dx02 =  + 49.3667  + 0.638997 *y*dy + 0.0832236 *lens_ipow(x, 2) + -22.1901 *lens_ipow(dx, 2) + -17.9301 *lens_ipow(dy, 2) + 4.20418 *x*dx + 0.0189149 *lens_ipow(y, 2) + 0.605873 *lens_ipow(lambda, 2) + 0.00128808 *x*lens_ipow(y, 2)*dx + 248.863 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00101892 *lens_ipow(x, 2)*y*dy*lambda + -1882.42 *lens_ipow(dx, 4)*lambda + -2.63296 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -131.095 *x*lens_ipow(dx, 3)*lambda + -0.0151137 *lens_ipow(x, 3)*dx*lambda + 520.899 *lens_ipow(dy, 6)*lambda + -2457.74 *lens_ipow(dy, 8)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + 0.638997 *y*dx + 0.0600612 *x*y + -35.8603 *dx*dy + 2.12031 *x*dy + 0.000888223 *lens_ipow(x, 3)*dy + 165.909 *lens_ipow(dx, 3)*dy + 0.00101892 *lens_ipow(x, 2)*y*dx*lambda + 0.00587402 *x*lens_ipow(y, 2)*dy*lambda + 4.52876e-05 *x*lens_ipow(y, 3)*lambda + -7.3328 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 3125.39 *dx*lens_ipow(dy, 5)*lambda + -19661.9 *dx*lens_ipow(dy, 7)*lens_ipow(lambda, 2)+0.0f;
const double dx04 =  + 0.0251879 *x + 1.21175 *dx*lambda + 0.00101892 *lens_ipow(x, 2)*y*dx*dy + 0.00293701 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -376.485 *lens_ipow(dx, 5) + -0.877654 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -32.7738 *x*lens_ipow(dx, 4) + -0.00755687 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 4.52876e-05 *x*lens_ipow(y, 3)*dy + -3.6664 *x*lens_ipow(dy, 4)*lambda + 520.899 *dx*lens_ipow(dy, 6) + -4915.48 *dx*lens_ipow(dy, 8)*lambda+0.0f;
const double dx10 =  + 0.615946 *dx*dy + 0.058987 *y*dx + 0.00141847 *x*y + 0.0381812 *x*dy + 0.00353254 *x*y*lens_ipow(dx, 2) + -6.13629e-07 *x*lens_ipow(y, 3) + 8.2257e-05 *lens_ipow(x, 2)*y*dx + -0.0353741 *x*lens_ipow(dy, 3) + 2.79646e-05 *lens_ipow(y, 3)*dx*lambda + 0.00209685 *lens_ipow(y, 2)*dx*dy*lambda+0.0f;
const double dx11 =  + 0.583209  + 0.0277126 *lambda + 1.03381 *lens_ipow(dx, 2) + 0.168783 *y*dy + 2.15725 *lens_ipow(dy, 2) + 0.058987 *x*dx + 0.000709236 *lens_ipow(x, 2) + 0.00218332 *lens_ipow(y, 2) + -0.622113 *lens_ipow(dx, 4) + 0.00176627 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -9.20444e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.7419e-05 *lens_ipow(x, 3)*dx + 0.00189073 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0225508 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 8.38938e-05 *x*lens_ipow(y, 2)*dx*lambda + -32.2363 *lens_ipow(dy, 4)*lambda + 0.00419371 *x*y*dx*dy*lambda + -1.74084 *y*lens_ipow(dy, 3)*lambda+0.0f;
const double dx12 =  + 2.06761 *y*dx + 0.615946 *x*dy + 0.058987 *x*y + -40.3512 *dx*dy + 197.812 *dx*lens_ipow(dy, 3) + -2.48845 *y*lens_ipow(dx, 3) + 0.00353254 *lens_ipow(x, 2)*y*dx + 2.7419e-05 *lens_ipow(x, 3)*y + 0.00126049 *lens_ipow(y, 3)*dx + 141.301 *lens_ipow(dx, 3)*dy + 2.79646e-05 *x*lens_ipow(y, 3)*lambda + 0.00209685 *x*lens_ipow(y, 2)*dy*lambda+0.0f;
const double dx13 =  + 49.3034  + 0.0843913 *lens_ipow(y, 2) + 4.31449 *y*dy + 0.615946 *x*dx + -20.1756 *lens_ipow(dx, 2) + 0.759262 *lens_ipow(lambda, 2) + 0.0190906 *lens_ipow(x, 2) + -20.0993 *lens_ipow(dy, 2) + 296.718 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.0530611 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 35.3253 *lens_ipow(dx, 4) + -0.0150338 *lens_ipow(y, 3)*dy*lambda + -128.945 *y*lens_ipow(dy, 3)*lambda + 0.00209685 *x*lens_ipow(y, 2)*dx*lambda + -2.61126 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -1816.54 *lens_ipow(dy, 4)*lambda+0.0f;
const double dx14 =  + 0.0277126 *y + 1.51852 *dy*lambda + -0.00751692 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 2.79646e-05 *x*lens_ipow(y, 3)*dx + -32.2363 *y*lens_ipow(dy, 4) + 0.00209685 *x*lens_ipow(y, 2)*dx*dy + -0.87042 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -363.309 *lens_ipow(dy, 5)+0.0f;
const double dx20 =  + -0.0390003  + -0.00221196 *y*dy + -0.00198862 *x*dx + -1.4765e-05 *lens_ipow(y, 2) + -1.07931e-05 *lens_ipow(x, 2) + -0.0566225 *lens_ipow(dy, 2) + -0.0167901 *lens_ipow(dx, 2) + -2.66404e-06 *lens_ipow(x, 2)*lambda + 4.2525e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00656052 *y*lens_ipow(dx, 2)*dy + 0.190499 *lens_ipow(dx, 4) + 0.00467641 *x*lens_ipow(dx, 3) + 0.106264 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -4.34232e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 9.48294e-09 *lens_ipow(y, 4) + 0.0554922 *lens_ipow(dy, 4) + -0.000235211 *x*y*dx*dy + -4.70249e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2)+0.0f;
const double dx21 =  + -0.0652355 *dx*dy + -0.00221196 *x*dy + -2.95301e-05 *x*y + -0.00112047 *y*dx + 2.835e-08 *lens_ipow(x, 3)*y + -0.00656052 *x*lens_ipow(dx, 2)*dy + 1.22844e-06 *lens_ipow(y, 3)*dx + -8.68464e-05 *x*y*lens_ipow(dx, 2) + 3.79318e-08 *x*lens_ipow(y, 3) + 0.153021 *dx*lens_ipow(dy, 3) + -0.000117605 *lens_ipow(x, 2)*dx*dy + -9.40498e-05 *x*y*lens_ipow(dy, 2)+0.0f;
const double dx22 =  + -1.55849  + -0.0652355 *y*dy + -0.00099431 *lens_ipow(x, 2) + 1.5849 *lens_ipow(dx, 2) + -1.48443 *lens_ipow(dy, 2) + -0.0335801 *x*dx + -0.000560235 *lens_ipow(y, 2) + -0.013121 *x*y*dx*dy + 0.761998 *x*lens_ipow(dx, 3) + 0.00701461 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 3.07109e-07 *lens_ipow(y, 4) + 19.1875 *lens_ipow(dx, 4) + 0.212528 *x*dx*lens_ipow(dy, 2) + -8.68464e-05 *x*lens_ipow(y, 2)*dx + 5.3455 *lens_ipow(dy, 4) + 0.153021 *y*lens_ipow(dy, 3) + -0.000117605 *lens_ipow(x, 2)*y*dy + 16.51 *lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx23 =  + -0.0652355 *y*dx + -0.00221196 *x*y + -2.96885 *dx*dy + -0.113245 *x*dy + -0.00656052 *x*y*lens_ipow(dx, 2) + 0.212528 *x*lens_ipow(dx, 2)*dy + 21.382 *dx*lens_ipow(dy, 3) + 0.221969 *x*lens_ipow(dy, 3) + 0.459063 *y*dx*lens_ipow(dy, 2) + -0.000117605 *lens_ipow(x, 2)*y*dx + -9.40498e-05 *x*lens_ipow(y, 2)*dy + 11.0066 *lens_ipow(dx, 3)*dy+0.0f;
const double dx24 =  + -8.88015e-07 *lens_ipow(x, 3)+0.0f;
const double dx30 =  + 0.0968314 *dx*dy + 1.11779e-05 *x*y + 0.00175991 *x*dy + -2.97583e-05 *lens_ipow(y, 2)*dx*dy + -0.0021495 *y*dx*lens_ipow(dy, 2) + 7.98149e-09 *x*lens_ipow(y, 3) + 0.000886541 *x*lens_ipow(dy, 3) + 2.80828e-05 *lens_ipow(x, 3)*lens_ipow(dy, 3) + 0.00261275 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3) + 0.0498836 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.000839165 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 1.7519e-07 *lens_ipow(x, 3)*y*lens_ipow(dy, 2)*lambda+0.0f;
const double dx31 =  + -0.039023  + -0.000129443 *lambda + 0.00167438 *lens_ipow(dx, 2) + -0.00174506 *y*dy + -0.0119092 *lens_ipow(dy, 2) + 5.58896e-06 *lens_ipow(x, 2) + -1.0836e-05 *lens_ipow(y, 2) + -5.95166e-05 *x*y*dx*dy + -0.0021495 *x*dx*lens_ipow(dy, 2) + 0.00635754 *y*lens_ipow(dy, 3) + 1.19722e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.245484 *lens_ipow(dy, 4) + 1.17199e-08 *lens_ipow(y, 4) + -3.18516e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.000419582 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.729649 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda + 4.37975e-08 *lens_ipow(x, 4)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx32 =  + 0.00334876 *y*dx + 0.0968314 *x*dy + 5.52915 *dx*dy + -2.97583e-05 *x*lens_ipow(y, 2)*dy + 1.95722 *dx*lens_ipow(dy, 3) + -0.0021495 *x*y*lens_ipow(dy, 2) + -2.12344e-05 *lens_ipow(y, 3)*dx*lambda + 0.000870917 *lens_ipow(x, 3)*lens_ipow(dy, 3) + 0.0498836 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3) + -0.000839165 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2)*lambda + 2.9186 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx33 =  + -1.56279  + -0.000872531 *lens_ipow(y, 2) + -0.0238184 *y*dy + 0.0968314 *x*dx + 2.76457 *lens_ipow(dx, 2) + 0.000879955 *lens_ipow(x, 2) + 1.69384 *lens_ipow(dy, 2) + -2.97583e-05 *x*lens_ipow(y, 2)*dx + 2.93583 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 24.5794 *lens_ipow(dy, 4) + -0.00429899 *x*y*dx*dy + 0.0095363 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.981936 *y*lens_ipow(dy, 3) + 0.00132981 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 2.10621e-05 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 0.00261275 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + 0.0748254 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000839165 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lambda + 1.4593 *y*lens_ipow(dx, 4)*dy*lambda + 8.7595e-08 *lens_ipow(x, 4)*y*dy*lambda+0.0f;
const double dx34 =  + -0.000129443 *y + -1.06172e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.000419582 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.729649 *y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 4.37975e-08 *lens_ipow(x, 4)*y*lens_ipow(dy, 2)+0.0f;
const double dx40 =  + -0.250915 *lens_ipow(dx, 3) + -0.00019041 *x*y*dy + -4.58732e-05 *lens_ipow(y, 2)*dx + -2.24219e-06 *x*lens_ipow(y, 2) + -0.0145093 *x*lens_ipow(dx, 2) + -0.000314397 *lens_ipow(x, 2)*dx + -0.0869756 *dx*lens_ipow(dy, 2) + -2.42606e-06 *lens_ipow(x, 3) + -0.00392193 *y*dx*dy + -0.00438256 *x*lens_ipow(dy, 2) + -0.253352 *dx*lens_ipow(dy, 2)*lambda + -9.19001e-05 *lens_ipow(y, 2)*dx*lambda + -0.00882851 *y*dx*dy*lambda + 0.00422637 *dx*lens_ipow(lambda, 4)+0.0f;
const double dx41 =  + -0.228118 *lens_ipow(dy, 3) + -9.52048e-05 *lens_ipow(x, 2)*dy + -9.17464e-05 *x*y*dx + -2.24219e-06 *lens_ipow(x, 2)*y + -2.41275e-06 *lens_ipow(y, 3) + -0.0135033 *y*lens_ipow(dy, 2) + -0.00392193 *x*dx*dy + -0.000300805 *lens_ipow(y, 2)*dy + -0.0001838 *x*y*dx*lambda + -0.00882851 *x*dx*dy*lambda + -0.00819757 *y*lens_ipow(dx, 2)*lambda + -0.416998 *lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx42 =  + -15.2155 *lens_ipow(dx, 3) + -0.752745 *x*lens_ipow(dx, 2) + -4.58732e-05 *x*lens_ipow(y, 2) + -0.0145093 *lens_ipow(x, 2)*dx + -0.000104799 *lens_ipow(x, 3) + -0.0869756 *x*lens_ipow(dy, 2) + -0.00392193 *x*y*dy + -0.253352 *x*lens_ipow(dy, 2)*lambda + -9.19001e-05 *x*lens_ipow(y, 2)*lambda + -0.00882851 *x*y*dy*lambda + -0.00819757 *lens_ipow(y, 2)*dx*lambda + -0.833996 *y*dx*dy*lambda + -25.0846 *dx*lens_ipow(dy, 2)*lambda + 0.381604 *dx*lens_ipow(lambda, 4) + 0.00422637 *x*lens_ipow(lambda, 4)+0.0f;
const double dx43 =  + -0.684355 *y*lens_ipow(dy, 2) + -9.52048e-05 *lens_ipow(x, 2)*y + -13.6318 *lens_ipow(dy, 3) + -0.0135033 *lens_ipow(y, 2)*dy + -0.173951 *x*dx*dy + -0.00392193 *x*y*dx + -0.00438256 *lens_ipow(x, 2)*dy + -0.000100268 *lens_ipow(y, 3) + -0.506705 *x*dx*dy*lambda + -0.00882851 *x*y*dx*lambda + -0.416998 *y*lens_ipow(dx, 2)*lambda + -25.0846 *lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx44 =  + 0.58713  + -1.62935 *lambda + 1.19255 *lens_ipow(lambda, 2) + -0.253352 *x*dx*lens_ipow(dy, 2) + -9.19001e-05 *x*lens_ipow(y, 2)*dx + -0.00882851 *x*y*dx*dy + -0.00409879 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.416998 *y*lens_ipow(dx, 2)*dy + -12.5423 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.763208 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 0.0169055 *x*dx*lens_ipow(lambda, 3)+0.0f;
} break;
