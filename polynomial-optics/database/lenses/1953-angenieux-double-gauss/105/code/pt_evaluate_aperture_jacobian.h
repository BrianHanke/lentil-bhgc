case angenieux__double_gauss__1953__105mm:
{
const double dx00 =  + 0.156651  + 0.258755 *lambda + -0.000280249 *lens_ipow(x, 2) + -0.207774 *lens_ipow(dx, 2) + -0.172519 *lens_ipow(dy, 2) + -0.176972 *lens_ipow(lambda, 2) + -9.4603e-05 *lens_ipow(y, 2) + 0.00423333 *x*dx*lambda + 0.271262 *lens_ipow(dx, 4) + 0.52875 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.265624 *lens_ipow(dy, 4) + 0.0126243 *y*lens_ipow(dx, 2)*dy + -0.0183613 *x*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx01 =  + -0.0342282 *dx*dy + -0.000189206 *x*y + 0.00209219 *y*dx + -0.00929525 *y*lens_ipow(dx, 3) + 0.0126243 *x*lens_ipow(dx, 2)*dy+0.0f;
const double dx02 =  + 56.3087  + 14.0751 *lambda + -9.73039 *lens_ipow(lambda, 2) + -0.415548 *x*dx + -0.0342282 *y*dy + -104.922 *lens_ipow(dx, 2) + -34.8129 *lens_ipow(dy, 2) + 0.0010461 *lens_ipow(y, 2) + 0.00211667 *lens_ipow(x, 2)*lambda + 1.08505 *x*lens_ipow(dx, 3) + 15.1711 *lens_ipow(dy, 4) + -0.0139429 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.0575 *x*dx*lens_ipow(dy, 2) + 78.1835 *lens_ipow(dx, 4) + 0.0252486 *x*y*dx*dy + 93.0595 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00918067 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx03 =  + -0.0342282 *y*dx + -0.345039 *x*dy + -69.6257 *dx*dy + 60.6846 *dx*lens_ipow(dy, 3) + 1.0575 *x*lens_ipow(dx, 2)*dy + 1.0625 *x*lens_ipow(dy, 3) + 0.0126243 *x*y*lens_ipow(dx, 2) + 62.0396 *lens_ipow(dx, 3)*dy + -0.0183613 *lens_ipow(x, 2)*dx*dy*lambda+0.0f;
const double dx04 =  + 0.258755 *x + 14.0751 *dx + -19.4608 *dx*lambda + -0.353945 *x*lambda + 0.00211667 *lens_ipow(x, 2)*dx + -0.00918067 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)+0.0f;
const double dx10 =  + -0.0345475 *dx*dy + 0.00208514 *x*dy + -0.000188954 *x*y + -0.00928505 *x*lens_ipow(dy, 3) + 0.012571 *y*dx*lens_ipow(dy, 2)+0.0f;
const double dx11 =  + 0.156422  + 0.259668 *lambda + -0.17783 *lens_ipow(lambda, 2) + -0.17361 *lens_ipow(dx, 2) + -0.206411 *lens_ipow(dy, 2) + -0.000280225 *lens_ipow(y, 2) + -9.44768e-05 *lens_ipow(x, 2) + 0.0042189 *y*dy*lambda + 0.266563 *lens_ipow(dy, 4) + 0.527253 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.012571 *x*dx*lens_ipow(dy, 2) + 0.269931 *lens_ipow(dx, 4) + -0.0178208 *y*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx12 =  + -0.347219 *y*dx + -0.0345475 *x*dy + -69.5374 *dx*dy + 61.0956 *dx*lens_ipow(dy, 3) + 60.0889 *lens_ipow(dx, 3)*dy + 1.05451 *y*dx*lens_ipow(dy, 2) + 0.012571 *x*y*lens_ipow(dy, 2) + 1.07972 *y*lens_ipow(dx, 3) + -0.0178208 *lens_ipow(y, 2)*dx*dy*lambda+0.0f;
const double dx13 =  + 56.3115  + 14.0711 *lambda + -104.977 *lens_ipow(dy, 2) + -0.412823 *y*dy + -9.72667 *lens_ipow(lambda, 2) + -0.0345475 *x*dx + -34.7687 *lens_ipow(dx, 2) + 0.00104257 *lens_ipow(x, 2) + 0.00210945 *lens_ipow(y, 2)*lambda + 78.6515 *lens_ipow(dy, 4) + 91.6434 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.06625 *y*lens_ipow(dy, 3) + -0.0139276 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 15.0222 *lens_ipow(dx, 4) + 1.05451 *y*lens_ipow(dx, 2)*dy + 0.0251419 *x*y*dx*dy + -0.00891039 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx14 =  + 14.0711 *dy + 0.259668 *y + -0.35566 *y*lambda + -19.4533 *dy*lambda + 0.00210945 *lens_ipow(y, 2)*dy + -0.00891039 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy+0.0f;
const double dx20 =  + -0.0167231  + 0.00605479 *lambda + -7.81929e-06 *lens_ipow(x, 2) + -0.0140089 *lens_ipow(dx, 2) + -0.00545788 *lens_ipow(dy, 2) + -0.00422298 *lens_ipow(lambda, 2) + 0.000105218 *x*dx + -3.25927e-06 *lens_ipow(y, 2) + 5.17145e-05 *y*dy + 1.18659e-06 *lens_ipow(y, 2)*lambda + 0.00369565 *lens_ipow(dy, 4) + 1.18855e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 0.00127774 *y*lens_ipow(dx, 4)*dy + 1.14544e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -5.45602e-05 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -1.67753e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)+0.0f;
const double dx21 =  + -0.00918629 *dx*dy + -6.51853e-06 *x*y + 5.17145e-05 *x*dy + 2.37319e-06 *x*y*lambda + 5.94275e-10 *lens_ipow(x, 4)*y*dx + 0.00127774 *x*lens_ipow(dx, 4)*dy + -0.0635998 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 1.14544e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -2.2367e-10 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2) + 0.0143938 *y*dx*lens_ipow(dy, 6)*lambda+0.0f;
const double dx22 =  + 0.399399  + -0.0280178 *x*dx + -0.00918629 *y*dy + -1.54757 *lens_ipow(dx, 2) + -0.502928 *lens_ipow(dy, 2) + 5.26091e-05 *lens_ipow(x, 2) + 2.97138e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.00511094 *x*y*lens_ipow(dx, 3)*dy + -0.190799 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -7.27469e-05 *lens_ipow(x, 3)*lens_ipow(dx, 3) + 5.05576 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 4.4621 *lens_ipow(dx, 6)*lambda + -1.11835e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + 0.0071969 *lens_ipow(y, 2)*lens_ipow(dy, 6)*lambda+0.0f;
const double dx23 =  + -0.00918629 *y*dx + -0.0109158 *x*dy + -1.00586 *dx*dy + 5.17145e-05 *x*y + 0.0147826 *x*lens_ipow(dy, 3) + 0.00127774 *x*y*lens_ipow(dx, 4) + -0.190799 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 3.81812e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 2.0223 *lens_ipow(dx, 5)*dy + 0.0431814 *lens_ipow(y, 2)*dx*lens_ipow(dy, 5)*lambda+0.0f;
const double dx24 =  + 0.00605479 *x + -0.00844596 *x*lambda + 1.18659e-06 *x*lens_ipow(y, 2) + 0.637442 *lens_ipow(dx, 7) + 0.0071969 *lens_ipow(y, 2)*dx*lens_ipow(dy, 6)+0.0f;
const double dx30 =  + -0.0093055 *dx*dy + 4.97569e-05 *y*dx + -4.83605e-06 *x*y + -9.43629e-09 *x*lens_ipow(y, 3) + 0.000182971 *y*dx*lens_ipow(dy, 2) + 1.34417e-08 *x*lens_ipow(y, 3)*lambda + -3.78171e-08 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + 1.08204e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 6.48788e-10 *x*lens_ipow(y, 4)*dy + 0.00828226 *x*lens_ipow(dx, 6)*dy + -0.815668 *lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx31 =  + -0.0167441  + 0.00602849 *lambda + -0.00418466 *lens_ipow(lambda, 2) + -0.00551434 *lens_ipow(dx, 2) + -0.0136625 *lens_ipow(dy, 2) + -7.41996e-06 *lens_ipow(y, 2) + 0.000104149 *y*dy + 4.97569e-05 *x*dx + -2.41802e-06 *lens_ipow(x, 2) + -1.41544e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.000182971 *x*dx*lens_ipow(dy, 2) + 0.00396357 *lens_ipow(dx, 4) + 2.01626e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -9.45428e-09 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 1.08204e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -5.44998e-08 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 1.29758e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.0329447 *lens_ipow(dy, 6)*lambda+0.0f;
const double dx32 =  + -0.0110287 *y*dx + -0.0093055 *x*dy + 4.97569e-05 *x*y + -0.984746 *dx*dy + 0.000182971 *x*y*lens_ipow(dy, 2) + 0.0158543 *y*lens_ipow(dx, 3) + 3.6068e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.0248468 *lens_ipow(x, 2)*lens_ipow(dx, 5)*dy + -2.447 *x*lens_ipow(dx, 2)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx33 =  + 0.397923  + -1.4829 *lens_ipow(dy, 2) + -0.0273249 *y*dy + -0.0093055 *x*dx + 5.20743e-05 *lens_ipow(y, 2) + -0.492373 *lens_ipow(dx, 2) + 0.000365941 *x*y*dx*dy + -1.89086e-08 *lens_ipow(x, 4)*y*dy + -2.17999e-08 *lens_ipow(y, 5)*dy + 3.24394e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + -0.197668 *y*lens_ipow(dy, 5)*lambda + 0.00414113 *lens_ipow(x, 2)*lens_ipow(dx, 6) + -4.07834 *x*lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx34 =  + 0.00602849 *y + -0.00836932 *y*lambda + 6.72087e-09 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.0329447 *y*lens_ipow(dy, 6) + -0.815668 *x*lens_ipow(dx, 3)*lens_ipow(dy, 5)+0.0f;
const double dx40 =  + -6.55211e-11 *x*lens_ipow(y, 4) + -2.82641e-07 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -2.32639e-07 *lens_ipow(x, 2)*y*dx*dy + 0.00705807 *lens_ipow(dx, 5) + 0.0199881 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -1.29069e-07 *lens_ipow(x, 3)*lens_ipow(dy, 2) + 0.0335437 *dx*lens_ipow(dy, 6) + -2.70051e-06 *x*lens_ipow(y, 2)*lens_ipow(dy, 6)+0.0f;
const double dx41 =  + 0.00100488 *lens_ipow(dx, 2)*dy + -2.51515e-05 *y*lens_ipow(dy, 2) + -0.000136939 *y*lens_ipow(dx, 4) + -1.31042e-10 *lens_ipow(x, 2)*lens_ipow(y, 3) + -7.75463e-08 *lens_ipow(x, 3)*dx*dy + 0.00719647 *lens_ipow(dy, 5) + 0.100127 *lens_ipow(dx, 4)*lens_ipow(dy, 3) + -2.70051e-06 *lens_ipow(x, 2)*y*lens_ipow(dy, 6) + 0.000657254 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 5)+0.0f;
const double dx42 =  + 0.00200977 *y*dx*dy + -0.72143 *lens_ipow(dx, 3) + -2.88614 *dx*lens_ipow(dy, 2)*lambda + -0.000273879 *lens_ipow(y, 2)*lens_ipow(dx, 3) + 2.29054 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.4132e-07 *lens_ipow(x, 4)*dx + -7.75463e-08 *lens_ipow(x, 3)*y*dy + 0.0352904 *x*lens_ipow(dx, 4) + 0.0599644 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.28971 *lens_ipow(dx, 5)*lambda + 0.400509 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.0335437 *x*lens_ipow(dy, 6) + 0.00043817 *lens_ipow(y, 3)*dx*lens_ipow(dy, 5)+0.0f;
const double dx43 =  + 0.00100488 *y*lens_ipow(dx, 2) + -0.736212 *lens_ipow(dy, 3) + -2.51515e-05 *lens_ipow(y, 2)*dy + -2.88614 *lens_ipow(dx, 2)*dy*lambda + 2.29054 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -7.75463e-08 *lens_ipow(x, 3)*y*dx + 0.0399763 *x*lens_ipow(dx, 3)*dy + -6.45345e-08 *lens_ipow(x, 4)*dy + 0.0359824 *y*lens_ipow(dy, 4) + -1.18503 *lens_ipow(dy, 5)*lambda + 0.300382 *y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.201262 *x*dx*lens_ipow(dy, 5) + -8.10152e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 5) + 0.00109542 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 4)+0.0f;
const double dx44 =  + 0.602235  + -1.65956 *lambda + 1.207 *lens_ipow(lambda, 2) + -1.44307 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.29054 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.214952 *lens_ipow(dx, 6) + -0.197505 *lens_ipow(dy, 6)+0.0f;
} break;
