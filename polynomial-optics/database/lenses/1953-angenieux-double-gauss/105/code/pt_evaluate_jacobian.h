case angenieux__double_gauss__1953__105mm:
{
const double dx00 =  + -0.604711  + 0.559077 *lambda + -0.000623532 *lens_ipow(x, 2) + 0.16019 *lens_ipow(dx, 2) + 0.247335 *lens_ipow(dy, 2) + -0.37374 *lens_ipow(lambda, 2) + 0.0100278 *x*dx + -0.000221945 *lens_ipow(y, 2) + 0.00392862 *y*dy + 2.34375 *lens_ipow(dx, 4) + 0.0989676 *x*lens_ipow(dx, 3) + 2.07909 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0581811 *y*lens_ipow(dx, 2)*dy + 0.187934 *x*dx*lens_ipow(dy, 4)+0.0f;
const double dx01 =  + -0.000443889 *x*y + 0.00392862 *x*dy + 0.00678719 *y*dx + 0.0581811 *x*lens_ipow(dx, 2)*dy + 1.41756 *dx*lens_ipow(dy, 3) + 1.66507 *lens_ipow(dx, 3)*dy + 0.307312 *y*dx*lens_ipow(dy, 4)+0.0f;
const double dx02 =  + 104.283  + 1.88591 *lambda + 0.320379 *x*dx + -164.593 *lens_ipow(dx, 2) + -45.5852 *lens_ipow(dy, 2) + 0.0050139 *lens_ipow(x, 2) + 0.0033936 *lens_ipow(y, 2) + 9.37499 *x*lens_ipow(dx, 3) + 0.148451 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 4.15817 *x*dx*lens_ipow(dy, 2) + 264.604 *lens_ipow(dx, 4) + 0.116362 *x*y*dx*dy + 1.41756 *y*lens_ipow(dy, 3) + 237.306 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 4.99522 *y*lens_ipow(dx, 2)*dy + 0.0939669 *lens_ipow(x, 2)*lens_ipow(dy, 4) + 0.153656 *lens_ipow(y, 2)*lens_ipow(dy, 4)+0.0f;
const double dx03 =  + 0.494671 *x*dy + -91.1704 *dx*dy + 0.00392862 *x*y + 4.15817 *x*lens_ipow(dx, 2)*dy + 0.0581811 *x*y*lens_ipow(dx, 2) + 4.25268 *y*dx*lens_ipow(dy, 2) + 158.204 *lens_ipow(dx, 3)*dy + 1.66507 *y*lens_ipow(dx, 3) + 0.375868 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3) + 0.614625 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3)+0.0f;
const double dx04 =  + 0.559077 *x + 1.88591 *dx + -0.747479 *x*lambda+0.0f;
const double dx10 =  + 0.145654 *dx*dy + 0.0038186 *y*dx + 0.00723857 *x*dy + -0.00044544 *x*y + 0.0513 *y*dx*lens_ipow(dy, 2) + 1.81754 *dx*lens_ipow(dy, 3)*lambda+0.0f;
const double dx11 =  + -0.497303  + 0.155185 *lambda + -0.000633458 *lens_ipow(y, 2) + 0.0038186 *x*dx + -0.00022272 *lens_ipow(x, 2) + 0.696317 *lens_ipow(dy, 2)*lambda + 0.0310611 *y*dy*lambda + 2.7353 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.0513 *x*dx*lens_ipow(dy, 2) + -1.27958 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -3.39268 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 4.21531 *lens_ipow(dy, 4)*lambda + 3.53326 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.314905 *y*lens_ipow(dy, 5) + 0.348802 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.000255063 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 5)+0.0f;
const double dx12 =  + 0.145654 *x*dy + 0.0038186 *x*y + -85.4586 *dx*dy + 5.4706 *y*dx*lens_ipow(lambda, 2) + 0.0513 *x*y*lens_ipow(dy, 2) + 163.297 *dx*lens_ipow(dy, 3)*lambda + -6.78536 *y*dx*lens_ipow(lambda, 3) + 1.81754 *x*lens_ipow(dy, 3)*lambda + 7.06652 *y*dx*lens_ipow(dy, 2)*lambda + 0.348802 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3)+0.0f;
const double dx13 =  + 104.94  + -146.248 *lens_ipow(dy, 2) + 0.145654 *x*dx + -42.7293 *lens_ipow(dx, 2) + 0.00361929 *lens_ipow(x, 2) + 1.39263 *y*dy*lambda + 0.0155305 *lens_ipow(y, 2)*lambda + 0.1026 *x*y*dx*dy + 244.946 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -2.55915 *y*dy*lens_ipow(lambda, 3) + 299.184 *lens_ipow(dy, 4)*lambda + 16.8613 *y*lens_ipow(dy, 3)*lambda + 5.45263 *x*dx*lens_ipow(dy, 2)*lambda + 7.06652 *y*lens_ipow(dx, 2)*dy*lambda + 0.787263 *lens_ipow(y, 2)*lens_ipow(dy, 4) + 0.523202 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -6.37658e-05 *lens_ipow(y, 4)*lens_ipow(lambda, 5)+0.0f;
const double dx14 =  + 0.155185 *y + 0.696317 *y*lens_ipow(dy, 2) + 0.0155305 *lens_ipow(y, 2)*dy + 5.4706 *y*lens_ipow(dx, 2)*lambda + 81.6487 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -3.83873 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 59.8369 *lens_ipow(dy, 5) + -10.178 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 4.21531 *y*lens_ipow(dy, 4) + 1.81754 *x*dx*lens_ipow(dy, 3) + 3.53326 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000318829 *lens_ipow(y, 4)*dy*lens_ipow(lambda, 4)+0.0f;
const double dx20 =  + -0.00604072  + -0.00323115 *lambda + 4.49808e-06 *lens_ipow(x, 2) + -0.00080346 *lens_ipow(dy, 2) + 0.00224468 *lens_ipow(lambda, 2) + 1.51276e-06 *lens_ipow(y, 2) + -1.81245e-05 *y*dy + -4.38782e-07 *lens_ipow(x, 3)*dx + 9.4105e-06 *x*y*dx*dy + 1.27499e-06 *lens_ipow(x, 3)*lens_ipow(dx, 3) + 2.3458e-06 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + -0.00413131 *lens_ipow(dy, 6) + -0.0142793 *lens_ipow(dx, 6) + 0.00212068 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 0.00189804 *y*lens_ipow(dx, 6)*dy+0.0f;
const double dx21 =  + 3.02552e-06 *x*y + -1.81245e-05 *x*dy + 4.70525e-06 *lens_ipow(x, 2)*dx*dy + 0.000113352 *y*lens_ipow(dx, 3) + 0.000204134 *y*dx*lens_ipow(dy, 2)*lambda + 0.00212068 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 0.00189804 *x*lens_ipow(dx, 6)*dy+0.0f;
const double dx22 =  + -0.61395  + 0.00989609 *lambda + 0.896581 *lens_ipow(dx, 2) + 0.59259 *lens_ipow(dy, 2)*lambda + -1.09696e-07 *lens_ipow(x, 4) + 4.70525e-06 *lens_ipow(x, 2)*y*dy + 0.000170027 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.1722 *lens_ipow(dx, 4) + -0.398634 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.540235 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.000102067 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 9.56241e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2) + 5.86451e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -0.0856757 *x*lens_ipow(dx, 5) + 0.00424136 *x*y*dx*lens_ipow(dy, 3)*lambda + 0.0113883 *x*y*lens_ipow(dx, 5)*dy+0.0f;
const double dx23 =  + -0.00160692 *x*dy + -1.81245e-05 *x*y + 1.18518 *dx*dy*lambda + 4.70525e-06 *lens_ipow(x, 2)*y*dx + -0.265756 *lens_ipow(dx, 3)*dy + -1.08047 *dx*dy*lens_ipow(lambda, 2) + 0.000204134 *lens_ipow(y, 2)*dx*dy*lambda + 1.1729e-06 *lens_ipow(x, 4)*dx*dy + -0.0247879 *x*lens_ipow(dy, 5) + 0.00636204 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.00189804 *x*y*lens_ipow(dx, 6)+0.0f;
const double dx24 =  + -0.00323115 *x + 0.00989609 *dx + 0.00448937 *x*lambda + 0.59259 *dx*lens_ipow(dy, 2) + -1.08047 *dx*lens_ipow(dy, 2)*lambda + 0.000102067 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.00212068 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const double dx30 =  + 0.00178603 *dx*dy + -1.95075e-05 *y*dx + 3.03613e-06 *x*y + 2.7209e-06 *lens_ipow(y, 2)*dx*dy + -0.0648816 *dx*lens_ipow(dy, 7) + -0.319272 *lens_ipow(dx, 5)*lens_ipow(dy, 3)+0.0f;
const double dx31 =  + -0.00598486  + -0.00338063 *lambda + 0.0023877 *lens_ipow(lambda, 2) + -0.00166545 *lens_ipow(dx, 2) + 4.19061e-06 *lens_ipow(y, 2) + -6.38512e-05 *y*dy + -1.95075e-05 *x*dx + 1.51807e-06 *lens_ipow(x, 2) + 0.000272345 *y*lens_ipow(dy, 3) + 5.4418e-06 *x*y*dx*dy + 0.000262798 *y*lens_ipow(dx, 2)*dy + -0.00538212 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.0143226 *lens_ipow(dy, 6) + 3.20856e-08 *lens_ipow(y, 4)*lens_ipow(dy, 2)+0.0f;
const double dx32 =  + -0.0033309 *y*dx + 0.00178603 *x*dy + -1.95075e-05 *x*y + 0.836898 *dx*dy + -1.2199 *dx*lens_ipow(dy, 3) + 2.7209e-06 *x*lens_ipow(y, 2)*dy + 0.000262798 *lens_ipow(y, 2)*dx*dy + -1.41589 *lens_ipow(dx, 3)*dy + -0.0107642 *y*dx*lens_ipow(dy, 2) + -0.0648816 *x*lens_ipow(dy, 7) + -1.59636 *x*lens_ipow(dx, 4)*lens_ipow(dy, 3)+0.0f;
const double dx33 =  + -0.614899  + 0.0101927 *lambda + 0.928575 *lens_ipow(dy, 2) + 0.00178603 *x*dx + -3.19256e-05 *lens_ipow(y, 2) + 0.418449 *lens_ipow(dx, 2) + -1.28521 *lens_ipow(dy, 4) + 0.000408517 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.82985 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.7209e-06 *x*lens_ipow(y, 2)*dx + 0.000131399 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.353973 *lens_ipow(dx, 4) + -0.0107642 *y*lens_ipow(dx, 2)*dy + -0.0859354 *y*lens_ipow(dy, 5) + 1.28342e-08 *lens_ipow(y, 5)*dy + -0.454171 *x*dx*lens_ipow(dy, 6) + -0.957815 *x*lens_ipow(dx, 5)*lens_ipow(dy, 2)+0.0f;
const double dx34 =  + 0.0101927 *dy + -0.00338063 *y + 0.0047754 *y*lambda+0.0f;
const double dx40 =  + -3.04106e-06 *x + -0.00476124 *lens_ipow(dx, 3) + -0.000133897 *y*dx*dy + -0.000107366 *x*lens_ipow(dx, 2) + -0.00425522 *dx*lens_ipow(dy, 2) + -0.000594435 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000509014 *x*lens_ipow(dx, 4) + -0.00041484 *x*lens_ipow(dy, 4)*lambda + -5.85865e-06 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 4)+0.0f;
const double dx41 =  + -0.00410241 *lens_ipow(dx, 2)*dy + -6.68982e-05 *y*lens_ipow(dx, 2) + -0.000133897 *x*dx*dy + -0.00464841 *lens_ipow(dy, 3) + -0.000179962 *y*lens_ipow(dy, 2) + -4.43488e-06 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 3) + -0.00225754 *y*lens_ipow(dy, 6)*lambda+0.0f;
const double dx42 =  + -0.00820481 *y*dx*dy + -6.68982e-05 *lens_ipow(y, 2)*dx + -0.0142837 *x*lens_ipow(dx, 2) + -0.000133897 *x*y*dy + -0.000107366 *lens_ipow(x, 2)*dx + -0.00425522 *x*lens_ipow(dy, 2) + -0.853491 *lens_ipow(dx, 3) + -2.99023 *dx*lens_ipow(dy, 2)*lambda + 2.15849 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000594435 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + -0.00101803 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -1.6512 *lens_ipow(dx, 5)*lens_ipow(lambda, 2) + -1.95288e-06 *lens_ipow(x, 3)*lens_ipow(lambda, 4)+0.0f;
const double dx43 =  + -0.00410241 *y*lens_ipow(dx, 2) + -0.921209 *lens_ipow(dy, 3) + -0.000133897 *x*y*dx + -0.0139452 *y*lens_ipow(dy, 2) + -0.00851045 *x*dx*dy + -0.000179962 *lens_ipow(y, 2)*dy + -2.99023 *lens_ipow(dx, 2)*dy*lambda + 2.15849 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.000594435 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy + -0.00082968 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda + -1.47829e-06 *lens_ipow(y, 3)*lens_ipow(lambda, 3) + -0.00677263 *lens_ipow(y, 2)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx44 =  + 0.852347  + -2.33445 *lambda + 1.69189 *lens_ipow(lambda, 2) + -1.49512 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.15849 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.00020742 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -4.43488e-06 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + -0.550401 *lens_ipow(dx, 6)*lambda + -7.81153e-06 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 3) + -0.00112877 *lens_ipow(y, 2)*lens_ipow(dy, 6)+0.0f;
} break;
