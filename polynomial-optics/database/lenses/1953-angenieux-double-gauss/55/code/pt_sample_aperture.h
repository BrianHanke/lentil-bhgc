case angenieux__double_gauss__1953__55mm:
{
double pred_x;
double pred_y;
double pred_dx;
double pred_dy;
double sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const double begin_x = x + dist * dx;
  const double begin_y = y + dist * dy;
  const double begin_dx = dx;
  const double begin_dy = dy;
  const double begin_lambda = lambda;
  pred_x =  + 29.4774 *begin_dx + 0.14702 *begin_x + 7.87139 *begin_dx*begin_lambda + 0.301716 *begin_x*begin_lambda + -5.41471 *begin_dx*lens_ipow(begin_lambda, 2) + -17.845 *begin_dx*lens_ipow(begin_dy, 2) + -18.916 *lens_ipow(begin_dx, 3) + -0.0561546 *begin_y*begin_dx*begin_dy + -0.229086 *begin_x*lens_ipow(begin_lambda, 2) + -0.183146 *begin_x*lens_ipow(begin_dy, 2) + -0.154014 *begin_x*lens_ipow(begin_dx, 2) + -0.000407052 *begin_x*lens_ipow(begin_y, 2) + -0.000338815 *lens_ipow(begin_x, 3) + 0.000158721 *begin_x*lens_ipow(begin_y, 2)*begin_lambda + 0.000143296 *lens_ipow(begin_x, 3)*begin_lambda + 7.9572 *lens_ipow(begin_dx, 5) + 0.00943712 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.310323 *begin_x*lens_ipow(begin_dy, 4) + 1.32903e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + -0.000653465 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + -6.20766e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -4.27622e-07 *lens_ipow(begin_x, 5) + 96.6675 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4) + -1.1569e-09 *begin_x*lens_ipow(begin_y, 6) + 0.00414441 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.000248029 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.000470957 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -2.79013e-14 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 4);
  pred_y =  + 29.4941 *begin_dy + 0.140128 *begin_y + 7.82692 *begin_dy*begin_lambda + 0.31309 *begin_y*begin_lambda + -5.41156 *begin_dy*lens_ipow(begin_lambda, 2) + -18.8396 *lens_ipow(begin_dy, 3) + -17.5345 *lens_ipow(begin_dx, 2)*begin_dy + -0.227417 *begin_y*lens_ipow(begin_lambda, 2) + -0.155115 *begin_y*lens_ipow(begin_dy, 2) + -0.177034 *begin_y*lens_ipow(begin_dx, 2) + -0.000262016 *lens_ipow(begin_y, 3) + -0.0726213 *begin_x*begin_dx*begin_dy + -0.000327494 *lens_ipow(begin_x, 2)*begin_y + 7.71128 *lens_ipow(begin_dy, 5) + 0.293607 *begin_y*lens_ipow(begin_dx, 4) + -0.000618379 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -5.87604e-07 *lens_ipow(begin_y, 5) + -1.27411e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 2.92093e-07 *lens_ipow(begin_y, 5)*begin_lambda + 3.13774e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 1.34776e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_lambda + 89.2451 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3) + 0.00423388 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.000194334 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + -9.67036e-10 *lens_ipow(begin_x, 6)*begin_y + 2.39857e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*begin_dx + -0.000934985 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 5)*begin_lambda + -2.86913e-14 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 7);
  pred_dx =  + 0.397942 *begin_dx + -0.0330279 *begin_x + 0.0151832 *begin_x*begin_lambda + -0.490673 *begin_dx*lens_ipow(begin_dy, 2) + -0.496076 *lens_ipow(begin_dx, 3) + -0.0193917 *begin_y*begin_dx*begin_dy + -0.0113032 *begin_x*lens_ipow(begin_lambda, 2) + -0.0106743 *begin_x*lens_ipow(begin_dy, 2) + -0.0262698 *begin_x*lens_ipow(begin_dx, 2) + 0.000242782 *begin_x*begin_y*begin_dy + -1.49866e-05 *begin_x*lens_ipow(begin_y, 2) + 0.000185859 *lens_ipow(begin_x, 2)*begin_dx + -1.59688e-05 *lens_ipow(begin_x, 3) + 0.0094537 *begin_x*lens_ipow(begin_dy, 4) + -4.28564e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -1.4238e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + 4.93642e-07 *lens_ipow(begin_x, 4)*begin_dx + 2.04578e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_lambda + -7.73197e-08 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + -8.62153e-11 *begin_x*lens_ipow(begin_y, 6) + 9.07481e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dy + -5.88618e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 2) + -1.64354e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 2) + -1.18141e-10 *lens_ipow(begin_x, 7) + 1.23647e-10 *lens_ipow(begin_x, 7)*begin_lambda + 5.78205e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dx + -5.88847e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + 0.027114 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 9);
  pred_dy =  + 0.398126 *begin_dy + -0.0329188 *begin_y + 0.0147762 *begin_y*begin_lambda + -0.497887 *lens_ipow(begin_dy, 3) + -0.489855 *lens_ipow(begin_dx, 2)*begin_dy + -0.0109325 *begin_y*lens_ipow(begin_lambda, 2) + -0.0262122 *begin_y*lens_ipow(begin_dy, 2) + -0.0106269 *begin_y*lens_ipow(begin_dx, 2) + 0.000176368 *lens_ipow(begin_y, 2)*begin_dy + -1.60384e-05 *lens_ipow(begin_y, 3) + -0.0194033 *begin_x*begin_dx*begin_dy + 0.000238993 *begin_x*begin_y*begin_dx + -1.50075e-05 *lens_ipow(begin_x, 2)*begin_y + 0.00925815 *begin_y*lens_ipow(begin_dx, 4) + 5.61848e-07 *lens_ipow(begin_y, 4)*begin_dy + -4.37391e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + -1.42314e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 2.0487e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_lambda + -1.54178e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + -5.95838e-08 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + -1.17188e-10 *lens_ipow(begin_y, 7) + 9.35839e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx + -7.66865e-08 *lens_ipow(begin_x, 5)*begin_dx*begin_dy + -8.53164e-11 *lens_ipow(begin_x, 6)*begin_y + 1.23856e-10 *lens_ipow(begin_y, 7)*begin_lambda + 0.00714047 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 7) + 5.65339e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dy + -5.94392e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*lens_ipow(begin_lambda, 3);
  Eigen::Matrix2d dx1_domega0;
  dx1_domega0(0, 0) =  + 29.4774  + 7.87139 *begin_lambda + -5.41471 *lens_ipow(begin_lambda, 2) + -17.845 *lens_ipow(begin_dy, 2) + -56.748 *lens_ipow(begin_dx, 2) + -0.0561546 *begin_y*begin_dy + -0.308028 *begin_x*begin_dx + 39.786 *lens_ipow(begin_dx, 4) + 0.00943712 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 1.32903e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -0.00130693 *lens_ipow(begin_x, 3)*begin_dx + 290.003 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 0.00828881 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 2) + 0.000496058 *lens_ipow(begin_x, 3)*begin_y*begin_dx*begin_dy + -0.00235478 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)+0.0f;
  dx1_domega0(0, 1) =  + -35.6899 *begin_dx*begin_dy + -0.0561546 *begin_y*begin_dx + -0.366292 *begin_x*begin_dy + 0.0188742 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 1.24129 *begin_x*lens_ipow(begin_dy, 3) + 386.67 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + 0.00828881 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*begin_dy + 0.000248029 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2)+0.0f;
  dx1_domega0(1, 0) =  + -35.069 *begin_dx*begin_dy + -0.354067 *begin_y*begin_dx + -0.0726213 *begin_x*begin_dy + 1.17443 *begin_y*lens_ipow(begin_dx, 3) + 356.98 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + 0.00846777 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + 0.000194334 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 2.39857e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)+0.0f;
  dx1_domega0(1, 1) =  + 29.4941  + 7.82692 *begin_lambda + -5.41156 *lens_ipow(begin_lambda, 2) + -56.5189 *lens_ipow(begin_dy, 2) + -17.5345 *lens_ipow(begin_dx, 2) + -0.310231 *begin_y*begin_dy + -0.0726213 *begin_x*begin_dx + 38.5564 *lens_ipow(begin_dy, 4) + -0.00123676 *lens_ipow(begin_y, 3)*begin_dy + 3.13774e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_lambda + 267.735 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + 0.00846777 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + 0.000388668 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -0.00467492 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4)*begin_lambda+0.0f;
  Eigen::Matrix2d invJ;
  const double invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const Eigen::Vector2d dx1(out_x - pred_x, out_y - pred_y);
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1(i);
    dy += invJ(1, i)*dx1(i);
  }
  sqr_err = dx1(0)*dx1(0) + dx1(1)*dx1(1);
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;
