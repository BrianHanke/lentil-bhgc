// this file is manually fixed up
// removed k<100 condition
// removed sqr_err > sqr_prev_err check
// jacobian from fisheye lens (from lenses.js)

case angenieux__double_gauss__1953__55mm:
{
//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
Eigen::Vector3d view(
  scene_x,
  scene_y,
  scene_z + lens_outer_pupil_curvature_radius
);
raytrace_normalise(view);
int error = 0;
if(1 || view(2) >= lens_field_of_view)
{
  const double eps = 1e-8;
  double sqr_err = 1e30, sqr_ap_err = 1e30;
  double prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<300&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const double begin_x = x;
    const double begin_y = y;
    const double begin_dx = dx;
    const double begin_dy = dy;
    const double begin_lambda = lambda;
    const Eigen::Vector2d pred_ap(
       + 29.4774 *begin_dx + 0.14702 *begin_x + 7.87139 *begin_dx*begin_lambda + 0.301716 *begin_x*begin_lambda + -5.41471 *begin_dx*lens_ipow(begin_lambda, 2) + -17.845 *begin_dx*lens_ipow(begin_dy, 2) + -18.916 *lens_ipow(begin_dx, 3) + -0.0561546 *begin_y*begin_dx*begin_dy + -0.229086 *begin_x*lens_ipow(begin_lambda, 2) + -0.183146 *begin_x*lens_ipow(begin_dy, 2) + -0.154014 *begin_x*lens_ipow(begin_dx, 2) + -0.000407052 *begin_x*lens_ipow(begin_y, 2) + -0.000338815 *lens_ipow(begin_x, 3) + 0.000158721 *begin_x*lens_ipow(begin_y, 2)*begin_lambda + 0.000143296 *lens_ipow(begin_x, 3)*begin_lambda + 7.9572 *lens_ipow(begin_dx, 5) + 0.00943712 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.310323 *begin_x*lens_ipow(begin_dy, 4) + 1.32903e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + -0.000653465 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + -6.20766e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -4.27622e-07 *lens_ipow(begin_x, 5) + 96.6675 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 4) + -1.1569e-09 *begin_x*lens_ipow(begin_y, 6) + 0.00414441 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.000248029 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.000470957 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -2.79013e-14 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 4),
       + 29.4941 *begin_dy + 0.140128 *begin_y + 7.82692 *begin_dy*begin_lambda + 0.31309 *begin_y*begin_lambda + -5.41156 *begin_dy*lens_ipow(begin_lambda, 2) + -18.8396 *lens_ipow(begin_dy, 3) + -17.5345 *lens_ipow(begin_dx, 2)*begin_dy + -0.227417 *begin_y*lens_ipow(begin_lambda, 2) + -0.155115 *begin_y*lens_ipow(begin_dy, 2) + -0.177034 *begin_y*lens_ipow(begin_dx, 2) + -0.000262016 *lens_ipow(begin_y, 3) + -0.0726213 *begin_x*begin_dx*begin_dy + -0.000327494 *lens_ipow(begin_x, 2)*begin_y + 7.71128 *lens_ipow(begin_dy, 5) + 0.293607 *begin_y*lens_ipow(begin_dx, 4) + -0.000618379 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -5.87604e-07 *lens_ipow(begin_y, 5) + -1.27411e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 2.92093e-07 *lens_ipow(begin_y, 5)*begin_lambda + 3.13774e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 1.34776e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_lambda + 89.2451 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3) + 0.00423388 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 0.000194334 *begin_x*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + -9.67036e-10 *lens_ipow(begin_x, 6)*begin_y + 2.39857e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*begin_dx + -0.000934985 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 5)*begin_lambda + -2.86913e-14 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 7)
    );
    const Eigen::Vector2d delta_ap(ap_x - pred_ap[0], ap_y - pred_ap[1]);
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    Eigen::Matrix2d dx1_domega0;
    dx1_domega0(0, 0) =  + 29.4774  + 7.87139 *begin_lambda + -5.41471 *lens_ipow(begin_lambda, 2) + -17.845 *lens_ipow(begin_dy, 2) + -56.748 *lens_ipow(begin_dx, 2) + -0.0561546 *begin_y*begin_dy + -0.308028 *begin_x*begin_dx + 39.786 *lens_ipow(begin_dx, 4) + 0.00943712 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 1.32903e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -0.00130693 *lens_ipow(begin_x, 3)*begin_dx + 290.003 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 4) + 0.00828881 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 2) + 0.000496058 *lens_ipow(begin_x, 3)*begin_y*begin_dx*begin_dy + -0.00235478 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)+0.0f;
    dx1_domega0(0, 1) =  + -35.6899 *begin_dx*begin_dy + -0.0561546 *begin_y*begin_dx + -0.366292 *begin_x*begin_dy + 0.0188742 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 1.24129 *begin_x*lens_ipow(begin_dy, 3) + 386.67 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + 0.00828881 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*begin_dy + 0.000248029 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2)+0.0f;
    dx1_domega0(1, 0) =  + -35.069 *begin_dx*begin_dy + -0.354067 *begin_y*begin_dx + -0.0726213 *begin_x*begin_dy + 1.17443 *begin_y*lens_ipow(begin_dx, 3) + 356.98 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3) + 0.00846777 *lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + 0.000194334 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 2.39857e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)+0.0f;
    dx1_domega0(1, 1) =  + 29.4941  + 7.82692 *begin_lambda + -5.41156 *lens_ipow(begin_lambda, 2) + -56.5189 *lens_ipow(begin_dy, 2) + -17.5345 *lens_ipow(begin_dx, 2) + -0.310231 *begin_y*begin_dy + -0.0726213 *begin_x*begin_dx + 38.5564 *lens_ipow(begin_dy, 4) + -0.00123676 *lens_ipow(begin_y, 3)*begin_dy + 3.13774e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_lambda + 267.735 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2) + 0.00846777 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + 0.000388668 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -0.00467492 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4)*begin_lambda+0.0f;
    Eigen::Matrix2d invApJ = dx1_domega0.inverse().eval();
    Eigen::Vector2d solution_dir = invApJ * delta_ap;
    dx += solution_dir(0);
    dy += solution_dir(1);
    out(0) =  + 55.1542 *begin_dx + -0.663528 *begin_x + 0.763936 *begin_x*begin_lambda + -22.6109 *begin_dx*lens_ipow(begin_dy, 2) + -28.0113 *lens_ipow(begin_dx, 3) + -0.551568 *begin_x*lens_ipow(begin_lambda, 2) + 0.232436 *begin_x*lens_ipow(begin_dy, 2) + -0.000771071 *begin_x*lens_ipow(begin_y, 2) + 0.00835262 *lens_ipow(begin_x, 2)*begin_dx + -0.00064726 *lens_ipow(begin_x, 3) + 0.0100246 *lens_ipow(begin_y, 2)*begin_dx*begin_lambda + 0.285954 *begin_x*lens_ipow(begin_dx, 2)*begin_lambda + 0.00815752 *begin_x*begin_y*begin_dy*begin_lambda + 25.8617 *lens_ipow(begin_dx, 5) + 0.339879 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + 0.99362 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + 1.27318 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 2.31093 *begin_x*lens_ipow(begin_dx, 4) + 0.100891 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -4.07191e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -9.41991e-07 *lens_ipow(begin_x, 5) + 47.126 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*begin_lambda + 0.186838 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*begin_lambda + 5.17515e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_lambda + 0.000180615 *lens_ipow(begin_y, 4)*begin_dx*lens_ipow(begin_dy, 2) + -1.97994e-09 *begin_x*lens_ipow(begin_y, 6) + -0.00073773 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3)*lens_ipow(begin_lambda, 3) + -2.95874e-11 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4)*begin_lambda;
    out(1) =  + 54.7604 *begin_dy + -0.625983 *begin_y + 0.702062 *begin_y*begin_lambda + -20.6072 *lens_ipow(begin_dy, 3) + -20.8342 *lens_ipow(begin_dx, 2)*begin_dy + -0.565199 *begin_y*lens_ipow(begin_lambda, 2) + 0.244507 *begin_y*lens_ipow(begin_dx, 2) + -0.000917642 *lens_ipow(begin_y, 3) + 0.00494173 *begin_x*begin_y*begin_dx + -0.00105531 *lens_ipow(begin_x, 2)*begin_y + 0.0286063 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 0.000498797 *lens_ipow(begin_y, 3)*begin_lambda + 0.239231 *begin_x*begin_dx*begin_dy*begin_lambda + 0.00973308 *lens_ipow(begin_x, 2)*begin_dy*begin_lambda + 0.000549795 *lens_ipow(begin_x, 2)*begin_y*begin_lambda + 0.699052 *begin_y*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + 1.75686 *begin_y*lens_ipow(begin_dy, 4) + 0.88798 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -9.39989e-07 *lens_ipow(begin_y, 5) + -1.46026e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + 1.16538 *begin_x*begin_dx*lens_ipow(begin_dy, 3)*begin_lambda + 0.165216 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 0.000190347 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*begin_dy + -2.30393e-09 *lens_ipow(begin_x, 6)*begin_y + 0.439046 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 5)*begin_lambda + -0.000142803 *lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 3) + -2.42789e-05 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4) + -5.04879e-14 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 7);
    out(2) =  + -0.608109 *begin_dx + -0.0112291 *begin_x + -0.00778356 *begin_x*begin_lambda + 0.299067 *lens_ipow(begin_dx, 3) + 0.00622573 *begin_x*lens_ipow(begin_lambda, 2) + -0.00174691 *begin_x*lens_ipow(begin_dy, 2) + -7.40671e-05 *begin_x*begin_y*begin_dy + 1.2433e-05 *begin_x*lens_ipow(begin_y, 2) + -7.69448e-05 *lens_ipow(begin_x, 2)*begin_dx + 1.2872e-05 *lens_ipow(begin_x, 3) + 0.470968 *begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 0.00220611 *begin_x*lens_ipow(begin_dx, 2)*begin_lambda + -6.02127e-06 *begin_x*lens_ipow(begin_y, 2)*begin_lambda + -5.56527e-06 *lens_ipow(begin_x, 3)*begin_lambda + -0.342398 *begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.241311 *lens_ipow(begin_dx, 5) + 0.000544838 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + 2.73137e-05 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + 1.52612e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -1.46255e-07 *lens_ipow(begin_x, 4)*begin_dx + 0.000406785 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_lambda + -0.0245285 *begin_x*lens_ipow(begin_dx, 4)*begin_lambda + 0.000525835 *begin_x*begin_y*lens_ipow(begin_dy, 3)*begin_lambda + 2.18944e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*begin_lambda + 1.91793e-08 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + 2.50624e-11 *begin_x*lens_ipow(begin_y, 6) + 2.08122e-11 *lens_ipow(begin_x, 7) + 2.15229e-13 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4);
    out(3) =  + -0.616773 *begin_dy + -0.0110845 *begin_y + 0.0109465 *begin_dy*begin_lambda + -0.00784601 *begin_y*begin_lambda + 0.337787 *lens_ipow(begin_dy, 3) + 0.40434 *lens_ipow(begin_dx, 2)*begin_dy + 0.00627079 *begin_y*lens_ipow(begin_lambda, 2) + -0.00340022 *begin_y*lens_ipow(begin_dx, 2) + -9.52252e-05 *lens_ipow(begin_y, 2)*begin_dy + 1.02947e-05 *lens_ipow(begin_y, 3) + 0.00248807 *begin_x*begin_dx*begin_dy + -8.27405e-05 *begin_x*begin_y*begin_dx + 1.08161e-05 *lens_ipow(begin_x, 2)*begin_y + -5.08263e-06 *lens_ipow(begin_y, 3)*begin_lambda + -5.64163e-06 *lens_ipow(begin_x, 2)*begin_y*begin_lambda + -0.361227 *lens_ipow(begin_dy, 5) + -0.429933 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.302511 *lens_ipow(begin_dx, 4)*begin_dy + 0.000625745 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + 5.32503e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 1.21806e-08 *lens_ipow(begin_y, 5) + 2.32431e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + 2.71706e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -1.88439e-07 *lens_ipow(begin_x, 4)*begin_dy + 1.26951e-08 *lens_ipow(begin_x, 4)*begin_y + -0.0512861 *begin_y*lens_ipow(begin_dy, 6) + 1.01313e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dy, 3) + 6.43827e-09 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 3);
    Eigen::Vector3d pred_out_cs_pos(0,0,0);
    Eigen::Vector3d pred_out_cs_dir(0,0,0);
    Eigen::Vector2d outpos(out(0), out(1));
    Eigen::Vector2d outdir(out(2), out(3));
    if (lens_outer_pupil_geometry == "cyl-y") cylinderToCs(outpos, outdir, pred_out_cs_pos, pred_out_cs_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius, true);
    else if (lens_outer_pupil_geometry == "cyl-x") cylinderToCs(outpos, outdir, pred_out_cs_pos, pred_out_cs_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius, false);
    else sphereToCs(outpos, outdir, pred_out_cs_pos, pred_out_cs_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    Eigen::Vector3d view(
      scene_x - pred_out_cs_pos(0),
      scene_y - pred_out_cs_pos(1),
      scene_z - pred_out_cs_pos(2)
    );
    raytrace_normalise(view);
    Eigen::VectorXd out_new(5); out_new.setZero();
    Eigen::Vector2d out_new_pos(0,0);
    Eigen::Vector2d out_new_dir(0,0);
    if (lens_outer_pupil_geometry == "cyl-y") csToCylinder(pred_out_cs_pos, view, out_new_pos, out_new_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius, true);
    else if (lens_outer_pupil_geometry == "cyl-x") csToCylinder(pred_out_cs_pos, view, out_new_pos, out_new_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius, false);
    else csToSphere(pred_out_cs_pos, view, out_new_pos, out_new_dir, - lens_outer_pupil_curvature_radius, lens_outer_pupil_curvature_radius);
    out_new(0) = out_new_pos(0);
    out_new(1) = out_new_pos(1);
    out_new(2) = out_new_dir(0);
    out_new(3) = out_new_dir(1);
    const Eigen::Vector2d delta_out(out_new[2] - out[2], out_new[3] - out[3]);
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    Eigen::Matrix2d domega2_dx0;
    // domega2_dx0(0, 0) =  + -0.0112291  + -0.00778356 *begin_lambda + 0.00622573 *lens_ipow(begin_lambda, 2) + -0.00174691 *lens_ipow(begin_dy, 2) + -7.40671e-05 *begin_y*begin_dy + 1.2433e-05 *lens_ipow(begin_y, 2) + -0.00015389 *begin_x*begin_dx + 3.86161e-05 *lens_ipow(begin_x, 2) + 0.00220611 *lens_ipow(begin_dx, 2)*begin_lambda + -6.02127e-06 *lens_ipow(begin_y, 2)*begin_lambda + -1.66958e-05 *lens_ipow(begin_x, 2)*begin_lambda + 0.00108968 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + 5.46273e-05 *begin_x*begin_y*begin_dx*begin_dy + 4.57835e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -5.85018e-07 *lens_ipow(begin_x, 3)*begin_dx + -0.0245285 *lens_ipow(begin_dx, 4)*begin_lambda + 0.000525835 *begin_y*lens_ipow(begin_dy, 3)*begin_lambda + 2.18944e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*begin_lambda + 2.50624e-11 *lens_ipow(begin_y, 6) + 1.45685e-10 *lens_ipow(begin_x, 6) + 1.07614e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)+0.0f;
    // domega2_dx0(0, 1) =  + -7.40671e-05 *begin_x*begin_dy + 2.48659e-05 *begin_x*begin_y + -1.20425e-05 *begin_x*begin_y*begin_lambda + 2.73137e-05 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + 3.05223e-08 *lens_ipow(begin_x, 3)*begin_y + 0.000813571 *begin_y*lens_ipow(begin_dx, 3)*begin_lambda + 0.000525835 *begin_x*lens_ipow(begin_dy, 3)*begin_lambda + 4.37889e-05 *begin_x*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + 9.58967e-08 *lens_ipow(begin_y, 4)*begin_dx*begin_dy + 1.50374e-10 *begin_x*lens_ipow(begin_y, 5) + 8.60914e-13 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)+0.0f;
    // domega2_dx0(1, 0) =  + 0.00248807 *begin_dx*begin_dy + -8.27405e-05 *begin_y*begin_dx + 2.16323e-05 *begin_x*begin_y + -1.12833e-05 *begin_x*begin_y*begin_lambda + 2.32431e-05 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 5.43412e-08 *begin_x*lens_ipow(begin_y, 3) + -7.53758e-07 *lens_ipow(begin_x, 3)*begin_dy + 5.07803e-08 *lens_ipow(begin_x, 3)*begin_y + 4.05252e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 3) + 6.43827e-09 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 3)+0.0f;
    // domega2_dx0(1, 1) =  + -0.0110845  + -0.00784601 *begin_lambda + 0.00627079 *lens_ipow(begin_lambda, 2) + -0.00340022 *lens_ipow(begin_dx, 2) + -0.00019045 *begin_y*begin_dy + 3.08842e-05 *lens_ipow(begin_y, 2) + -8.27405e-05 *begin_x*begin_dx + 1.08161e-05 *lens_ipow(begin_x, 2) + -1.52479e-05 *lens_ipow(begin_y, 2)*begin_lambda + -5.64163e-06 *lens_ipow(begin_x, 2)*begin_lambda + 0.00125149 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 1.59751e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 6.09031e-08 *lens_ipow(begin_y, 4) + 4.64862e-05 *begin_x*begin_y*begin_dx*begin_dy + 8.15118e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + 1.26951e-08 *lens_ipow(begin_x, 4) + -0.0512861 *lens_ipow(begin_dy, 6) + 3.21913e-08 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3)+0.0f;
    domega2_dx0(0, 0) =  + -0.0841526  + 0.0180182 *lens_ipow(begin_dy, 2) + 0.0627794 *lens_ipow(begin_dx, 2) + 0.0014138 *begin_y*begin_dy + 6.7031e-05 *lens_ipow(begin_y, 2) + 0.00539724 *begin_x*begin_dx + 0.000241426 *lens_ipow(begin_x, 2) + -1.91925e-05 *begin_x*begin_y*begin_dx*begin_dy + -6.95202e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + 0.128222 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -6.09124e-06 *begin_x*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + 1.94672e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -0.00176443 *lens_ipow(begin_lambda, 8) + -0.0310725 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 5) + 0.000176266 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5) + -0.0150674 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 6) + -1.52378e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6) + -1.64675e-07 *lens_ipow(begin_x, 5)*begin_dx*lens_ipow(begin_lambda, 2) + -1.11794 *lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 6) + -3.65549e-15 *lens_ipow(begin_y, 10) + 7.65407e-08 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -3.05221e-09 *lens_ipow(begin_x, 6)*lens_ipow(begin_lambda, 4) + -2.93555e-13 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 4) + -1.60463e-13 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2) + -3.61904e-14 *lens_ipow(begin_x, 10);
    domega2_dx0(0, 1) =  + 0.0445784 *begin_dx*begin_dy + 0.00270553 *begin_y*begin_dx + 0.0014138 *begin_x*begin_dy + 0.000134062 *begin_x*begin_y + 0.00458532 *begin_y*lens_ipow(begin_dx, 3) + -9.59623e-06 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -0.0028004 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + -2.08561e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + -6.09124e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + 1.29781e-06 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dy, 2) + -2.57134e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3)*begin_dy + -0.0155363 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 5) + 0.000176266 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 5) + -3.04756e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5) + -0.121145 *begin_dx*begin_dy*lens_ipow(begin_lambda, 8) + -3.65549e-14 *begin_x*lens_ipow(begin_y, 9) + 1.27568e-08 *lens_ipow(begin_x, 6)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -1.67746e-13 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 3) + -3.56585e-14 *lens_ipow(begin_x, 9)*begin_y;
    domega2_dx0(1, 0) =  + 1.58352e-06  + 0.037641 *begin_dx*begin_dy + 0.00114241 *begin_y*begin_dx + 0.00232168 *begin_x*begin_dy + 0.000185005 *begin_x*begin_y + -0.0122638 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.000485762 *begin_y*begin_dx*lens_ipow(begin_dy, 2) + -8.08543e-06 *begin_x*lens_ipow(begin_y, 2)*begin_dy*begin_lambda + -0.000863194 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*begin_dy + 0.061474 *begin_x*lens_ipow(begin_dy, 5) + 0.0636202 *begin_x*lens_ipow(begin_dx, 4)*begin_dy + -1.23491e-09 *begin_x*lens_ipow(begin_y, 5) + -4.62094e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 3) + 2.4501e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 3) + 8.40323e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx*begin_dy*begin_lambda + 1.86325e-11 *lens_ipow(begin_y, 8)*begin_dx*begin_dy + 5.56914e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 8.51035e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -2.29075e-13 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 3);
    domega2_dx0(1, 1) =  + -0.0841902  + 0.0628713 *lens_ipow(begin_dy, 2) + 0.000197341 *begin_dx*begin_dy + 0.0140972 *lens_ipow(begin_dx, 2) + 0.00543763 *begin_y*begin_dy + 0.000245926 *lens_ipow(begin_y, 2) + 0.00114241 *begin_x*begin_dx + 9.25026e-05 *lens_ipow(begin_x, 2) + 5.93229e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.000485762 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + -8.08543e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dy*begin_lambda + 0.134065 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + -0.00172639 *begin_x*begin_y*lens_ipow(begin_dx, 3)*begin_dy + -3.08727e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -1.54031e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3) + -0.000968929 *lens_ipow(begin_lambda, 7) + 0.00053879 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 5) + -2.07699e-07 *lens_ipow(begin_y, 5)*begin_dy*lens_ipow(begin_lambda, 2) + -7.57489e-12 *lens_ipow(begin_y, 8) + 1.12043e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda + -1.13772 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 6) + -3.63686e-09 *lens_ipow(begin_y, 6)*lens_ipow(begin_lambda, 4) + 1.4906e-10 *begin_x*lens_ipow(begin_y, 7)*begin_dx*begin_dy + 2.78457e-05 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3) + 6.38276e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -8.59032e-14 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2);
    Eigen::Matrix2d invJ = domega2_dx0.inverse().eval();
    Eigen::Vector2d solution_pos = 0.72 * invJ * delta_out; // default newton-raphson
    x += solution_pos(0);
    y += solution_pos(1);
    // if(sqr_err>prev_sqr_err) error |= 1;
    // if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > lens_outer_pupil_radius*lens_outer_pupil_radius) error |= 16;
const double begin_x = x;
const double begin_y = y;
const double begin_dx = dx;
const double begin_dy = dy;
const double begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.236055  + 0.865431 *begin_lambda + -1.18729 *lens_ipow(begin_lambda, 2) + -6.92928e-06 *lens_ipow(begin_y, 2) + 0.574319 *lens_ipow(begin_lambda, 3) + -0.47338 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.236436 *lens_ipow(begin_dx, 4) + -0.00817784 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.00935803 *begin_x*lens_ipow(begin_dx, 3) + -0.000271635 *begin_x*begin_y*begin_dx*begin_dy + -0.000102271 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -0.000135766 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + -2.56212e-08 *lens_ipow(begin_x, 4) + -0.707648 *lens_ipow(begin_dy, 4)*begin_lambda + -0.0152819 *begin_y*lens_ipow(begin_dy, 3)*begin_lambda + -0.0152475 *begin_x*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 0.508265 *lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + -6.922e-07 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -0.00111181 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4) + -2.95478e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -0.00316523 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4)*begin_lambda + -0.00251645 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -0.000600783 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*begin_lambda + -4.74733e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3)*begin_lambda + -7.16958e-10 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 2) + -0.00318692 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -6.72323e-13 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2) + -0.0370123 *begin_x*begin_y*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)*begin_lambda;
else
  out[4] = 0.0f;
} break;
