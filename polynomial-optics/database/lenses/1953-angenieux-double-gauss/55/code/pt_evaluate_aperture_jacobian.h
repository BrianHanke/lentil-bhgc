case angenieux__double_gauss__1953__55mm:
{
const double dx00 =  + 0.14702  + 0.301716 *lambda + -0.229086 *lens_ipow(lambda, 2) + -0.183146 *lens_ipow(dy, 2) + -0.154014 *lens_ipow(dx, 2) + -0.000407052 *lens_ipow(y, 2) + -0.00101644 *lens_ipow(x, 2) + 0.000158721 *lens_ipow(y, 2)*lambda + 0.000429889 *lens_ipow(x, 2)*lambda + 0.310323 *lens_ipow(dy, 4) + 2.65806e-05 *x*lens_ipow(y, 2)*dx + -0.0019604 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -1.8623e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.13811e-06 *lens_ipow(x, 4) + -1.1569e-09 *lens_ipow(y, 6) + 0.0124332 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000744087 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -0.000941914 *x*lens_ipow(y, 2)*lens_ipow(dx, 5) + -1.95309e-13 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const double dx01 =  + -0.0561546 *dx*dy + -0.000814104 *x*y + 0.000317442 *x*y*lambda + 0.0188742 *y*dx*lens_ipow(dy, 2) + 2.65806e-05 *lens_ipow(x, 2)*y*dx + -1.24153e-06 *lens_ipow(x, 3)*y + -6.9414e-09 *x*lens_ipow(y, 5) + 0.000248029 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -0.000941914 *lens_ipow(x, 2)*y*lens_ipow(dx, 5) + -1.11605e-13 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const double dx02 =  + 29.4774  + 7.87139 *lambda + -5.41471 *lens_ipow(lambda, 2) + -17.845 *lens_ipow(dy, 2) + -56.748 *lens_ipow(dx, 2) + -0.0561546 *y*dy + -0.308028 *x*dx + 39.786 *lens_ipow(dx, 4) + 0.00943712 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 1.32903e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00130693 *lens_ipow(x, 3)*dx + 290.003 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 0.00828881 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + 0.000496058 *lens_ipow(x, 3)*y*dx*dy + -0.00235478 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4)+0.0f;
const double dx03 =  + -35.6899 *dx*dy + -0.0561546 *y*dx + -0.366292 *x*dy + 0.0188742 *lens_ipow(y, 2)*dx*dy + 1.24129 *x*lens_ipow(dy, 3) + 386.67 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.00828881 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 0.000248029 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)+0.0f;
const double dx04 =  + 7.87139 *dx + 0.301716 *x + -10.8294 *dx*lambda + -0.458172 *x*lambda + 0.000158721 *x*lens_ipow(y, 2) + 0.000143296 *lens_ipow(x, 3)+0.0f;
const double dx10 =  + -0.0726213 *dx*dy + -0.000654988 *x*y + -2.54823e-06 *x*lens_ipow(y, 3) + 6.27547e-05 *x*lens_ipow(y, 2)*dy*lambda + 2.69553e-06 *x*lens_ipow(y, 3)*lambda + 0.000194334 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -5.80221e-09 *lens_ipow(x, 5)*y + 1.19928e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + -0.00186997 *x*lens_ipow(y, 2)*lens_ipow(dy, 5)*lambda + -1.14765e-13 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const double dx11 =  + 0.140128  + 0.31309 *lambda + -0.227417 *lens_ipow(lambda, 2) + -0.155115 *lens_ipow(dy, 2) + -0.177034 *lens_ipow(dx, 2) + -0.000786048 *lens_ipow(y, 2) + -0.000327494 *lens_ipow(x, 2) + 0.293607 *lens_ipow(dx, 4) + -0.00185514 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -2.93802e-06 *lens_ipow(y, 4) + -3.82234e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.46046e-06 *lens_ipow(y, 4)*lambda + 6.27547e-05 *lens_ipow(x, 2)*y*dy*lambda + 4.04329e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.0127017 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000583002 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -9.67036e-10 *lens_ipow(x, 6) + 7.19571e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + -0.00186997 *lens_ipow(x, 2)*y*lens_ipow(dy, 5)*lambda + -2.00839e-13 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx12 =  + -35.069 *dx*dy + -0.354067 *y*dx + -0.0726213 *x*dy + 1.17443 *y*lens_ipow(dx, 3) + 356.98 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.00846777 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 0.000194334 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + 2.39857e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx13 =  + 29.4941  + 7.82692 *lambda + -5.41156 *lens_ipow(lambda, 2) + -56.5189 *lens_ipow(dy, 2) + -17.5345 *lens_ipow(dx, 2) + -0.310231 *y*dy + -0.0726213 *x*dx + 38.5564 *lens_ipow(dy, 4) + -0.00123676 *lens_ipow(y, 3)*dy + 3.13774e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 267.735 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.00846777 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 0.000388668 *x*lens_ipow(y, 3)*dx*dy + -0.00467492 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx14 =  + 7.82692 *dy + 0.31309 *y + -10.8231 *dy*lambda + -0.454834 *y*lambda + 2.92093e-07 *lens_ipow(y, 5) + 3.13774e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + 1.34776e-06 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.000934985 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 5)+0.0f;
const double dx20 =  + -0.0330279  + 0.0151832 *lambda + -0.0113032 *lens_ipow(lambda, 2) + -0.0106743 *lens_ipow(dy, 2) + -0.0262698 *lens_ipow(dx, 2) + 0.000242782 *y*dy + -1.49866e-05 *lens_ipow(y, 2) + 0.000371718 *x*dx + -4.79063e-05 *lens_ipow(x, 2) + 0.0094537 *lens_ipow(dy, 4) + -4.28564e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -4.2714e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.97457e-06 *lens_ipow(x, 3)*dx + 6.13734e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -8.62153e-11 *lens_ipow(y, 6) + 2.72244e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -2.94309e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -8.21772e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -8.26986e-10 *lens_ipow(x, 6) + 8.65527e-10 *lens_ipow(x, 6)*lambda + 2.31282e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + -2.94423e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(lambda, 3) + 0.0542279 *x*lens_ipow(dx, 9)+0.0f;
const double dx21 =  + -0.0193917 *dx*dy + 0.000242782 *x*dy + -2.99731e-05 *x*y + -8.57127e-05 *x*y*lens_ipow(dx, 2) + -2.8476e-07 *lens_ipow(x, 3)*y + 4.09156e-07 *lens_ipow(x, 3)*y*lambda + -3.86598e-07 *lens_ipow(y, 4)*dx*dy + -5.17291e-10 *x*lens_ipow(y, 5) + 2.72244e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 2.31282e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + -1.17769e-09 *lens_ipow(x, 5)*y*lens_ipow(lambda, 3)+0.0f;
const double dx22 =  + 0.397942  + -0.490673 *lens_ipow(dy, 2) + -1.48823 *lens_ipow(dx, 2) + -0.0193917 *y*dy + -0.0525395 *x*dx + 0.000185859 *lens_ipow(x, 2) + -8.57127e-05 *x*lens_ipow(y, 2)*dx + 4.93642e-07 *lens_ipow(x, 4) + -7.73197e-08 *lens_ipow(y, 5)*dy + -3.28709e-07 *lens_ipow(x, 5)*dx + 5.78205e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + 0.244026 *lens_ipow(x, 2)*lens_ipow(dx, 8)+0.0f;
const double dx23 =  + -0.981347 *dx*dy + -0.0193917 *y*dx + -0.0213486 *x*dy + 0.000242782 *x*y + 0.0378148 *x*lens_ipow(dy, 3) + -7.73197e-08 *lens_ipow(y, 5)*dx + 9.07481e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -1.17724e-07 *lens_ipow(x, 5)*dy+0.0f;
const double dx24 =  + 0.0151832 *x + -0.0226064 *x*lambda + 2.04578e-07 *lens_ipow(x, 3)*lens_ipow(y, 2) + 1.23647e-10 *lens_ipow(x, 7) + -1.76654e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx30 =  + -0.0194033 *dx*dy + 0.000238993 *y*dx + -3.00151e-05 *x*y + -8.74782e-05 *x*y*lens_ipow(dy, 2) + -2.84628e-07 *x*lens_ipow(y, 3) + 4.09741e-07 *x*lens_ipow(y, 3)*lambda + 2.80752e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -3.83433e-07 *lens_ipow(x, 4)*dx*dy + -5.11898e-10 *lens_ipow(x, 5)*y + 2.26136e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + -1.18878e-09 *x*lens_ipow(y, 5)*lens_ipow(lambda, 3)+0.0f;
const double dx31 =  + -0.0329188  + 0.0147762 *lambda + -0.0109325 *lens_ipow(lambda, 2) + -0.0262122 *lens_ipow(dy, 2) + -0.0106269 *lens_ipow(dx, 2) + 0.000352736 *y*dy + -4.81153e-05 *lens_ipow(y, 2) + 0.000238993 *x*dx + -1.50075e-05 *lens_ipow(x, 2) + 0.00925815 *lens_ipow(dx, 4) + 2.24739e-06 *lens_ipow(y, 3)*dy + -4.37391e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -4.26942e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 6.14611e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -7.70889e-07 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -2.97919e-07 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -8.20315e-10 *lens_ipow(y, 6) + 2.80752e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -8.53164e-11 *lens_ipow(x, 6) + 8.66989e-10 *lens_ipow(y, 6)*lambda + 0.0142809 *y*lens_ipow(dy, 7) + 2.26136e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + -2.97196e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx32 =  + -0.97971 *dx*dy + -0.0212539 *y*dx + -0.0194033 *x*dy + 0.000238993 *x*y + 0.0370326 *y*lens_ipow(dx, 3) + -1.19168e-07 *lens_ipow(y, 5)*dx + 9.35839e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -7.66865e-08 *lens_ipow(x, 5)*dy+0.0f;
const double dx33 =  + 0.398126  + -1.49366 *lens_ipow(dy, 2) + -0.489855 *lens_ipow(dx, 2) + -0.0524245 *y*dy + 0.000176368 *lens_ipow(y, 2) + -0.0194033 *x*dx + 5.61848e-07 *lens_ipow(y, 4) + -8.74782e-05 *lens_ipow(x, 2)*y*dy + -3.08356e-07 *lens_ipow(y, 5)*dy + -7.66865e-08 *lens_ipow(x, 5)*dx + 0.0499833 *lens_ipow(y, 2)*lens_ipow(dy, 6) + 5.65339e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx34 =  + 0.0147762 *y + -0.0218651 *y*lambda + 2.0487e-07 *lens_ipow(x, 2)*lens_ipow(y, 3) + 1.23856e-10 *lens_ipow(y, 7) + -1.78317e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*lens_ipow(lambda, 2)+0.0f;
const double dx40 =  + -8.00642e-05 *y*dx*dy + -2.86427e-07 *x*lens_ipow(y, 2) + 2.49733e-07 *x*lens_ipow(y, 2)*lambda + 0.0412865 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.0134897 *lens_ipow(dx, 5) + -1.38687e-06 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.60853e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -7.74987e-10 *lens_ipow(x, 5) + -0.000667302 *x*lens_ipow(dy, 4)*lambda + -1.22525e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 4) + 0.000402951 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4) + -1.97318e-14 *lens_ipow(x, 3)*lens_ipow(y, 6) + 1.09084e-09 *lens_ipow(x, 5)*y*lens_ipow(dy, 3)+0.0f;
const double dx41 =  + -1.30692e-07 *lens_ipow(y, 3) + -8.00642e-05 *x*dx*dy + -2.86427e-07 *lens_ipow(x, 2)*y + 2.49733e-07 *lens_ipow(x, 2)*y*lambda + -1.38687e-06 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -0.00854243 *lens_ipow(dy, 3)*lens_ipow(lambda, 3) + 0.0408982 *lens_ipow(dy, 5)*lambda + 0.0785457 *lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 0.000427563 *lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + 3.83733e-07 *lens_ipow(y, 4)*lens_ipow(dy, 3) + -3.69051e-09 *lens_ipow(y, 5)*lens_ipow(dx, 2) + -1.22525e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 4) + -2.95977e-14 *lens_ipow(x, 4)*lens_ipow(y, 5) + 1.81807e-10 *lens_ipow(x, 6)*lens_ipow(dy, 3)+0.0f;
const double dx42 =  + -0.872312 *dx*lens_ipow(dy, 2) + -0.747594 *lens_ipow(dx, 3) + -8.00642e-05 *x*y*dy + 0.123859 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0674486 *x*lens_ipow(dx, 4) + -8.04267e-07 *lens_ipow(x, 4)*dx + -1.25016 *lens_ipow(dx, 5)*lambda + 0.157091 *y*dx*lens_ipow(dy, 3)*lambda + 0.000570084 *lens_ipow(y, 3)*lens_ipow(dx, 3)*dy + -1.23017e-09 *lens_ipow(y, 6)*dx + -2.4505e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3) + 0.000134317 *lens_ipow(x, 3)*lens_ipow(dy, 4)+0.0f;
const double dx43 =  + -0.818146 *lens_ipow(dy, 3) + -0.872312 *lens_ipow(dx, 2)*dy + -8.00642e-05 *x*y*dx + 0.082573 *x*lens_ipow(dx, 3)*dy + -1.38687e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -0.0256273 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.204491 *y*lens_ipow(dy, 4)*lambda + 0.235637 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.0013346 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda + 0.000142521 *lens_ipow(y, 3)*lens_ipow(dx, 4) + 2.3024e-07 *lens_ipow(y, 5)*lens_ipow(dy, 2) + 0.000537269 *lens_ipow(x, 3)*dx*lens_ipow(dy, 3) + 5.45421e-10 *lens_ipow(x, 6)*y*lens_ipow(dy, 2)+0.0f;
const double dx44 =  + 0.6024  + -1.66078 *lambda + 1.20792 *lens_ipow(lambda, 2) + 1.24867e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.20836 *lens_ipow(dx, 6) + -0.0256273 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.0408982 *y*lens_ipow(dy, 5) + 0.0785457 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.000333651 *lens_ipow(x, 2)*lens_ipow(dy, 4)+0.0f;
} break;
