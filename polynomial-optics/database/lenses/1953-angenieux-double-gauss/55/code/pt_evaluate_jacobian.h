case angenieux__double_gauss__1953__55mm:
{
const double dx00 =  + -0.663528  + 0.763936 *lambda + -0.551568 *lens_ipow(lambda, 2) + 0.232436 *lens_ipow(dy, 2) + -0.000771071 *lens_ipow(y, 2) + 0.0167052 *x*dx + -0.00194178 *lens_ipow(x, 2) + 0.285954 *lens_ipow(dx, 2)*lambda + 0.00815752 *y*dy*lambda + 1.27318 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.31093 *lens_ipow(dx, 4) + 0.100891 *y*lens_ipow(dx, 2)*dy + -1.22157e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -4.70996e-06 *lens_ipow(x, 4) + 0.373677 *x*lens_ipow(dx, 3)*lambda + 1.55254e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -1.97994e-09 *lens_ipow(y, 6) + -0.00295092 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -1.47937e-10 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda+0.0f;
const double dx01 =  + -0.00154214 *x*y + 0.0200492 *y*dx*lambda + 0.00815752 *x*dy*lambda + 0.339879 *dx*dy*lens_ipow(lambda, 2) + 0.99362 *lens_ipow(dx, 3)*dy + 0.100891 *x*lens_ipow(dx, 2)*dy + -8.14383e-06 *lens_ipow(x, 3)*y + 1.03503e-05 *lens_ipow(x, 3)*y*lambda + 0.00072246 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -1.18796e-08 *x*lens_ipow(y, 5) + -1.18349e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*lambda+0.0f;
const double dx02 =  + 55.1542  + -22.6109 *lens_ipow(dy, 2) + -84.0338 *lens_ipow(dx, 2) + 0.00835262 *lens_ipow(x, 2) + 0.0100246 *lens_ipow(y, 2)*lambda + 0.571908 *x*dx*lambda + 129.308 *lens_ipow(dx, 4) + 0.339879 *y*dy*lens_ipow(lambda, 2) + 2.98086 *y*lens_ipow(dx, 2)*dy + 2.54637 *x*dx*lens_ipow(dy, 2) + 9.2437 *x*lens_ipow(dx, 3) + 0.201782 *x*y*dx*dy + 141.378 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.560515 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 0.000180615 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -0.00221319 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx03 =  + -45.2219 *dx*dy + 0.464872 *x*dy + 0.00815752 *x*y*lambda + 0.339879 *y*dx*lens_ipow(lambda, 2) + 0.99362 *y*lens_ipow(dx, 3) + 2.54637 *x*lens_ipow(dx, 2)*dy + 0.100891 *x*y*lens_ipow(dx, 2) + 94.2521 *lens_ipow(dx, 3)*dy*lambda + 0.00036123 *lens_ipow(y, 4)*dx*dy+0.0f;
const double dx04 =  + 0.763936 *x + -1.10314 *x*lambda + 0.0100246 *lens_ipow(y, 2)*dx + 0.285954 *x*lens_ipow(dx, 2) + 0.00815752 *x*y*dy + 0.679758 *y*dx*dy*lambda + 47.126 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.186838 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 5.17515e-06 *lens_ipow(x, 3)*lens_ipow(y, 2) + -0.00221319 *lens_ipow(x, 4)*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -2.95874e-11 *lens_ipow(x, 5)*lens_ipow(y, 4)+0.0f;
const double dx10 =  + 0.00494173 *y*dx + -0.00211063 *x*y + 0.239231 *dx*dy*lambda + 0.0194662 *x*dy*lambda + 0.00109959 *x*y*lambda + -2.92053e-06 *x*lens_ipow(y, 3) + 1.16538 *dx*lens_ipow(dy, 3)*lambda + 0.165216 *y*dx*lens_ipow(dy, 2)*lambda + 0.000761388 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -1.38236e-08 *lens_ipow(x, 5)*y + -2.01952e-13 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const double dx11 =  + -0.625983  + 0.702062 *lambda + -0.565199 *lens_ipow(lambda, 2) + 0.244507 *lens_ipow(dx, 2) + -0.00275292 *lens_ipow(y, 2) + 0.00494173 *x*dx + -0.00105531 *lens_ipow(x, 2) + 0.0572125 *y*dy*lambda + 0.00149639 *lens_ipow(y, 2)*lambda + 0.000549795 *lens_ipow(x, 2)*lambda + 0.699052 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 1.75686 *lens_ipow(dy, 4) + 0.88798 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -4.69994e-06 *lens_ipow(y, 4) + -4.38079e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.165216 *x*dx*lens_ipow(dy, 2)*lambda + -2.30393e-09 *lens_ipow(x, 6) + 0.878091 *y*lens_ipow(dy, 5)*lambda + -0.000571211 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 3) + -0.000121394 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -3.53415e-13 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx12 =  + -41.6684 *dx*dy + 0.489014 *y*dx + 0.00494173 *x*y + 0.239231 *x*dy*lambda + 1.77596 *y*dx*lens_ipow(dy, 2) + 1.16538 *x*lens_ipow(dy, 3)*lambda + 0.165216 *x*y*lens_ipow(dy, 2)*lambda + 0.000380694 *lens_ipow(x, 4)*dx*dy+0.0f;
const double dx13 =  + 54.7604  + -61.8217 *lens_ipow(dy, 2) + -20.8342 *lens_ipow(dx, 2) + 0.0286063 *lens_ipow(y, 2)*lambda + 0.239231 *x*dx*lambda + 0.00973308 *lens_ipow(x, 2)*lambda + 1.3981 *y*dy*lens_ipow(lambda, 2) + 7.02744 *y*lens_ipow(dy, 3) + 1.77596 *y*lens_ipow(dx, 2)*dy + 3.49614 *x*dx*lens_ipow(dy, 2)*lambda + 0.330431 *x*y*dx*dy*lambda + 0.000190347 *lens_ipow(x, 4)*lens_ipow(dx, 2) + 2.19523 *lens_ipow(y, 2)*lens_ipow(dy, 4)*lambda + -0.000142803 *lens_ipow(y, 4)*lens_ipow(lambda, 3) + -4.85578e-05 *lens_ipow(y, 5)*dy*lens_ipow(lambda, 4)+0.0f;
const double dx14 =  + 0.702062 *y + -1.1304 *y*lambda + 0.0286063 *lens_ipow(y, 2)*dy + 0.000498797 *lens_ipow(y, 3) + 0.239231 *x*dx*dy + 0.00973308 *lens_ipow(x, 2)*dy + 0.000549795 *lens_ipow(x, 2)*y + 1.3981 *y*lens_ipow(dy, 2)*lambda + 1.16538 *x*dx*lens_ipow(dy, 3) + 0.165216 *x*y*dx*lens_ipow(dy, 2) + 0.439046 *lens_ipow(y, 2)*lens_ipow(dy, 5) + -0.000428408 *lens_ipow(y, 4)*dy*lens_ipow(lambda, 2) + -9.71155e-05 *lens_ipow(y, 5)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx20 =  + -0.0112291  + -0.00778356 *lambda + 0.00622573 *lens_ipow(lambda, 2) + -0.00174691 *lens_ipow(dy, 2) + -7.40671e-05 *y*dy + 1.2433e-05 *lens_ipow(y, 2) + -0.00015389 *x*dx + 3.86161e-05 *lens_ipow(x, 2) + 0.00220611 *lens_ipow(dx, 2)*lambda + -6.02127e-06 *lens_ipow(y, 2)*lambda + -1.66958e-05 *lens_ipow(x, 2)*lambda + 0.00108968 *x*dx*lens_ipow(dy, 2) + 5.46273e-05 *x*y*dx*dy + 4.57835e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -5.85018e-07 *lens_ipow(x, 3)*dx + -0.0245285 *lens_ipow(dx, 4)*lambda + 0.000525835 *y*lens_ipow(dy, 3)*lambda + 2.18944e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 2.50624e-11 *lens_ipow(y, 6) + 1.45685e-10 *lens_ipow(x, 6) + 1.07614e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx21 =  + -7.40671e-05 *x*dy + 2.48659e-05 *x*y + -1.20425e-05 *x*y*lambda + 2.73137e-05 *lens_ipow(x, 2)*dx*dy + 3.05223e-08 *lens_ipow(x, 3)*y + 0.000813571 *y*lens_ipow(dx, 3)*lambda + 0.000525835 *x*lens_ipow(dy, 3)*lambda + 4.37889e-05 *x*y*lens_ipow(dy, 2)*lambda + 9.58967e-08 *lens_ipow(y, 4)*dx*dy + 1.50374e-10 *x*lens_ipow(y, 5) + 8.60914e-13 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx22 =  + -0.608109  + 0.8972 *lens_ipow(dx, 2) + -7.69448e-05 *lens_ipow(x, 2) + 0.470968 *lens_ipow(dy, 2)*lambda + 0.00441223 *x*dx*lambda + -0.342398 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.20655 *lens_ipow(dx, 4) + 0.000544838 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 2.73137e-05 *lens_ipow(x, 2)*y*dy + -1.46255e-07 *lens_ipow(x, 4) + 0.00122036 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.098114 *x*lens_ipow(dx, 3)*lambda + 1.91793e-08 *lens_ipow(y, 5)*dy+0.0f;
const double dx23 =  + -0.00349382 *x*dy + -7.40671e-05 *x*y + 0.941936 *dx*dy*lambda + -0.684796 *dx*dy*lens_ipow(lambda, 2) + 0.00108968 *lens_ipow(x, 2)*dx*dy + 2.73137e-05 *lens_ipow(x, 2)*y*dx + 0.0015775 *x*y*lens_ipow(dy, 2)*lambda + 4.37889e-05 *x*lens_ipow(y, 2)*dy*lambda + 1.91793e-08 *lens_ipow(y, 5)*dx+0.0f;
const double dx24 =  + -0.00778356 *x + 0.0124515 *x*lambda + 0.470968 *dx*lens_ipow(dy, 2) + 0.00220611 *x*lens_ipow(dx, 2) + -6.02127e-06 *x*lens_ipow(y, 2) + -5.56527e-06 *lens_ipow(x, 3) + -0.684796 *dx*lens_ipow(dy, 2)*lambda + 0.000406785 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -0.0245285 *x*lens_ipow(dx, 4) + 0.000525835 *x*y*lens_ipow(dy, 3) + 2.18944e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 2)+0.0f;
const double dx30 =  + 0.00248807 *dx*dy + -8.27405e-05 *y*dx + 2.16323e-05 *x*y + -1.12833e-05 *x*y*lambda + 2.32431e-05 *lens_ipow(y, 2)*dx*dy + 5.43412e-08 *x*lens_ipow(y, 3) + -7.53758e-07 *lens_ipow(x, 3)*dy + 5.07803e-08 *lens_ipow(x, 3)*y + 4.05252e-06 *lens_ipow(x, 3)*lens_ipow(dy, 3) + 6.43827e-09 *lens_ipow(y, 5)*lens_ipow(dx, 3)+0.0f;
const double dx31 =  + -0.0110845  + -0.00784601 *lambda + 0.00627079 *lens_ipow(lambda, 2) + -0.00340022 *lens_ipow(dx, 2) + -0.00019045 *y*dy + 3.08842e-05 *lens_ipow(y, 2) + -8.27405e-05 *x*dx + 1.08161e-05 *lens_ipow(x, 2) + -1.52479e-05 *lens_ipow(y, 2)*lambda + -5.64163e-06 *lens_ipow(x, 2)*lambda + 0.00125149 *y*lens_ipow(dx, 2)*dy + 1.59751e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 6.09031e-08 *lens_ipow(y, 4) + 4.64862e-05 *x*y*dx*dy + 8.15118e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.26951e-08 *lens_ipow(x, 4) + -0.0512861 *lens_ipow(dy, 6) + 3.21913e-08 *x*lens_ipow(y, 4)*lens_ipow(dx, 3)+0.0f;
const double dx32 =  + 0.80868 *dx*dy + -0.00680044 *y*dx + 0.00248807 *x*dy + -8.27405e-05 *x*y + -0.859865 *dx*lens_ipow(dy, 3) + -1.21004 *lens_ipow(dx, 3)*dy + 0.00125149 *lens_ipow(y, 2)*dx*dy + 2.32431e-05 *x*lens_ipow(y, 2)*dy + 1.93148e-08 *x*lens_ipow(y, 5)*lens_ipow(dx, 2)+0.0f;
const double dx33 =  + -0.616773  + 0.0109465 *lambda + 1.01336 *lens_ipow(dy, 2) + 0.40434 *lens_ipow(dx, 2) + -9.52252e-05 *lens_ipow(y, 2) + 0.00248807 *x*dx + -1.80614 *lens_ipow(dy, 4) + -1.2898 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.302511 *lens_ipow(dx, 4) + 0.000625745 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.06501e-05 *lens_ipow(y, 3)*dy + 2.32431e-05 *x*lens_ipow(y, 2)*dx + -1.88439e-07 *lens_ipow(x, 4) + -0.307716 *y*lens_ipow(dy, 5) + 3.03939e-06 *lens_ipow(x, 4)*lens_ipow(dy, 2)+0.0f;
const double dx34 =  + 0.0109465 *dy + -0.00784601 *y + 0.0125416 *y*lambda + -5.08263e-06 *lens_ipow(y, 3) + -5.64163e-06 *lens_ipow(x, 2)*y+0.0f;
const double dx40 =  + -0.00935803 *lens_ipow(dx, 3) + -0.000271635 *y*dx*dy + -0.000204541 *x*lens_ipow(dy, 2) + -0.000271533 *x*lens_ipow(dx, 2) + -1.02485e-07 *lens_ipow(x, 3) + -0.0152475 *dx*lens_ipow(dy, 2)*lambda + -0.00222363 *x*lens_ipow(dx, 4) + -5.90956e-10 *x*lens_ipow(y, 4) + -0.00637385 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -4.03394e-12 *lens_ipow(x, 5)*lens_ipow(y, 2) + -0.0370123 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx41 =  + -1.38586e-05 *y + -0.00817784 *lens_ipow(dx, 2)*dy + -0.000271635 *x*dx*dy + -0.0152819 *lens_ipow(dy, 3)*lambda + -2.7688e-06 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -1.18191e-09 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.00633047 *y*lens_ipow(dy, 4)*lambda + -0.00503289 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.00120157 *y*lens_ipow(dx, 4)*lambda + -0.00014242 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda + -4.30175e-09 *lens_ipow(y, 5)*lens_ipow(dx, 2) + -1.34465e-12 *lens_ipow(x, 6)*y + -0.0370123 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx42 =  + -0.946759 *dx*lens_ipow(dy, 2) + -0.945745 *lens_ipow(dx, 3) + -0.0163557 *y*dx*dy + -0.0280741 *x*lens_ipow(dx, 2) + -0.000271635 *x*y*dy + -0.000271533 *lens_ipow(x, 2)*dx + -0.0152475 *x*lens_ipow(dy, 2)*lambda + -0.00444726 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.00503289 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda + -0.00240313 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + -1.43392e-09 *lens_ipow(y, 6)*dx + -0.00637385 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.111037 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx43 =  + -0.946759 *lens_ipow(dx, 2)*dy + -0.00817784 *y*lens_ipow(dx, 2) + -0.000271635 *x*y*dx + -0.000204541 *lens_ipow(x, 2)*dy + -2.83059 *lens_ipow(dy, 3)*lambda + -0.0458458 *y*lens_ipow(dy, 2)*lambda + -0.0304951 *x*dx*dy*lambda + 2.03306 *lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -1.3844e-06 *lens_ipow(y, 4)*dy + -0.0126609 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda + -0.00503289 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lambda + -0.00014242 *lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + -0.00637385 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.111037 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx44 =  + 0.865431  + -2.37457 *lambda + 1.72296 *lens_ipow(lambda, 2) + -0.707648 *lens_ipow(dy, 4) + -0.0152819 *y*lens_ipow(dy, 3) + -0.0152475 *x*dx*lens_ipow(dy, 2) + 1.01653 *lens_ipow(dy, 4)*lambda + -0.00316523 *lens_ipow(y, 2)*lens_ipow(dy, 4) + -0.00251645 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000600783 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -4.74733e-05 *lens_ipow(y, 3)*lens_ipow(dy, 3) + -0.00637385 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.0370123 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
} break;
