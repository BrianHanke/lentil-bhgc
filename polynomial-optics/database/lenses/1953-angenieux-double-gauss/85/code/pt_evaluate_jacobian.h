case angenieux__double_gauss__1953__85mm:
{
const double dx00 =  + -0.630653  + 0.648774 *lambda + -0.000968475 *lens_ipow(x, 2) + 0.552026 *lens_ipow(dx, 2) + -0.458111 *lens_ipow(lambda, 2) + -0.00045453 *lens_ipow(y, 2) + 0.000203875 *lens_ipow(y, 2)*lambda + 0.0424443 *x*dx*lambda + 0.0104645 *y*dy*lambda + 5.79425 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.0270538 *y*lens_ipow(dx, 2)*dy + -0.00262859 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -14.1942 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.00199227 *x*y*dx*dy*lambda + 9.6531 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -9.89049e-05 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 3) + -0.000297284 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 3) + -1.40393e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx01 =  + -0.000909061 *x*y + 0.00040775 *x*y*lambda + 0.0104645 *x*dy*lambda + 0.0123311 *y*dx*lambda + 0.399235 *dx*dy*lambda + 0.0270538 *x*lens_ipow(dx, 2)*dy + 0.0632785 *y*dx*lens_ipow(dy, 2)*lambda + -0.000996136 *lens_ipow(x, 2)*dx*dy*lambda + -3.29683e-05 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 3) + -1.12314e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx02 =  + 84.7496  + 1.10405 *x*dx + -97.8964 *lens_ipow(dx, 2) + -33.6475 *lens_ipow(dy, 2) + 0.0212221 *lens_ipow(x, 2)*lambda + 0.00616556 *lens_ipow(y, 2)*lambda + 0.399235 *y*dy*lambda + 0.0541076 *x*y*dx*dy + -0.00175239 *lens_ipow(x, 3)*dx + 0.0316393 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -0.000996136 *lens_ipow(x, 2)*y*dy*lambda + -7.43209e-05 *lens_ipow(x, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx03 =  + -67.2951 *dx*dy + 0.0104645 *x*y*lambda + 0.399235 *y*dx*lambda + 11.5885 *x*dy*lens_ipow(lambda, 2) + 0.0270538 *x*y*lens_ipow(dx, 2) + -28.3884 *x*dy*lens_ipow(lambda, 3) + 0.0632785 *lens_ipow(y, 2)*dx*dy*lambda + -0.000996136 *lens_ipow(x, 2)*y*dx*lambda + 19.3062 *x*dy*lens_ipow(lambda, 4) + -3.29683e-05 *lens_ipow(x, 3)*y*lens_ipow(lambda, 3)+0.0f;
const double dx04 =  + 0.648774 *x + -0.916222 *x*lambda + 0.000203875 *x*lens_ipow(y, 2) + 0.0212221 *lens_ipow(x, 2)*dx + 0.0104645 *x*y*dy + 0.00616556 *lens_ipow(y, 2)*dx + 0.399235 *y*dx*dy + 11.5885 *x*lens_ipow(dy, 2)*lambda + -42.5826 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.0316393 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -0.000996136 *lens_ipow(x, 2)*y*dx*dy + 38.6124 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -9.89049e-05 *lens_ipow(x, 3)*y*dy*lens_ipow(lambda, 2) + -0.000222963 *lens_ipow(x, 4)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx10 =  + 0.21319 *dx*dy + 0.00480778 *y*dx + 0.0070993 *x*dy + -0.000693204 *x*y + -0.000465245 *lens_ipow(y, 2)*dx*dy + 0.0281633 *y*dx*lens_ipow(dy, 2) + 0.000243853 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -9.26439e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const double dx11 =  + -0.629141  + 0.643184 *lambda + -0.445984 *lens_ipow(lambda, 2) + 0.277323 *lens_ipow(dx, 2) + 0.384825 *lens_ipow(dy, 2) + -0.000984683 *lens_ipow(y, 2) + 0.00480778 *x*dx + -0.000346602 *lens_ipow(x, 2) + 0.0341178 *y*dy*lambda + 0.0525849 *y*lens_ipow(dy, 3) + -0.00140355 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000930491 *x*y*dx*dy + 0.0281633 *x*dx*lens_ipow(dy, 2) + 1.9332 *lens_ipow(dy, 4)*lambda + -0.000192366 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 3) + -1.15805e-11 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx12 =  + 0.554645 *y*dx + 0.21319 *x*dy + 0.00480778 *x*y + -65.9294 *dx*dy + -0.000465245 *x*lens_ipow(y, 2)*dy + 0.0281633 *x*y*lens_ipow(dy, 2) + 0.000121926 *lens_ipow(x, 4)*dx*dy+0.0f;
const double dx13 =  + 84.9913  + -129.597 *lens_ipow(dy, 2) + 0.769649 *y*dy + 0.21319 *x*dx + -32.9647 *lens_ipow(dx, 2) + 0.00354965 *lens_ipow(x, 2) + 0.0170589 *lens_ipow(y, 2)*lambda + 26.7376 *lens_ipow(dy, 2)*lambda + 112.983 *lens_ipow(dy, 4) + 0.0788773 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000935698 *lens_ipow(y, 3)*dy + -0.000465245 *x*lens_ipow(y, 2)*dx + 0.0563265 *x*y*dx*dy + 7.7328 *y*lens_ipow(dy, 3)*lambda + 6.09632e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -4.80916e-05 *lens_ipow(y, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx14 =  + 0.643184 *y + -0.891968 *y*lambda + 0.0170589 *lens_ipow(y, 2)*dy + 8.91253 *lens_ipow(dy, 3) + 1.9332 *y*lens_ipow(dy, 4) + -0.000144275 *lens_ipow(y, 4)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx20 =  + -0.00735722  + -0.00427697 *lambda + 8.45516e-06 *lens_ipow(x, 2) + -0.00118079 *lens_ipow(dy, 2) + 0.00295211 *lens_ipow(lambda, 2) + -0.000107448 *x*dx + 2.67351e-06 *lens_ipow(y, 2) + -3.4422e-05 *y*dy + 1.64045e-05 *x*y*dx*dy + 0.000125285 *y*lens_ipow(dy, 3) + 0.000515437 *x*dx*lens_ipow(dy, 2) + 3.23467e-06 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00090614 *x*lens_ipow(dx, 3)*lambda + -0.0193136 *lens_ipow(dx, 6) + 0.0141629 *y*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.000164908 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lens_ipow(lambda, 2) + 1.02199e-13 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx21 =  + 5.34701e-06 *x*y + -3.4422e-05 *x*dy + 8.20225e-06 *lens_ipow(x, 2)*dx*dy + 0.000125285 *x*lens_ipow(dy, 3) + 0.000191639 *y*lens_ipow(dx, 3) + 6.46935e-06 *x*y*lens_ipow(dy, 2) + 0.0141629 *x*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 8.17591e-14 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx22 =  + -0.610791  + 0.00801533 *lambda + 0.830059 *lens_ipow(dx, 2) + -5.37241e-05 *lens_ipow(x, 2) + 0.548419 *lens_ipow(dy, 2)*lambda + 8.20225e-06 *lens_ipow(x, 2)*y*dy + 0.000287458 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.945416 *lens_ipow(dx, 4) + 0.000257719 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.49563 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.00135921 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -0.115882 *x*lens_ipow(dx, 5) + 0.0566518 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.000219878 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx23 =  + -0.00236158 *x*dy + -3.4422e-05 *x*y + 1.09684 *dx*dy*lambda + 8.20225e-06 *lens_ipow(x, 2)*y*dx + 0.000375854 *x*y*lens_ipow(dy, 2) + 0.000515437 *lens_ipow(x, 2)*dx*dy + 6.46935e-06 *x*lens_ipow(y, 2)*dy + -0.99126 *dx*dy*lens_ipow(lambda, 2) + 0.0424888 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 2)+0.0f;
const double dx24 =  + -0.00427697 *x + 0.00801533 *dx + 0.00590422 *x*lambda + 0.548419 *dx*lens_ipow(dy, 2) + -0.99126 *dx*lens_ipow(dy, 2)*lambda + 0.00045307 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 0.000109939 *lens_ipow(x, 3)*lens_ipow(dx, 4)*lambda+0.0f;
const double dx30 =  + 0.00222699 *dx*dy + -3.48559e-05 *y*dx + 5.421e-06 *x*y + -2.37196e-07 *x*lens_ipow(y, 2)*dy + 3.50586e-06 *lens_ipow(y, 2)*dx*dy + 2.64602e-11 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.0666803 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + 2.29467e-06 *x*lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx31 =  + -0.0072681  + -0.00454731 *lambda + 0.0032206 *lens_ipow(lambda, 2) + -0.00226146 *lens_ipow(dx, 2) + 8.20232e-06 *lens_ipow(y, 2) + -3.48559e-05 *x*dx + 2.7105e-06 *lens_ipow(x, 2) + -4.75636e-07 *lens_ipow(y, 3)*dy + -2.37196e-07 *lens_ipow(x, 2)*y*dy + 7.01173e-06 *x*y*dx*dy + 1.98452e-11 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.0156555 *lens_ipow(dy, 6) + -0.0491567 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 2.29467e-06 *lens_ipow(x, 2)*y*lens_ipow(dy, 3)*lambda + 1.33934e-08 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy+0.0f;
const double dx32 =  + -0.00452292 *y*dx + 0.00222699 *x*dy + -3.48559e-05 *x*y + 0.85639 *dx*dy + -1.2914 *dx*lens_ipow(dy, 3) + 3.50586e-06 *x*lens_ipow(y, 2)*dy + -1.3449 *lens_ipow(dx, 3)*dy + -0.0983135 *y*dx*lens_ipow(dy, 4) + -0.200041 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 4.46447e-09 *lens_ipow(y, 6)*dx*dy+0.0f;
const double dx33 =  + -0.616363  + 0.00944648 *lambda + 0.954015 *lens_ipow(dy, 2) + 0.00222699 *x*dx + 0.428195 *lens_ipow(dx, 2) + -1.18909e-07 *lens_ipow(y, 4) + -1.18598e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.23987 *lens_ipow(dy, 4) + -1.93711 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 3.50586e-06 *x*lens_ipow(y, 2)*dx + -0.336225 *lens_ipow(dx, 4) + -0.0939329 *y*lens_ipow(dy, 5) + -0.196627 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.200041 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 3.44201e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 2.23223e-09 *lens_ipow(y, 6)*lens_ipow(dx, 2)+0.0f;
const double dx34 =  + 0.00944648 *dy + -0.00454731 *y + 0.00644121 *y*lambda + 1.14734e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 3)+0.0f;
const double dx40 =  + -0.00583318 *lens_ipow(dx, 3) + -0.000176699 *y*dx*dy + -0.000215701 *x*lens_ipow(dx, 2) + -0.00473576 *dx*lens_ipow(dy, 2) + -0.000102699 *x*lens_ipow(dy, 2) + -4.36498e-06 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 2) + -0.000650748 *x*lens_ipow(dx, 4) + -1.20302e-12 *lens_ipow(x, 3)*lens_ipow(y, 4)*lambda+0.0f;
const double dx41 =  + -0.00473145 *lens_ipow(dx, 2)*dy + -0.000102653 *y*lens_ipow(dx, 2) + -0.000176699 *x*dx*dy + -0.00580119 *lens_ipow(dy, 3) + -0.000215909 *y*lens_ipow(dy, 2) + -4.35994e-06 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + -0.000636166 *y*lens_ipow(dy, 4) + -1.20302e-12 *lens_ipow(x, 4)*lens_ipow(y, 3)*lambda+0.0f;
const double dx42 =  + -0.0094629 *y*dx*dy + -0.000102653 *lens_ipow(y, 2)*dx + -0.0174995 *x*lens_ipow(dx, 2) + -0.000176699 *x*y*dy + -0.000215701 *lens_ipow(x, 2)*dx + -0.00473576 *x*lens_ipow(dy, 2) + -0.764823 *lens_ipow(dx, 3) + -3.19465 *dx*lens_ipow(dy, 2)*lambda + 2.35031 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.45499e-06 *lens_ipow(x, 3)*lens_ipow(lambda, 2) + -0.0013015 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -1.75209 *lens_ipow(dx, 5)*lambda+0.0f;
const double dx43 =  + -0.00473145 *y*lens_ipow(dx, 2) + -0.766988 *lens_ipow(dy, 3) + -0.000176699 *x*y*dx + -0.0174036 *y*lens_ipow(dy, 2) + -0.00947152 *x*dx*dy + -0.000215909 *lens_ipow(y, 2)*dy + -0.000102699 *lens_ipow(x, 2)*dy + -3.19465 *lens_ipow(dx, 2)*dy*lambda + -1.45331e-06 *lens_ipow(y, 3)*lens_ipow(lambda, 2) + 2.35031 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.00127233 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -1.7225 *lens_ipow(dy, 5)*lambda+0.0f;
const double dx44 =  + 0.856861  + -2.34803 *lambda + 1.70204 *lens_ipow(lambda, 2) + -1.59732 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -2.90663e-06 *lens_ipow(y, 3)*dy*lambda + 2.35031 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -2.90999e-06 *lens_ipow(x, 3)*dx*lambda + -0.292015 *lens_ipow(dx, 6) + -0.287084 *lens_ipow(dy, 6) + -3.00754e-13 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
} break;
