case angenieux__double_gauss__1953__85mm:
{
const double dx00 =  + 0.151196  + 0.273694 *lambda + -0.000427456 *lens_ipow(x, 2) + -0.176638 *lens_ipow(dx, 2) + -0.15572 *lens_ipow(dy, 2) + -0.188388 *lens_ipow(lambda, 2) + -0.000123348 *lens_ipow(y, 2) + 0.00518953 *x*dx*lambda + 0.215298 *lens_ipow(dy, 4) + 0.0115168 *y*lens_ipow(dx, 2)*dy + -8.00724e-08 *lens_ipow(y, 4) + -0.0450094 *x*dx*lens_ipow(dy, 2)*lambda + -0.000828444 *x*y*dx*dy*lambda + -1.81521e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 1.18347 *lens_ipow(dx, 6)*lambda+0.0f;
const double dx01 =  + -0.0284183 *dx*dy + -0.000246696 *x*y + 0.0208658 *y*dx*lens_ipow(dy, 2) + 0.0115168 *x*lens_ipow(dx, 2)*dy + -3.2029e-07 *x*lens_ipow(y, 3) + -0.000414222 *lens_ipow(x, 2)*dx*dy*lambda + -7.26085e-10 *lens_ipow(x, 5)*y+0.0f;
const double dx02 =  + 45.5498  + 11.6248 *lambda + -8.01172 *lens_ipow(lambda, 2) + -0.353275 *x*dx + -0.0284183 *y*dy + -84.6954 *lens_ipow(dx, 2) + -26.1766 *lens_ipow(dy, 2) + 0.00259477 *lens_ipow(x, 2)*lambda + 0.0104329 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 59.8189 *lens_ipow(dx, 4) + 0.0230336 *x*y*dx*dy + -0.0225047 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -0.000414222 *lens_ipow(x, 2)*y*dy*lambda + 321.394 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 7.10084 *x*lens_ipow(dx, 5)*lambda+0.0f;
const double dx03 =  + -0.0284183 *y*dx + -0.31144 *x*dy + -52.3531 *dx*dy + 0.0208658 *lens_ipow(y, 2)*dx*dy + 0.86119 *x*lens_ipow(dy, 3) + 0.0115168 *x*y*lens_ipow(dx, 2) + -0.0450094 *lens_ipow(x, 2)*dx*dy*lambda + -0.000414222 *lens_ipow(x, 2)*y*dx*lambda + 428.525 *lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx04 =  + 0.273694 *x + 11.6248 *dx + -16.0234 *dx*lambda + -0.376777 *x*lambda + 0.00259477 *lens_ipow(x, 2)*dx + -0.0225047 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + -0.000414222 *lens_ipow(x, 2)*y*dx*dy + 1.18347 *x*lens_ipow(dx, 6)+0.0f;
const double dx10 =  + -0.0419784 *dx*dy + 0.00243169 *x*dy + -0.000286385 *x*y + -0.0112653 *x*lens_ipow(dy, 3) + 0.016367 *y*dx*lens_ipow(dy, 2) + -5.03536e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const double dx11 =  + 0.152609  + 0.272013 *lambda + -0.186622 *lens_ipow(lambda, 2) + -0.161807 *lens_ipow(dx, 2) + -0.200653 *lens_ipow(dy, 2) + -0.000434069 *lens_ipow(y, 2) + 0.00296668 *y*dy + -0.000143192 *lens_ipow(x, 2) + -0.014975 *y*lens_ipow(dx, 2)*dy + 0.260173 *lens_ipow(dy, 4) + 0.016367 *x*dx*lens_ipow(dy, 2) + 0.208047 *lens_ipow(dx, 4) + 3.05906 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -6.2942e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const double dx12 =  + -0.323614 *y*dx + -0.0419784 *x*dy + -51.2139 *dx*dy + -0.014975 *lens_ipow(y, 2)*dx*dy + 0.016367 *x*y*lens_ipow(dy, 2) + 0.832187 *y*lens_ipow(dx, 3) + 12.2362 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 523.553 *lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx13 =  + 45.3785  + 11.7108 *lambda + -82.5792 *lens_ipow(dy, 2) + -0.401306 *y*dy + -8.01158 *lens_ipow(lambda, 2) + -0.0419784 *x*dx + 0.00148334 *lens_ipow(y, 2) + -25.607 *lens_ipow(dx, 2) + 0.00121585 *lens_ipow(x, 2) + 56.9146 *lens_ipow(dy, 4) + -0.00748748 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.04069 *y*lens_ipow(dy, 3) + -0.0168979 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.0327341 *x*y*dx*dy + 6.11812 *y*lens_ipow(dx, 4)*dy + 392.665 *lens_ipow(dx, 4)*lens_ipow(dy, 2)+0.0f;
const double dx14 =  + 11.7108 *dy + 0.272013 *y + -0.373245 *y*lambda + -16.0232 *dy*lambda+0.0f;
const double dx20 =  + -0.0208989  + 0.0081748 *lambda + -1.37542e-05 *lens_ipow(x, 2) + -0.0167667 *lens_ipow(dx, 2) + -0.00680048 *lens_ipow(dy, 2) + -0.00578456 *lens_ipow(lambda, 2) + 0.000167525 *x*dx + -4.6092e-06 *lens_ipow(y, 2) + 8.17495e-05 *y*dy + -3.58981e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00538987 *lens_ipow(dy, 4) + 0.000316299 *y*lens_ipow(dx, 2)*dy + 4.46967e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 3.85689e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -2.67321e-08 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 2.512e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.45967e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -0.0246728 *lens_ipow(dx, 6) + -2.36338e-10 *lens_ipow(x, 6)*lens_ipow(dy, 2)+0.0f;
const double dx21 =  + -0.0117403 *dx*dy + -9.2184e-06 *x*y + 8.17495e-05 *x*dy + -2.39321e-08 *lens_ipow(x, 3)*y + 0.000316299 *x*lens_ipow(dx, 2)*dy + 2.97978e-08 *lens_ipow(x, 3)*y*lambda + 1.92844e-09 *lens_ipow(x, 4)*y*dx + -1.06928e-07 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + 2.512e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -0.00164408 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx22 =  + 0.397709  + -0.0335334 *x*dx + -0.0117403 *y*dy + -1.48636 *lens_ipow(dx, 2) + -0.484623 *lens_ipow(dy, 2) + 8.37626e-05 *lens_ipow(x, 2) + 0.000632597 *x*y*dx*dy + 9.64221e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + -5.34642e-08 *x*lens_ipow(y, 4)*dx + -5.8387e-08 *lens_ipow(x, 5)*dx + -0.148037 *x*lens_ipow(dx, 5) + -0.00164408 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const double dx23 =  + -0.0117403 *y*dx + -0.013601 *x*dy + -0.969246 *dx*dy + 8.17495e-05 *x*y + 0.0215595 *x*lens_ipow(dy, 3) + 0.000316299 *x*y*lens_ipow(dx, 2) + 8.37332e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.00164408 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -6.75251e-11 *lens_ipow(x, 7)*dy+0.0f;
const double dx24 =  + 0.0081748 *x + -0.0115691 *x*lambda + 1.48989e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)+0.0f;
const double dx30 =  + -0.0116788 *dx*dy + 7.79295e-05 *y*dx + -9.3347e-06 *x*y + -2.29144e-08 *x*lens_ipow(y, 3) + 0.000303151 *y*dx*lens_ipow(dy, 2) + 2.95464e-08 *x*lens_ipow(y, 3)*lambda + -9.90591e-08 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + 3.04004e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 1.91581e-09 *x*lens_ipow(y, 4)*dy + 2.38959e-05 *lens_ipow(x, 3)*lens_ipow(dx, 4)*dy + -0.887715 *lens_ipow(dx, 3)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx31 =  + -0.0208668  + 0.00821603 *lambda + -0.00581897 *lens_ipow(lambda, 2) + -0.00704051 *lens_ipow(dx, 2) + -0.016861 *lens_ipow(dy, 2) + -1.45235e-05 *lens_ipow(y, 2) + 0.000168746 *y*dy + 7.79295e-05 *x*dx + -4.66735e-06 *lens_ipow(x, 2) + -3.43715e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.000303151 *x*dx*lens_ipow(dy, 2) + 0.00500173 *lens_ipow(dx, 4) + 4.43197e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -0.0240695 *lens_ipow(dy, 6) + -2.47648e-08 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 3.04004e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -1.3896e-07 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 3.83162e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy+0.0f;
const double dx32 =  + -0.014081 *y*dx + -0.0116788 *x*dy + 7.79295e-05 *x*y + -0.979963 *dx*dy + 0.000303151 *x*y*lens_ipow(dy, 2) + 0.0200069 *y*lens_ipow(dx, 3) + 1.01335e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + 2.38959e-05 *lens_ipow(x, 4)*lens_ipow(dx, 3)*dy + -2.66314 *x*lens_ipow(dx, 2)*lens_ipow(dy, 5)*lambda+0.0f;
const double dx33 =  + 0.397742  + -1.48554 *lens_ipow(dy, 2) + -0.0337219 *y*dy + -0.0116788 *x*dx + 8.43729e-05 *lens_ipow(y, 2) + -0.489982 *lens_ipow(dx, 2) + 0.000606303 *x*y*dx*dy + -0.144417 *y*lens_ipow(dy, 5) + -4.95296e-08 *lens_ipow(x, 4)*y*dy + -5.5584e-08 *lens_ipow(y, 5)*dy + 9.57905e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + 5.97397e-06 *lens_ipow(x, 4)*lens_ipow(dx, 4) + -4.43857 *x*lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx34 =  + 0.00821603 *y + -0.0116379 *y*lambda + 1.47732e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.887715 *x*lens_ipow(dx, 3)*lens_ipow(dy, 5)+0.0f;
const double dx40 =  + -3.18826e-08 *x*lens_ipow(y, 2) + -5.56687e-07 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -3.37124e-07 *lens_ipow(x, 2)*y*dx*dy + 0.00756872 *lens_ipow(dx, 5) + 0.0195766 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -2.57807e-07 *lens_ipow(x, 3)*lens_ipow(dy, 2) + 0.010334 *dx*lens_ipow(dy, 4) + 2.92347e-05 *lens_ipow(y, 2)*lens_ipow(dx, 5) + -1.37851e-06 *x*lens_ipow(y, 2)*lens_ipow(dy, 4)+0.0f;
const double dx41 =  + -2.55749e-08 *lens_ipow(y, 3) + -3.18826e-08 *lens_ipow(x, 2)*y + -1.12375e-07 *lens_ipow(x, 3)*dx*dy + 0.00869886 *lens_ipow(dy, 5) + 0.0265571 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -1.73878e-06 *lens_ipow(y, 3)*lens_ipow(dy, 4) + 5.84695e-05 *x*y*lens_ipow(dx, 5) + -1.37851e-06 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + 0.000155135 *lens_ipow(y, 2)*lens_ipow(dx, 4)*dy+0.0f;
const double dx42 =  + -0.812097 *dx*lens_ipow(dy, 2) + -0.797489 *lens_ipow(dx, 3) + -2.78343e-07 *lens_ipow(x, 4)*dx + -1.12375e-07 *lens_ipow(x, 3)*y*dy + 0.0378436 *x*lens_ipow(dx, 4) + 0.0587298 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.010334 *x*lens_ipow(dy, 4) + 0.0531142 *y*dx*lens_ipow(dy, 3) + 0.000146174 *x*lens_ipow(y, 2)*lens_ipow(dx, 4) + 0.000206847 *lens_ipow(y, 3)*lens_ipow(dx, 3)*dy + -5.47006 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -5.98751 *lens_ipow(dx, 7)*lens_ipow(lambda, 2)+0.0f;
const double dx43 =  + -0.812097 *lens_ipow(dx, 2)*dy + -0.779039 *lens_ipow(dy, 3) + -1.12375e-07 *lens_ipow(x, 3)*y*dx + 0.0391532 *x*lens_ipow(dx, 3)*dy + -1.28903e-07 *lens_ipow(x, 4)*dy + 0.041336 *x*dx*lens_ipow(dy, 3) + 0.0434943 *y*lens_ipow(dy, 4) + 0.0796713 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.73878e-06 *lens_ipow(y, 4)*lens_ipow(dy, 3) + -1.43028 *lens_ipow(dy, 5)*lens_ipow(lambda, 2) + -2.75703e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 3) + 5.17118e-05 *lens_ipow(y, 3)*lens_ipow(dx, 4) + -2.73503 *lens_ipow(dx, 4)*dy*lens_ipow(lambda, 3)+0.0f;
const double dx44 =  + 0.59918  + -1.65592 *lambda + 1.21045 *lens_ipow(lambda, 2) + -0.476761 *lens_ipow(dy, 6)*lambda + -4.10255 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.49688 *lens_ipow(dx, 8)*lambda+0.0f;
} break;
